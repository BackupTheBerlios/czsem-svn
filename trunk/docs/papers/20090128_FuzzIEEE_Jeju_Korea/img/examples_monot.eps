%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: examples_monot.pdf
%%Creator: Adobe Acrobat 8.0
%%For: dedek
%%CreationDate: 30.1.2009, 15:31:32
%%BoundingBox: 0 0 177 48
%%HiResBoundingBox: 0 0 176.5082 47.0689
%%CropBox: 0 0 176.5082 47.0689
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 5278 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   pdfx:Company="KSI MFF UK"
   pdfx:SourceModified="D:20090130142200"
   xap:CreatorTool="Acrobat PDFMaker 8.1 for Word"
   xap:ModifyDate="2009-01-30T15:31:23+01:00"
   xap:CreateDate="2009-01-30T15:22:45+01:00"
   xap:MetadataDate="2009-01-30T15:31:23+01:00"
   xapMM:DocumentID="uuid:8f9eda8f-fbcb-42c1-b641-a976965cbe3d"
   xapMM:InstanceID="uuid:5d2c2476-e1b2-4515-b2f5-2a6291b8237d"
   dc:format="application/pdf">
   <xapMM:subject>
    <rdf:Seq>
     <rdf:li>6</rdf:li>
    </rdf:Seq>
   </xapMM:subject>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Jan Ddek</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">serious_0(A) :-   dur_minutes(A,8)</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -47.0688 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 47.0688 li
176.508 47.0688 li
176.508 0 li
cp
clp
[1 0 0 1 -82.8608 0 ]ct
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: CourierNewPSMT Initial
ct_T42Dict begin
-0.02 -0.68 0.637 1.02
 256 array 0 1 255 {1 index exch /.notdef put} for  /CourierNewPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f320d03304d000000cc000000566376
7420a5a561f100000124000007826670676db1123632000008a8000005d8
676c79661d89a99400004f3c0003c08668656164c4fb297800000e800000
0036686865610b7b023c00000eb800000024686d7478d300af5900000edc
00000a526c6f63610ada78d6000019300000149c6d617870097c0c780000
2dcc000000206e616d650bae33ce00002dec0000169c70726570bca08f1f
0000448800000ab167646972000000000000000000000000000104cd0190
00050000059a05330000011d059a05330000036100660212050502070309
02020502040400007a878000000000000008000000004d6f6e6f00400020
fffc04e7fe7e000006a90267400001ffffff0000000004e700000492001b
04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e000004e70000fefd
ffff02d70000005400000054000000000000000000540054009500540054
0054014d005400540054006400d4006d009100970054013301ce00a90040
000f005400d4000301000158003c0093007700d50055fff10054002100a3
00ef002c00390068fffe0011007f00fe017d00a301020002000f003800d3
00650090023c032b04eb0001002a013003ab0182002d003c005400960017
00cf0158002aff0a003c00b3021d023c0002005400cb035f082cff30fff2
01c004c9ff6200a2013c02d604ae00cc00ed01220400fe83ff8bff9bff9c
000e00f4031dfdc3ff31ff6d0054005500600075007c007f0080009e00cd
0159023d02bfff89001100580065007f00b700cb012b0400046000120052
00550084009800b900be00cf00d800e50101010f0128018001d301d40500
fdc4fec4ff49ff62ff6f0045004e00500080010f011d01250141025a035a
03ad03d7fde3fee0ff1e0011005400760078007b008f009000ab00d700d9
00db0103020a0254025503ad001b003d005a006200910093009e00a900c9
00df01080134013a0140018601ac02760403fdc400030004001500390048
005400640091009b00a300a500af00c400d000d100d700f100fe01030119
012b0155015c017d0185018e019401a501ac01ae01eb020502d803030381
04c604ebfed6ff0aff9affa9001b001b001c00200029002c0038004c006d
00cd00ea0128012a012c013f01d2022b022c0301040cfdfefe33ff47ff7f
ffc5ffd7002300270038003d00440045004d005700620079008300bb00c6
00cd00cd00ce00e600f701010103010a0112011d01200123015201530175
01ac01ad01ef01fd0216021d0238026c02b202d4032b03cd045704aefdb4
fe15feb2feeffeffffabffb0ffc3ffcc000200540036003800430055005d
00700073007c007f00b500bb00c500e400e900f501010106011f01280148
014b0155019801ac01df01fc02000208027e02ac02ff033d039003c90419
0498fe4efe6dfe98feb3ff34ff4d000100030005001900340034003a003c
0055005900730082009100a300aa00ab00b300cc00d600ee0118011e0130
01490156015801600168016f01700171017b017c018501a901b401bb01d6
01db01ee020402060215022b022b02630282029302b402c402d602e40300
035303580371037b039303b403d003e80410042c0430044d04600479047a
05000503061608ccfc17fc6dfd62fd9afdc3fe2efe44fe6bfe8bfec1fed6
fee2ff0bffbfffe500060030003c005900670073007d007f0086008e009f
00a900aa00d600e100e700eb00f100f200f501030109011a011e011f012c
013f01430149014d015601570159016601660168016a0175018001ab01b2
01bc01c001c101c901cb01d201dc01ef02010215022e022e023b023d0255
02660282029a02ab02b002d902d902f502f90326032c03320333033e0360
0371038703880393039703dc03e50402041504310453047f04c705030564
0596059b05c405c805ea0610065b00540054005400540000000000000000
0000000003cc02c1043e036c00a00050020303ea02d2023c017d02fb01a7
021d01c102f5021d035003500243023b000201bb0048006d0014079b0621
0621021400100760000000000299022d03570426030c007400500000025a
0286026000a601bc00fb02480152017603cd02a0025f039b0492043e01d7
007f02c10400020d01f600410041013e01a901d3007102d6022d03af04ce
00000000050803fc056d020dff8704e7050203d20000043d010203ca015a
01ed0150021601c1013b028e0023015a011001ed00230149003900d9004d
00b90157003804e0038c024a02db0039006c009301c103cc02bb006c02bb
01a200f2003800fe01720150019c0331007e017100540039006a02940022
02700222007c005500f30182011500d700fb01ab012402660004030d0263
00d40259003c00d00112022e017e0034006d008b018a002c01fd01c000cc
02910036016503befc19fd280201fced01b1034800b101fb04c904c90204
00fb01c1021d01300108014000e100a3009b005500c60021032600a90038
0005022c0003005d0060004c001102f5017c026c0069019803e901a50241
004f0065037302460196fef504410333004100ba0119014306390800053c
051d0434041504e7003e006700670000066804df05820067006703d303f4
ff59ff21fe5f050efedc007a00d9004800db018b00b3004800da0116015e
015104ff024b04ffff5600ab02af04dcff17010c012100d1ff300149feb5
013c0124ff200171ff0b01510086005e06a9fd99048b04850475047c0000
fffb007b00860092009a00c200d500a4001e00270039004c0054005c0062
0069002d0030003200350038003e004200440049004c00500056005a0060
00640066006e00710078009d00ac00b10040004b0055005e00620066006a
007100730077007b007e00820087008c0091009600a600d102aa029f0321
028802c50276026900da00da03c70340015600d40489047f005300240051
011300690037003c001f008c008cffd3005a0029001b010f0134007f0054
0054ffebffd6ffa8fdcf00a600a600920092064200eb0643000040415440
3f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b09051582320b00d44235921212d2c2020
4518684420b001602045b04676688a4560442d2c01b10b0a432343650a2d
2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453a
b10200080d2d2c45b01a234445b01923442d2c2045b00325456164b05051
5845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360
442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810
0062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae418
2d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b
038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b
21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c
58b002855958b00185592d2c20b0032545b019234445b01a234445652345
20b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a40
b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b3194020
1945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f43
23430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343
650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b00325
2349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4bb06451584569b00943608a103a1b212121592d2c01
b005251023208af500b0016023edec2d2c01b005251023208af500b00161
23edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0
01610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb0
2a2a2d2c352d2c76b8026923701020b802694520b0005058b00161593a2f
182d2c21210c6423648bb84000622d2c21b08051580c6423648bb8200062
1bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb20080
2f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015b0
0826b00826b00826b008260f10161345683ab001162d2cb4000100000015
b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b51
5a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b5323
4b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d
2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c
580cb00425b00425060c6423646164b807085158b00425b00425012046b0
1060482046b0106048590a21211b2121592d2cb012435c580cb00425b004
25060c6423646164b807085158b00425b00425012046b8fff060482046b8
fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c
4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b
2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121
592d2c462346608a8a462320468a608a61b8ff8062232010238ab9032603
268a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b202020243604259b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b2021002436042595959592d000100000002e666
77a0537b5f0f3cf50809080000000000a325516100000000b5c9a9f7ffd4
fa90051a082b0000000900010001000000000001000006a9fd99000004cd
ffd4ffd204fb00010000000000000000000000000000000304cd00670000
000004cd0000000001eb010a00bb00e400bb00fe01e1025d012d00e20090
012b00ba01cd00e600e500e400ab00c300d600c4011200d300e7011301cd
0138006200650094011300d700110057007f009e0058009f0080006b00e5
00ab005900800018002e006800b30068005800b9008f0053001000250050
006300d5023d00e3013c00e4000001bc0090002d00ab007e008000d7007d
005500bd00b400bf00bb0015006c0091002d008000ab00cf0092005b003b
00380065009500ed0195023c019400bb00110011007f0058002e00680053
00900090009000900090009000ab008000800080008000ba00ba00ba00ba
006c00910091009100910091005b005b005b005b00fc015100e4007c008f
016f00ab005900000000000401bb013f006500120050006d009000620094
0062005a00b0002b003600a700e101280126003d0010007000e601eb0018
008900b100bb00530063007f0065001100110068001100120091fff100b3
00db01fd01250090009b0095006300670007006b0254000e001300fb01cd
012b00e0003d0011005800110058005800e500e500e500e5000000680000
00530053005300ba013c0128013c013a020001b101ba013b01d4013c0056
00bb00b900cf00d500ed023cfffd00810063009500b3002d0090010e0176
01550163000000000000009f0080007d00e500b900cf007f00ab007f00ab
007effe502c40011009000110090009e007efffd00580080005800800080
00bb008000bb008000bb002e006c002e006c00680091005800ab005800ab
00b900cf008f0092008f00920053005b0053005b00d500ed00d500ed007f
0067005a006200b5011b009800d0007bffe50112011b000e0002017d0002
017d0002017d017d000200a9006500990090021d01000000021d021d0000
021d0000021d00000000000000000000017d021d017d017d000000000000
021d017d017d000000000000021d017d017d000000000000000000000000
000000000000000000000000000000000000000002670000000000000002
0002000f0002000f000200ae007c0026000300030002014100b800800002
006c009f010f005a00090013fff30201012e00bb014100020169016900ae
016f00110090007f00ab007f00ab0058008000580080005800800080007d
0080007d0080007d006b0055006b003e00e500bd00e500bd00e500bd00e5
00bd00ab00b4005900bf0092008000bb002e006c0080006c000000910000
0091005800ab00b900cf008f007a0053005b0053005b0053005b0053005b
002500380063009500d700110090001200100050007001cd002500380025
0038002500380063009501fd013c0088005a000c0011000b001b020801d4
01bb01080040fffc00130041fff6002affd400f2001100570065005800d5
006b00e50059000f0018002e00930068006400b300c4008f00630050001d
003c00e500640062011b008b01bb0057010400460156008b00b3020f009e
00410054004a0145009100ca00cf00570099004500750128005700910057
007500580011007f007f00b900e500e500ab0023000000110077002c0064
001100570057007f004a0058fffb007200280028007700230018006b0068
006400b3007f008f002c0063005000590029000400040002000200570081
0016000f00900080007b0098005a008000140090003a003a00780033001f
006b0091006b002d00ab00a6003c00770065004d004600210021004b0018
00a60082002400830080008e009800ab00cf00bd00ba00b40033ffee003e
0078003c006b007f0098002b003100680225014a01490149022401b701b7
019801980224014b0224023600b50198023c038b00b901cc00d0009e0115
00a300a001770149009200680173009500b400c0006d00850176011c004f
00c000f200fa00de00a200c500ac00cc00a0007a0085008501bf00f7005b
00e8009500950000000000c000cc00b900cc00b900d000d000d0009e0115
00a300a00165013800680173009500b400c00085011c004f00f200fa00a2
00c500ac00cc00a00177009e00b400fa00ac0243018c0160012401c701c7
00fb0201000001dc019701dc01dc01a301dc01ca01db01d90164013f00f4
017f01540137010801070127009601c700e6024a01d101f3010d01270111
01450000000000000000000001ca02030201020301a201a401ab016d0152
0000019c016201600025002500000000000b0006000000000110009e0000
0000009000650003000300000000000a000a0000000000aa007000f00097
00f000f0009e009e00bf00bf00bf013f0090009000f0009700f000970183
01d501c701a801ca0000001d002b002b0000001d002b002b002b002b0000
001d00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000019c019c025d012d000000140201010a00cb0197
019700c400c001bc01f800aa007000000000020001f80025002500000000
01c80184002500250000000000250025000000000110009e000000000110
009e000000000110009e00000000019e0151019e01510090006500900065
000600060000000000060006000000000000000000000000000000000000
0000000c000a00000000000c000a00000000011a011c00000000011a011c
00000000000b00060000000000a600d60000000000b40038000000000108
00710000000001b201b20000000000fe008e0000000001f3018400000000
00c400c000aa007000aa00760000000000670099008200a1009c00d7009c
00d7021901d101dc01dc0061004c019c01db01ca010d024a01a30197005d
0020000501c701ca01ca01d501a8018301db01b201b2009c009c01ea01f5
01f50075006b01b501f401e30126026301bc01b0007f0041002601e001e3
01e301ee01c1019c01c7019e019e00d700d700c300ce00cd016a0174008e
00cd00bc0000013c00950089017f011100ee00b900bc00bc00c7009a0075
0186015d015d01be01be01bc019a01df00000025002500000000000b0006
0000000000f00097009e0000001d002b0000000001470147015800f300da
01f801f800ce0000006800910053005b01c10199019801c401cb01c001bb
01c501ab01b9012b01240118015e0144037d00c800000000019f01bd01a5
01c301b701b7012b012b012b01280128012801ff01ff01ff01ff01ff01c4
01a8012801ff01ff01ff01ff01ff01ff01ff01ff01ff01ff0142012b0142
012b00110090001100900011009000110090001100900011009000110090
001100900011009000110090001100900011009000580080005800800058
0080005800800058008000580080005800800058008000e500ba00e500bd
006800910068009100680091006800910068009100680091006800910068
0091006800910068009100680091006800910053005b0053005b0053005b
0053005b0053005b0053005b0053005b0063009500630095006300950011
009000e500ba006800910053005b0053005b0053005b0053005b0053005b
012f011400f50114007f0098fffb00140077007800770078006b006b0062
0095006200950050006500290046006b006c004200800068009100000000
00000000007000000070000000700000007000000124000001cc000003f4
000006480000084e00000a0000000a5400000b0200000bb000000d6e0000
0e2a00000e8a00000ebe00000f0a00000fb6000011f800001302000014a4
000016520000178c000018ea00001b2200001bea00001e0200001fea0000
20700000211c000021e2000022720000233c00002488000026b2000028f6
00002af200002c7200002e0200002fa80000312c000032fe000035720000
36aa0000381000003b2e00003bfe00003ec4000040b20000430e00004486
000047040000494400004adc00004bd400004d7e00004f5a000052c40000
55b8000057e400005956000059d800005a6000005ada00005ba200005be2
00005c3e00005e3a00005fd800006146000062a2000063e00000653c0000
66ec000068fa000069d400006ad200006e2400006ed0000071b6000073d8
00007574000077300000790400007a9600007d4600007e8e000080120000
81dc00008582000088d800008b2600008c5e00008d8a00008de000008f4a
0000903600009080000090cc000090fa0000913000009172000091a60000
91e2000092140000924e0000928c000092cc0000930c0000935c0000938c
000093c4000093f8000094280000945a0000948a000094b8000094e80000
9518000095560000958e000095c4000095f40000962c000096680000969a
000096ca000096fa0000972c000097e000009878000099e400009b8e0000
9d6e00009dce00009f6e0000a1200000a3700000a54a0000a7ea0000a84a
0000a8ca0000a9fc0000acf00000aece0000b01a0000b12a0000b2420000
b35c0000b60c0000b7040000b7dc0000b8f20000b9ec0000bb440000bc9e
0000bdbe0000beca0000c0320000c2d20000c45a0000c5920000c6460000
c6ba0000c75c0000c87a0000ca5c0000cafc0000cc700000cdb20000ce86
0000cec00000cf020000cf320000d0ce0000d3360000d3840000d3d20000
d45c0000d4e60000d54c0000d5b20000d6980000d7400000d77a0000d7ae
0000d7fa0000d9c00000da460000dacc0000dca80000de660000df780000
dfca0000e01c0000e0b00000e3320000e3840000e3c40000e3f80000e43e
0000e4720000e4a80000e4da0000e5120000e5500000e5800000e5b00000
e5c80000e5fc0000e6320000e67a0000e72a0000e7ca0000e8940000e8e6
0000e95c0000e9a80000ea460000eb1a0000ec0c0000ecba0000ed600000
ef520000f0d60000f1100000f1460000f17c0000f1ba0000f2aa0000f454
0000f61c0000f6500000f6840000f8160000f95c0000f9da0000fb300000
fc2a0000fd720000fe8c0001004600010296000104e80001063c00010670
000106a6000106d800010708000107360001076a0001079c000107d20001
0806000109fe00010a4e00010a9800010ad200010b0e00010b6200010bb4
00010bf400010d9c00010dac00010e0000010e8400010ec400010ef40001
0f2600010f5800010f9000010fd20001100a0001104400011078000110ae
000110f20001112c000111600001119a000111cc000111fc0001123e0001
126e000112a2000112d4000113040001133200011364000115080001154a
00011584000115b8000115f2000116220001165a0001168e000116c40001
17be0001196800011b1600011c9400011dc800011f3400012012000120b8
00012234000122ba000122f60001245200012728000127cc000128800001
2922000129c400012aac00012b8e00012c9400012ce200012d8600012e54
00012ed000012f3800012fa0000130100001303a0001306a000130a20001
30da000131120001314a00013190000131d80001321a0001325e000132be
0001330400013358000133aa000134020001346e000134c0000135180001
3584000135d6000136300001369c000136f000013748000137b400013814
0001387e0001390600013968000139d200013a5e00013ac200013b240001
3ba800013c0600013c6a00013cee00013d8000013e1a00013eda00013f06
00013f3200013f6000013f8e00013fbe0001441000014c9c000154de0001
55080001554000015584000155c00001560e0001564a0001572400015792
00015878000159d400015ad600015c7e00015d9600015f48000160780001
61d800016284000162fe000163c0000164d8000167400001692e0001695a
000169b0000169e400016b9800016ca800016cd200016cee00016d5c0001
6d9400016e0e00016e4200016e7600016eb400016eee00016f2200016f56
00016f8800016fc0000170080001703c00017074000170a8000170ea0001
711e000171540001718c000171b6000171ec0001722c0001742a000176ca
000178dc0001790e0001794200017978000179ac000179e200017a120001
7b8400017cda00017d1400017e1800017e4200017e66000180080001802c
0001805000018074000180a40001820e000183ba000183d2000184060001
841e0001844e0001847200018496000184cc000185000001869e0001881c
0001885200018888000188ba000188ee0001891e0001894e00018b360001
8cf600018d2e00018d6400018da000018dd000018efe00018f5000018fa6
00018fd600019004000190340001906200019072000190aa000190e20001
91120001914000019174000191a6000191de000192140001922400019234
000193be0001949800019714000199f200019c8c00019ee200019f6c0001
a0000001a0100001a0e00001a3440001a56a0001a7f20001a9200001aa62
0001ac4c0001ae160001ae4c0001ae5c0001ae6c0001af200001af300001
af400001af500001af600001af700001b12c0001b13c0001b14c0001b314
0001b3240001b4b60001b4c60001b5fe0001b60e0001b61e0001b62e0001
b8540001b9ea0001ba220001ba600001ba8e0001bac20001baf60001bb2a
0001bb6c0001bc8c0001bdb00001beb20001c0240001c1420001c1aa0001
c3d20001c5820001c6d60001c7c60001c9680001c9780001ca3c0001cb5c
0001ccae0001ce500001cf860001d0c00001d1020001d1440001d1780001
d1a60001d1e00001d2300001d3ba0001d3ec0001d5420001d5520001d562
0001d5a40001d5b40001d74a0001d9c00001dba80001dbe80001dc380001
ddf00001de000001df260001df360001e04c0001e1860001e1960001e5aa
0001e7300001e8e40001e92a0001eb560001ecbe0001ecce0001ecde0001
ecee0001ee800001ee900001eea00001eeb00001f08c0001f2440001f254
0001f3ca0001f58c0001f8aa0001fbae0001fcd60001ff1c000200500002
00820002025600020296000202a6000203cc00020516000206260002077a
0002078a00020b0600020c5800020e3000020e7200021080000211e00002
14560002166200021672000217f80002180800021818000218ee00021ac4
00021c7400021c8400021e1a00021ff200022252000224aa000225da0002
2806000229400002297400022b5600022d2400022d5600022f4600022f76
0002309a000230aa000230ba000230f40002310400023290000234fa0002
36ea0002372400023762000238fa000239e600023ad000023b0400023d82
00023f4200023fa2000240a400024142000241f800024236000242aa0002
435400024398000243f800024442000244d2000245160002455c00024598
000245e80002463000024668000246a00002471600024882000248fa0002
49d400024a4000024ac400024b1600024b8e00024c1a00024cf600024d42
00024dc000024e5600024f4400024fdc000250d000025138000251940002
525000025314000253c40002548a0002554e0002566400025746000257a6
0002588e00025920000259b600025a4a00025ae000025b2c00025bbe0002
5cb000025d2800025d7a00025dcc00025e1200025e9e00025f5a00025f8a
00025fba00025fea0002601a0002603e0002606200026218000262440002
6274000262a2000262c6000262fa000263340002645a000264d400026506
0002652e0002658a000265ae000265dc000266da000267da000268d00002
6a4600026b9200026bbc00026cd800026d0a00026d2e00026d5c00026d8a
00026dbc00026f0000026f3c000270880002714a000271fe000272960002
737600027484000275660002759400027656000277f80002783a000278a2
00027996000279be00027abe00027b9400027c1400027c9200027d700002
7e9800027fae000280540002810e000281c60002826a000283340002840e
0002849400028578000285d800028708000287d80002886a000289880002
8a8a00028b8c00028ba400028bd800028bfe00028f4e00028fae0002904a
0002906a000291fc000293ee0002959a0002978e00029976000299d40002
9cac00029cbc00029d9c00029dda00029e1000029e3600029e4c00029e80
00029e9600029eea00029f4400029f9a00029fec0002a0480002a2780002
a28e0002a2b40002a2e80002a3240002a5420002a7840002a8b20002a9d8
0002ab680002ad200002ae760002afea0002b0f20002b2120002b22a0002
b2620002b29c0002b2ca0002b30c0002b3700002b3b40002b52c0002b584
0002b7040002b83c0002b8780002b8a40002b8d80002b90a0002b94c0002
bbea0002bdb60002bf160002c1000002c25a0002c2800002c2b80002c2e8
0002c5200002c54c0002c5b20002c60c0002c8980002c8c20002cb000002
cb580002cb940002cbb40002cbcc0002cc0c0002cc300002cc680002ccb6
0002ccfc0002cd5c0002cdbc0002cdec0002ce300002ce6a0002cfc20002
cffa0002d18a0002d1a20002d2c40002d2f00002d3aa0002d5b60002d5dc
0002d6ee0002d7380002d80a0002d83e0002d86a0002d8ae0002d8de0002
daac0002db340002db8c0002dc000002dc2c0002dc820002dcb80002dcfa
0002dd740002ddf40002df560002e1c20002e1d20002e20c0002e2540002
e2840002e2b00002e2f60002e33c0002e3860002e3c60002e3f80002e418
0002e44e0002e4900002e5040002e59a0002e5b20002e5ca0002e5e20002
e5fa0002e6480002e6920002e6ba0002e6ee0002e72a0002e7680002e78c
0002e7bc0002e8000002e8340002e88e0002e8e20002e8fa0002e9120002
ea0c0002eb8c0002ec600002ed980002edc60002edf40002ee0c0002ee34
0002eee80002ef8e0002efc20002efec0002f09c0002f17e0002f1ac0002
f1d00002f3640002f4e40002f62a0002f77e0002f7ae0002f7de0002f812
0002f8460002f9800002fb060002fc080002fd4e0002fd7e0002fdb60002
fde20002fe0e0002fefe0003001e0003010c0003022c00030276000302be
000302fe0003034000030490000305e8000306da000307f00003081e0003
086200030898000308d40003090c000309480003098a000309d000030b4c
00030d0000030d5400030da600030f420003110400031114000311240003
120a0003130a00031388000314540003155400031564000316340003171e
0003182a0003195600031988000319bc000319cc00031ab600031c1e0003
1de400031ef20003201a0003202a0003203a000320740003225000032290
000322c8000322f6000323320003236600032398000323d0000324080003
253e00032660000326a0000326b2000326c4000326d60003270c00032744
00032756000327680003277a0003278c000327aa000327c8000327e80003
28260003286c000328dc000328ee00032900000329120003292400032936
000329480003295a0003296c0003297e000329b2000329ea000329fc0003
2a0e00032a2000032a5400032a9800032ab600032ac800032ada00032aec
00032b0a00032b1c00032b2e00032b6400032b9a00032bf200032c120003
2c2400032c3600032c4800032c5a00032c6c00032c7e00032ca800032cba
00032cf800032d3c00032d5600032d6800032d7a00032f5e000331ae0003
31c0000331d2000331e4000331f6000332080003321a0003322c0003347c
000336ee00033a1c00033a2e00033a4000033a5200033a6400033a760003
3aa400033ac400033af200033b3400033b6600033b9a00033c3e00033d18
00033dd800033ff6000340dc000341d80003426c000343200003446a0003
45b0000346bc000347ce0003492200034a3800034be400034d3c00034e78
00034fd400035100000351e4000353f400035654000358d000035b6e0003
5eb800035ece00035ee4000360840003631600036540000366ca0003683e
000369be00036a2e00036a9e00036b1200036b8600036bfa00036c640003
6d1c00036dd000036e8200036f3600036ff0000370aa0003716c00037212
0003729e000372dc0003746a00037516000375e000037648000376b00003
7720000377900003784800037900000379ba00037a7400037b2e00037bec
00037caa00037d6800037d7a00037d8c00037d9e00037db000037dc20003
7e3600037ea000037f5e00037f7000037f8200037f9400037fa600037fb8
00037fca00037fdc00037fee0003800000038012000380cc000381860003
8240000382fa000383240003834a00038388000383b40003841a00038474
000384dc0003853a00038590000385de0003863400038682000386e40003
873400038798000387f600038858000388a80003891000038982000389e0
00038a2c00038a9200038ae000038b0e00038b3600038b5e00038b820003
8bbc00038bea00038c2e00038c7a00038cc000038d1000038d4400038d84
00038db800038df800038e4000038e8400038ea800038ecc00038ef20003
8f1800038f3e00038f6400038f8800038fac00038ff20003903e00039084
000390d4000391080003914c00039180000391c000039200000392420003
9274000392a2000392d80003930a0003932e0003935200039382000393b0
000393dc00039402000394280003944e00039478000394b4000394e40003
95120003955600039584000395ae000395e600039616000396440003966a
00039690000396b6000396da000396fe0003972400039754000397820003
97be000397f8000398280003985800039888000398b6000398e60003993c
00039962000399d2000399f400039a8400039aae00039b3800039b4e0003
9be800039d6600039f5e0003a0fe0003a2f80003a3c00003a4820003a6de
0003a9220003aa860003abec0003ad760003af0e0003b00c0003b1000003
b1de0003b2c40003b3d20003b4ee0003b6260003b7ce0003b9780003baac
0003bb8a0003bc640003bd780003be560003bf840003c086000100000526
012200490072000500020010002f00550000039f0ab10003000200000046
034e000000030000000000fe000000000003000000010016011000000003
00000002000e01580000000300000003005a00fe00000003000000040016
01100000000300000005001801660000000300000006001c017e00000003
0000000700a6019a0000000300000008002602cc0000000300000009001c
08f4000000030000000a021e0910000000030000000b006c0b2e00000003
0000000c00660b9a000000030000000d06b40240000000030000000e005c
0c000001000000000000007f0c5c0001000000000001000b0ce400010000
0000000200070d080001000000000003002d0cdb0001000000000004000b
0ce40001000000000005000c0d0f0001000000000006000e0d1b00010000
0000000700530d29000100000000000800130dc20001000000000009000e
10d6000100000000000a010f10e4000100000000000b003611f300010000
0000000c00331229000100000000000d035a0d7c000100000000000e002e
125c0003000104030002000c128a00030001040500020010129a00030001
04060002000c12aa0003000104070002001012b600030001040800020010
12c6000300010409000000fe000000030001040900010016011000030001
04090002000e01580003000104090003005a00fe00030001040900040016
01100003000104090005001801660003000104090006001c017e00030001
0409000700a6019a0003000104090008002602cc0003000104090009001c
08f4000300010409000a021e0910000300010409000b006c0b2e00030001
0409000c00660b9a000300010409000d06b40240000300010409000e005c
0c0000030001040a0002000c128a00030001040b0002001012d600030001
040c0002000c128a00030001040e0002000c12e60003000104100002000e
12f60003000104130002001213040003000104140002000c128a00030001
041500020010128a0003000104160002000c128a0003000104190002000e
131600030001041b0002001012e600030001041d0002000c128a00030001
041f0002000c128a0003000104240002000e132400030001042a0002000e
133200030001042d0002000e134000030001080a0002000c128a00030001
08160002000c128a000300010c0a0002000c128a000300010c0c0002000c
128a00540079007000650066006100630065002000a90020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e00200070006c0063002e0020004400610074
0061002000a900200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e00200070
006c0063002f005400790070006500200053006f006c007500740069006f
006e007300200049006e0063002e00200031003900390030002d00310039
00390034002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064004d006f006e006f007400790070
0065003a0043006f007500720069006500720020004e00650077003a0076
0065007200730069006f006e00200032002e0039003000200028004d0069
00630072006f0073006f0066007400290052006500670075006c00610072
00560065007200730069006f006e00200032002e003900300043006f0075
0072006900650072004e0065007700500053004d00540043006f00750072
0069006500722122002000540072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e00200070006c
00630020007200650067006900730074006500720065006400200069006e
0020006300650072007400610069006e00200063006f0075006e00740072
006900650073002e004e004f00540049004600490043004100540049004f
004e0020004f00460020004c004900430045004e00530045002000410047
005200450045004d0045004e0054000d000a000d000a0054006800690073
002000740079007000650066006100630065002000690073002000740068
0065002000700072006f007000650072007400790020006f00660020004d
006f006e006f00740079007000650020005400790070006f006700720061
00700068007900200061006e006400200069007400730020007500730065
00200062007900200079006f007500200069007300200063006f00760065
00720065006400200075006e006400650072002000740068006500200074
00650072006d00730020006f0066002000610020006c006900630065006e
00730065002000610067007200650065006d0065006e0074002e00200059
006f0075002000680061007600650020006f0062007400610069006e0065
006400200074006800690073002000740079007000650066006100630065
00200073006f006600740077006100720065002000650069007400680065
00720020006400690072006500630074006c0079002000660072006f006d
0020004d006f006e006f00740079007000650020006f007200200074006f
0067006500740068006500720020007700690074006800200073006f0066
007400770061007200650020006400690073007400720069006200750074
006500640020006200790020006f006e00650020006f00660020004d006f
006e006f0074007900700065002700730020006c006900630065006e0073
006500650073002e000d000a000d000a005400680069007300200073006f
00660074007700610072006500200069007300200061002000760061006c
007500610062006c00650020006100730073006500740020006f00660020
004d006f006e006f0074007900700065002e00200055006e006c00650073
007300200079006f00750020006800610076006500200065006e00740065
00720065006400200069006e0074006f0020006100200073007000650063
00690066006900630020006c006900630065006e00730065002000610067
007200650065006d0065006e00740020006700720061006e00740069006e
006700200079006f00750020006100640064006900740069006f006e0061
006c0020007200690067006800740073002c00200079006f007500720020
0075007300650020006f00660020007400680069007300200073006f0066
007400770061007200650020006900730020006c0069006d006900740065
006400200074006f00200079006f0075007200200077006f0072006b0073
0074006100740069006f006e00200066006f007200200079006f00750072
0020006f0077006e0020007000750062006c0069007300680069006e0067
0020007500730065002e00200059006f00750020006d006100790020006e
006f007400200063006f007000790020006f007200200064006900730074
0072006900620075007400650020007400680069007300200073006f0066
00740077006100720065002e000d000a000d000a0049006600200079006f
00750020006800610076006500200061006e007900200071007500650073
00740069006f006e00200063006f006e006300650072006e0069006e0067
00200079006f00750072002000720069006700680074007300200079006f
0075002000730068006f0075006c00640020007200650076006900650077
00200074006800650020006c006900630065006e00730065002000610067
007200650065006d0065006e007400200079006f00750020007200650063
006500690076006500640020007700690074006800200074006800650020
0073006f0066007400770061007200650020006f007200200063006f006e
00740061006300740020004d006f006e006f007400790070006500200066
006f00720020006100200063006f007000790020006f0066002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e0074002e000d000a000d000a004d006f006e006f00740079
00700065002000630061006e00200062006500200063006f006e00740061
0063007400650064002000610074003a000d000a000d000a005500530041
0020002d0020002800380034003700290020003700310038002d00300034
00300030000900090055004b0020002d0020003000310031003400340020
003000310037003300370020003700360035003900350039000d000a0068
007400740070003a002f002f007700770077002e006d006f006e006f0074
007900700065002e0063006f006d0048006f00770061007200640020004b
006500740074006c0065007200440065007300690067006e006500640020
006100730020006100200074007900700065007700720069007400650072
0020006600610063006500200066006f0072002000490042004d002c0020
0043006f0075007200690065007200200077006100730020007200650020
0064007200610077006e002000620079002000410064007200690061006e
00200046007200750074006900670065007200200066006f007200200049
0042004d002000530065006c006500630074007200690063002000730065
0072006900650073002e0020002000410020007400790070006900630061
006c00200066006900780065006400200070006900740063006800200064
0065007300690067006e002c0020006d006f006e006f0074006f006e0065
00200069006e002000770065006900670068007400200061006e00640020
0073006c0061006200200073006500720069006600200069006e00200063
006f006e0063006500700074002e00200020005500730065006400200074
006f00200065006d0075006c006100740065002000740079007000650077
007200690074006500720020006f0075007400700075007400200066006f
00720020007200650070006f007200740073002c00200074006100620075
006c0061007200200077006f0072006b00200061006e0064002000740065
00630068006e006900630061006c00200064006f00630075006d0065006e
0074006100740069006f006e002e0068007400740070003a002f002f0077
00770077002e006d006f006e006f0074007900700065002e0063006f006d
002f00680074006d006c002f006d0074006e0061006d0065002f006d0073
005f0063006f00750072006900650072006e00650077002e00680074006d
006c0068007400740070003a002f002f007700770077002e006d006f006e
006f0074007900700065002e0063006f006d002f00680074006d006c002f
006d0074006e0061006d0065002f006d0073005f00770065006c0063006f
006d0065002e00680074006d006c0068007400740070003a002f002f0077
00770077002e006d006f006e006f0074007900700065002e0063006f006d
002f00680074006d006c002f0074007900700065002f006c006900630065
006e00730065002e00680074006d006c547970656661636520a920546865
204d6f6e6f7479706520436f72706f726174696f6e20706c632e20446174
6120a920546865204d6f6e6f7479706520436f72706f726174696f6e2070
6c632f5479706520536f6c7574696f6e7320496e632e20313939302d3139
39342e20416c6c205269676874732052657365727665644d6f6e6f747970
653a436f7572696572204e65773a76657273696f6e20322e393020284d69
63726f736f667429526567756c617256657273696f6e20322e3930436f75
726965724e657750534d54436f7572696572aa2054726164656d61726b20
6f6620546865204d6f6e6f7479706520436f72706f726174696f6e20706c
63207265676973746572656420696e206365727461696e20636f756e7472
6965732e4e4f54494649434154494f4e204f46204c4943454e5345204147
5245454d454e540d0a0d0a54686973207479706566616365206973207468
652070726f7065727479206f66204d6f6e6f74797065205479706f677261
70687920616e64206974732075736520627920796f7520697320636f7665
72656420756e64657220746865207465726d73206f662061206c6963656e
73652061677265656d656e742e20596f752068617665206f627461696e65
64207468697320747970656661636520736f667477617265206569746865
72206469726563746c792066726f6d204d6f6e6f74797065206f7220746f
676574686572207769746820736f66747761726520646973747269627574
6564206279206f6e65206f66204d6f6e6f747970652773206c6963656e73
6565732e0d0a0d0a5468697320736f66747761726520697320612076616c
7561626c65206173736574206f66204d6f6e6f747970652e20556e6c6573
7320796f75206861766520656e746572656420696e746f20612073706563
69666963206c6963656e73652061677265656d656e74206772616e74696e
6720796f75206164646974696f6e616c207269676874732c20796f757220
757365206f66207468697320736f667477617265206973206c696d697465
6420746f20796f757220776f726b73746174696f6e20666f7220796f7572
206f776e207075626c697368696e67207573652e20596f75206d6179206e
6f7420636f7079206f722064697374726962757465207468697320736f66
74776172652e0d0a0d0a496620796f75206861766520616e792071756573
74696f6e20636f6e6365726e696e6720796f75722072696768747320796f
752073686f756c642072657669657720746865206c6963656e7365206167
7265656d656e7420796f7520726563656976656420776974682074686520
736f667477617265206f7220636f6e74616374204d6f6e6f747970652066
6f72206120636f7079206f6620746865206c6963656e7365206167726565
6d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e7461
637465642061743a0d0a0d0a555341202d202838343729203731382d3034
30300909554b202d203031313434203031373337203736353935390d0a68
7474703a2f2f7777772e6d6f6e6f747970652e636f6d486f77617264204b
6574746c657244657369676e656420617320612074797065777269746572
206661636520666f722049424d2c20436f75726965722077617320726520
647261776e2062792041647269616e20467275746967657220666f722049
424d2053656c656374726963207365726965732e20204120747970696361
6c2066697865642070697463682064657369676e2c206d6f6e6f746f6e65
20696e2077656967687420616e6420736c616220736572696620696e2063
6f6e636570742e20205573656420746f20656d756c617465207479706577
7269746572206f757470757420666f72207265706f7274732c2074616275
6c617220776f726b20616e6420746563686e6963616c20646f63756d656e
746174696f6e2e687474703a2f2f7777772e6d6f6e6f747970652e636f6d
2f68746d6c2f6d746e616d652f6d735f636f75726965726e65772e68746d
6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f
6d746e616d652f6d735f77656c636f6d652e68746d6c687474703a2f2f77
77772e6d6f6e6f747970652e636f6d2f68746d6c2f747970652f6c696365
6e73652e68746d6c004e006f0072006d0061006c006e0079006f00620079
010d0065006a006e00e9006e006f0072006d0061006c005300740061006e
0064006100720064039a03b103bd03bf03bd03b903ba03ac004e006f0072
006d00610061006c0069004e006f0072006d00e1006c006e0065004e006f
0072006d0061006c0065005300740061006e00640061006100720064041e
0431044b0447043d044b0439004e0061007600610064006e006f00740068
01b001a10300006e00670041007200720075006e00740061ba0054ffc003
c0b2553340b803c0b23a3340b803c0b30e243280b803c0b30b0d3280b803
c0b209333f412f03c0007003c000af03c000cf03c00004005f03c0007f03
c000af03c00003001f03c0003f03c0005f03c0008f03c0000400a003bb00
b003bb00c003bb00d003bb000400a003ba00b003ba00c003ba00d003ba00
04003f03b8000103b703b6b2241f40b803b4b3192432ef411a03b300ff03
b300020391038b0021001f035e038b0021001f035f038b0021001f038f03
8b002a001f0390038b002a001f038d038bb23b1f0f4109038b000100ef03
8b00ff038b0002ffc0039cb2474f32b9ffc0039cb2373c32b9ffc0039bb2
474f32b9ffc0039bb3373c321f4119039c00b0039c00c0039c00d0039c00
0400ef039c0001001f039b00b0039b00c0039b00d0039b000400ef039b00
01ffc0039cb2212932b9ffc0039bb2212932b9ffc0039cb20f1632b9ffc0
039bb20f1632410a035903560032001f035803560032001f03570356b232
1fbf41600355000100af0355000100a003540001008f03540001005f0354
0001004f03540001007f03550001007f03540001006f03550001006f0354
0001003f03550001003f03540001003f03540001002f03540001002f0354
0001001f03540001000f03540001035203530029001f0351034a0029001f
035003450025001f034f034a0025001f034e03490025001f034d03470025
001f034c034a0018001f034b03450012001f034a03460018001f03490345
0044001f034803460044001f03470346b2441f3041700346005f03450002
000f0344001f0344002f0344003f03440004000f0344008f034400a00344
00df03440004005f0344007f034400cf03440003002f0344000103440344
0343034303410341000f0340001f0340002f0340000303400340033f033f
033e033e000f033d0001033d033d0040033c0001001f033c002f033c003f
033c004f033c005f033c00c0033c00d0033c0007033c033c002003350030
03350040033500500335006003350005000f032c002f032c008f032c0003
032c032d0024001f0321028c0014001f0320028c0014001f031f028b001e
001f031e028bb21e1f40410902b4005002b4006002b4007002b4008002b4
b205120f4114028b001f028b002f028b004f028b005f028b007f028b009f
028b00af028b0008003f028b004f028b400b023f023f034f024f030440b8
0329b33c3c3240b80329b333363240b80329b31c1d3240b80329b30c1a32
0f41720329007f0329009f03290003000f0329002f0329003f0329000300
0f0329001f0329000200af032700bf032700cf032700df03270004000f03
27004f0327005f0327008f0327009f032700af0327000600bf032700ef03
2700ff03270003006f0327007f0327008f0327009f032700af0327000500
0f0327001f0327002f0327004f0327005f03270005000f0328002f032800
5f0328007f032800af0328000500df03280001000f0327000f0328005003
28008f032800bf0328000500df03220001008f03220001003f0322004f03
220002002f0322003f03220002000f0322001f0322b202090fb8028bb201
3a0f4137028c004f028c0002000f028d002f028d003f028d0003002f028b
0001002f028c003f028c004f028c008f028c00af028c000503b903b90329
03290327032703280328032203220321032103200320031f031f031e031e
02900290028f028f028e028e028d028d028c028c028b028b4014af2bbf2b
025f356f357f358f359f35af35bf3507bb0261026102600260400a001616
0000001211081a41100204005c000d01fa005c000d01ad005c000d017200
5c000d0140005c000d0117401a5c0de45c0dc85c0d995c0d955c0d585c0d
4e5c0d465c0d2f5c0db8016240172b0ddb2b0d902b0d562b0d362b0d352b
0d332b0d292b0d411101590157000d00be0157000d00420157000d003201
57000d00220157000d001d0157b20d0009bc015b00210801001f0127b421
811fe521b80401b21f8321b80801b21f8221b80401b21f5b21b80401b21f
3b21b80801b61f3021671f2c21b80401b21f2621b80401b21f2421bd0401
001f005501ac0007012b402c07c9075f07400739072e072d072807270723
071f071408120810080e080c080a080808060804080208000814b8ffe040
2b0000010014061000000100060400000100041000000100100200000100
0200000001000002010802004a00b013034b024b5342014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b544218b0372b4bb807ff
52b0382b4bb009505b58b101018e59b0382bb00288b801005458b801ffb1
01018e851bb0124358b90001012c858d1bb90001012c858d59594bb00950
58b104018d8d590016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b18b0372b1db0964b5358b0aa1d59b0324b5358b0
ff1d594bb8040153205c58b9023802364544b90237023645445958b90a80
0238455258b902380a804459594bb8040153205c58b9002002384544b900
21023845445958b90a800020455258b900200a804459594bb8040153205c
58b9001e02374544b90025023745445958b90a80001e455258b9001e0a80
4459594bb8040153205c58b13d214544b1212145445958b90a80003d4552
58b9003d0a804459594bb8040153205c58b167214544b1212145445958b9
0a800067455258b900670a804459594bb8030153205c58b121214544b121
2145445958b907e00021455258b9002107e04459594bb8030153205c58b1
21214544b11e2145445958b907e00021455258b9002107e04459594bb803
0153205c58b121214544b1252145445958b907e00021455258b9002107e0
4459592b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b9004a01d6b1437a45652345602345
6560234560b08b766818b080622020b9004301d64565234520b003266062
636820b003266165b801d6236544b043234420b14a7a4565234520b00326
6062636820b003266165b07a236544b04a2344b1007a455458b17a406544
b24a404a4523614459b347612aad456523456023456560234560b0897668
18b080622020b12a614565234520b003266062636820b003266165b06123
6544b02a234420b147ad4565234520b003266062636820b003266165b0ad
236544b0472344b100ad455458b1ad406544b247404745236144594b5342
014b5058b108004259435c58b108004259b3020b0a124358601b21594216
10703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342
b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b01243
58b9187e3b211bba01a80400000b2b59b0102342b0112342001845694445
694473731845694445694445694445694445694445694445694445694445
6944456944456944456944456944456944456944737373745e735e737373
737473737473737374757373742b2b2b2b007300737400435c58410c001f
028b001f028d0002000f028b000f028c000f028d000373735974002b2b2b
2b2b73750045694473744569447345694445694445694473456944456944
4569447574737301732b2b2b2b2b2b2b2b2b2b2b2b007373737373737373
7373737373737373732b2b2b012b002b012b002b017375007375012b2b00
2b2b0073752b2b2b2b2b2b0173012b012b73017300737374752b2b2b2b2b
2b00000000>
[16069 14913 16089 16041 16301 15357 16161 16193 15513 16309 16017 16037 16369
15173 16001 7367 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> CourierNewPSMT AddT42Char 
1 2644 11 <0001025dfefc03af04e7001b00504027290c2a100205170e130a12160606
0510171613153e13054d090913a00e24000010000200191ccaba01050018
0119852b4e10f45d4dfdf43c10ed10e4003f3c3f3c111239390111123939
3130015d0134121237363332161514070602151412171615140623222726
0226025d3caa270c0e1219076e5e5e6e0719120e0c25a84001f273010201
52230b18110a0ccafeb8a4a5feb8c90c0a11190b22014afe>CourierNewPSMT AddT42Char 
1 2818 12 <0001012dfefc027f04e7001b005040290902091a1902191a0405170e1309
1206171610050613054d0a0a153e13a00e240f001f0002001a1da4ba014d
00180119852b4e10f65d4dfdf4e43c10ed003f3c3f3c1239390111123939
3130015d0114020207062322263534373612353402272635343633321716
1216027f3caa270c0e1219076e5e5e6e0719120e0c25a84001f173fefffe
ad220c19110a0cc90148a4a50148ca0c0a11180b22feb6fe>CourierNewPSMT AddT42Char 
1 3626 15 <0001012bfed402d1012e000900334018c200d200e000f0000400b60401f3
02c100d20f071f070207bc0198000a006d011d00182b10f65de4fde4002f
ed3130015d0121010623222635343701c00111fed71b26192303012efdd8
3223190a0c00>CourierNewPSMT AddT42Char 
1 3722 16 <000100ba02070413027f0003001a400c00c002001a0502190463ab182b4e
10e410e6002f4ded3130011521350413fca7027f7878>CourierNewPSMT AddT42Char 
1 3774 17 <000101cdffe2030100f1000d001c400a01b2080b04d80b190e6db9011e00
182b4e10f44ded003fed3130253332161514062323222635343602552438
50513724385051f14f383a4e4f383a4e>CourierNewPSMT AddT42Char 
1 4022 19 <000200e5ffe203e805050019002f01adb312020a23bafff20003fff4b22d
08294109fff20028fff40027fff70016fff70015fff7b61c0e090e080e02
bafff80010fff2b21d0e2dbafff2002afff2402329051c0e1f0e22126d08
1e1c12002e0127050d22230e213d122c3d051205050d1a3d00b802ccb631
243d0e1930a1ba01060018012c852b4e10f44ded10f6ed003f3f10ed10ed
12393911123911391112393931304379405a022e10261819171916191519
141905061c1b1d1b1e1b1f1b04062726282629262a2604060b0c0a0c090c
080c070c05060326221124400020131a40012b062540002d042f4001230f
2140011b19214001260c2c40002e022c40002b2b2b2b012b2b2b2b2b2a2a
2a2a2b810038383838383838380138383838383838383838383838435c58
4015111e13193f141e11173f111e11173f161e1e123f22b8fffb40401e12
3f27141c113f27141b103f2714190f3f2714170e3f2314170e3f2714160d
3f2314160d3f03141e123f031e120b3f2d0a120b3f161e120b3f1d141921
3f22b8ffec401719213f0f14171f3f2314171f3f020a10113e170a10113e
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b590115100706
232226272626272635351037363332161716161716073426272627262322
0215151416171617163332123503e881659a4a832e1d450f1781659a4b82
2e1e44101654432a192839478da0432b182839488ca002dbd0fef19e7c3b
3521923d5673d001109e7c3b3522923c567f77cd3d231923fee0c0b977ce
3d2219240121c000>CourierNewPSMT AddT42Char 
1 4600 20 <000100e4000003e804f8001b00b1b212081bb8fff8400f11060008091b40
1b5012501b04090fba02a9000c019b4009100c0c0f10be090802ba02a900
05019b40120105050201be081918171615141307121b14ba02d700110267
b7000509080c190214bb02810011001702ce400a00671111016700100110
bd0270001c00a101ce0018012c852b10f65ded3c10fded10f4ed003f3c3f
eded01111217390010fd3d12392f180110f5f4c40010fd3d12392f180110
f5f4c43130005d3838383801112132161514062321222635343633211105
062322263534373637029001201e1a1a1efd6c1e1a1a1e0120feee14090f
190a081904f8fb5c17131218181213170430560619110f0d0809>CourierNewPSMT AddT42Char 
1 4866 21 <000100ab000003d70505002b0120b10602435458b71b0b2b0504140000b8
015bb50a0c143d2205003fed3ffd1112173931301bb90016ffde402c1b24
34480f7a0e862786288629a628a629bb0cb42a090d120a16350c382a0429
232a1e2b14271e28230c140bb8ffec400dea12ed16fa12fd160428080802
ba02a9000501dcb70105050201be0805bd01e40009000b010d0001015bb4
09090a0c1ab801f9b4143d220500bb015b000b0002015bb408e1113d2541
0d026f002d0017015b001e010d000b026d002c019101060018012c852b10
f6f4ed10f6edf4ed10ed003feded3f3c10fde410ed0110fd3d12392f1800
10f5f4c431304379401c1f2412181625202615211840001323114001171f
14400112241440012b2b012b2b2b2b8181005d3838383838383800710171
2b5937213534363332161515213524373e02353426232206070607062322
263534363633321615140606070007fd028518131218fcd40100f271541f
ae7b6eaa1906090c10111769b9619de2265b76fed8ba54211e1a1a1e757c
e6ee6f684f286ca67e5d18070a171030a45eda8a3a617374fedca100>CourierNewPSMT AddT42Char 
1 5284 22 <000100c3ffe20401050500380111b36c380100b8fff24033323235113a24
49244a2543387200067f218638950493359638a535a638b913ba17cb13cb
14cd17db13dd17ec13fa17ff2f1100b8fff2b514221b243411b8ffde401c
1b243429080f0b2b2811032f211e1a180005231c00191e2028262c19b801
5bb32020122cb8018db3263d330eb8018db5123d06233d36b8010d400a15
3d031c1c39031a3a2fba010d001c0281b70b19393305060decba01800018
012c852b003f3f014e10f44de4e44e10e612392f4d10edf4ed0010fde410
fde412392fed111239123911390111121739121739113931304379401c34
352425131404052534234001130515400124352640011404124000002b2b
012b2b81818181012b2b385d713800387101161615140623222627263534
363332171633323635342626232226353436331732363534262322060706
06232226353437363332161514060313747af5b86ce82e0f171010149bad
92c561b65d1e1a19194871939a7c57922c10110b111857799a9fcc6202ab
34b56297e75c30101210180f73b7704b905317131218018a5b5e903c3414
091710283d55bf845496>CourierNewPSMT AddT42Char 
1 5714 23 <000200d6000003d704e7001d002100d1400d00030020021e21051d1f1c16
19b801e6b61d1dbe160f1512b8016040120e0ebe15202121670203140202
0302211f20b8015bb703030405211e0d1eb8015bb2000e00b802f2b21d1d
1cbb015b0016000f015bb2161503b80283400f01050e671d1d1f000f1e01
001e011eba026e0021015b400b0001010119220404150ca1ba01d2001801
24852b003f3f014e10f4714dfdf65d713c3c3c10fd3c10e400103ced10fd
3c10ee3c10ed3c103c3c103c10fd3c113905872e2b7d10c4180010ed0110
f5d43c0010ed0110f5d43c0f313071012135013311333216151406232311
333216151406232122263534363333111123010303fdd301d3af461f1a1a
1f46461f1a1a1ffec81f1a1a1f9d2cfe57015f610327fccc17131218fef5
1713121818121317015f02dffd21>CourierNewPSMT AddT42Char 
1 6946 26 <000100d3fffe03d604e700150080b10903ba02a900060160402a02060603
02be090c0d0d67150014151500150900010c170b150c0003100102670b0a
110f100a04100c0bba015b000102a8b417091916ecba01060018012c852b
4e10e44d10f4ed003f3f103c3c103cfd3c1117390111123912391139870e
2e2b0e7d10c4180110fd3d12392f180010f5f4c431300135211514062322
26353521150106062322263534370381fda6171312180303feae08160e12
1806046c264a1e1a1a1e9f86fbc81a1118100a12>CourierNewPSMT AddT42Char 
1 8170 29 <000201cdffe203010362000d001b003140090fb2160b08b2000612bb0116
001900040116b50b0b19191c6db9011e00182b4e10f43c4d10ed10ed003f
ed3fed313001333216151406232322263534361333321615140623232226
353436025524385051372438505137243850513724385051036250373b4e
50373b4efd8f4f383a4e4f383a4e>CourierNewPSMT AddT42Char 
1 8674 32 <00020065018a0469030c000d001b0037b2072401b802f8401b15240f0b19
1a1d044f12014f12010f122f123f120312191c4f7b182b4e10f45d5d713c
10f63c002f4dfdf6ed313001212226353436332132161514060321222635
3436332132161514060431fc6c1e1a1a1e03941e1a1a1efc6c1e1a1a1e03
941e1a1a02b71813121818131218fed31713131717131317>CourierNewPSMT AddT42Char 
1 8818 33 <00010000004103d7044d001100864022bf06d10cf20c030a090924001114
00090800110809092400011400090a00010a5b11b801aab300085b01410b
01aa000c0296000a01bc001102ab000801bc000102ab400c00b92f060106
191200507b18b80121852b00192f01184e10f45d4dfde4ede4eded0019f4
18ed1910f418ed87082e2b0e7d10c487082e182b0e7d10c43130015d0101
0623222635343701012635343633321703d7fc74160b111922030afcf722
19110b160247fe060c1911191301b001b0131911190c>CourierNewPSMT AddT42Char 
1 11378 39 <0002009e000004760492001d002c010c40218e0a890b8812891389148c15
8f1f8f208a218d278a298f2a0c0b28012720291c21b8ffe040099927b521
024308171db802a4400b1a29001a1a1d001d170802b802a4403505290105
0502011d08112e0f1f1e16161d1e17082b1e0909021e080224260f0f010f
0f200f020f1a2e2c1e1e0120004f000200192dbb013901080018012c852b
4e10f45d3c4dfd3c4e10f65d714ded003fed3c10ed3fed3c10ed01111239
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c431304379
4034202a0a150e0f0d0f0c0f0b0f04062625272528252925040613121412
020621252a0a242e012015232e01250f2b2e0122121f2e00002b2b012b2b
2b2a2a2a8181005d38383801715d25112322263534363321321617161716
151514060706232122263534363333213236363535342726272626232101
1d471e1a1a1e01c46aaf2e4f291d72856382fe3c1e1a1a1e9b01316ab95d
192442248c51fecf5403ea1713131758385f6a4d697481f25a4218121317
8ac15e984e3d59502c49>CourierNewPSMT AddT42Char 
1 13682 44 <000100e5000003e90492001f00d7402d2f042e05230c200d201420152f1c
2f1e3e05330c301430153f1c3f1e4e05430c401440154b1c4f1d4f1e1509
0fb802a4400b0c36100c0c0f101d09191fb802a4400b1c36001c1c1f001d
190802b802a4400b053601050502011d081812b802a44027153611151512
111d181f261912261918020226080f260909080800011e114f1001101920
8cdf182b4e10f45d3c4dfd3c003f3c10ed10ed3f3ced10ed10fd3d12392f
180110f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f5
f4c40010fd3d12392f180110f5f4c43130015d0111213216151406232122
263534363321112122263534363321321615140623029101201e1a1a1efd
6c1e1a1a1e0120fee01e1a1a1e02941e1a1a1e043efc1617131218181213
1703ea171313171713131700>CourierNewPSMT AddT42Char 
2 0 49 <0001002e000004810492002c016f4016080201091c191c02c702010b0106
1b1b01161b040b11b802a4400b0e29120e0e11121d0b252bb802a4400e00
280128292c28282b2c1d250a04b802a4400b073303070704031d0a1a14b8
02a4400b172b13171714131d1a241eb802a4402221331d21211e1d1d241b
020112011e1c1b141c1c1b011b00132b2625251e26242402b8027ab61b14
261b1a021cb8027a400a010b0a0a01081d1c1e01b8012c401b00002c4025
350f2c4f2c5f2c6f2c8f2cdf2c062c1a2e02031e121bb8027a4013125f13
6f138f13f013040f130113192d3a6b18b8012c852b4e10f4715d3c4ded10
fd3c4e10f65d2b3c4d10e6fd3c003f3c103c10ed3f3ced10ed3c10ed3c10
ed0111123939872e2b435c58400f010814283f0114111c3f0114101b3f01
2b2b2b59877dc4180010fd3d12392f180110f5f4c40010fd3d12392f1801
10f5f4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f55df4
c40010fd3d12392f180110f5f4c431305d71005d71212301113332161514
062321222635343633331123222635343633330111232226353436332132
16151406232304026cfd959b1f1a1a1ffecb1f1a1a1f46711e1a1a1edc02
6c9b1e1a191f01361e1a1a1e470417fc3d171312181812131703ea171313
17fbe703c5171313171713131700>CourierNewPSMT AddT42Char 
2 7390 66 <0001004dfdcf051afe23000d000db4075b010b042f2f002fed3130012122
263534363321321615140604e2fba31e1a1a1e045d1f1919fdcf17131317
17131317>CourierNewPSMT AddT42Char 
2 7546 68 <00020090ffdf045603800028003601624051aa07a41faa2e032607251f3b
047413771a761b8014851a9214951aab07a014a41aae2fb507bc0eb114b4
1ab91ecb0ef431150a0119012a01039a11941a027b2e8a2e9b2eaa0eab2e
c531d531e531082822b802ae401a252f21252522212228121d1317293621
0036290103330c092c36b801e0405a018828000a3321030b0921002c102c
702c032c293b0c0c28149c10211d073321030b0d00202021400d163f0f21
012f213f214f215f219f21af21bf21df2108211a38178f302106400d163f
6f069f06bf06df06040619372abb18b8012c852b4e10f45d012b4dfde64e
10f65d71012b3c4dfd3c003fed3feded12392fed2f5ded3fed3f3cf4ed11
12391217390111123939123911390010fd3d12392f180110f5f4c4313000
4bb019534bb024515a58bf0007fff80034fff00035fff00019fff4b31208
2e0838383838383859005d71004bb00b534bb014515a58bb001efff00013
ffc038385900715d015d2135062322263534363332161735342623220706
232226353437363736333216151133321615140623032626232207061514
16333236370358b7d097aae0d73a884f808062b1200910170a0e639c509f
b2701f1a1a1fc53b8449b7674e77726dbb63799a996f7ab60f1088456639
0a1812110a0f1a2a9d63fdd41713121801a211104f3b524c68575f00>CourierNewPSMT AddT42Char 
2 8834 71 <0002007effdf04ab04e7001e002a00e1b6492a682a020802b802ae400e00
0501052f010505020122081e18b802ae40101b2f171b1b1817221e0a1622
28095d0ab80163b328210c16b8016340202221141e000c0b140700000001
171f09208001010f0101011a2c252180100110b8018cb32b2a8018b8012c
852b10f671ed4e10f65d714dfd3c3c103c003f3f3f103c10ede410ede4f4
1112393910fd3d12392f180110f5f4c40010fd3d12392f180110f55df4c4
31304bb016534bb024515a58b30e081208383859004bb00c534bb024515a
58b9002affecb2201427bafff80026ffe7b3230824193838383838385900
5d0111333216151406232335062322262635343636333217112322263534
36331334262322061514163332360402701f1a1a1fc592e172d17979d173
dc96701f1a1a1f70d89596d8d89695d804e7fb6d17131218a7c879e07778
df7ac801da18131218fcc8a0dcdca09fdddd>CourierNewPSMT AddT42Char 
2 9182 72 <00020080ffdf042f03800019002000d040690a1699150232024202520263
02c602c613ca19da12da19dc1be318e51ffa160d191c2a1c3402381e4a1b
4c1f5c1b5a1f6f1b6c1f7e1b8c1b991c991eb7050f7516ba1cc403c412c9
1cc91e0608c5111a2020000101111d2117070421110b0c541a3ba0000170
000100b801e5401722203b013ba014016f14bf14cf14df14041419212aac
18b8012c852b4e10f45d714deded10f65d71ede4003fed3fed12392f3cfd
3c10ed3130004bb00c534bb024515a58b2161406b8fff0b41b141f1e02b8
ffec383838383859005d71015d7101211616333236373633321615140706
0623220035340033320007262623220607042dfca816e5a95ece41130e10
181030f581d8fedf010fc8ce010a5719d59393d41a019da3c73e330f1911
11103257011bc9b70106fef3818baeac8d00>CourierNewPSMT AddT42Char 
2 9848 74 <0002007dfe7e047e038000270033011e40314514701402dc21d325ec21e4
25fb21f424066b296d2d632f63337a0d7c2971338c2980339d299133ab29
a033ba1e0e0208b802ae4062000501052f09050508092202001e2b311820
1017201111100e1e933121200a2b2100932607083b0206010601281d2001
200a0a1009a009b009030f094f095f09af09cf0905091a352e2180239023
a023b02304bf23cf23e023f023042319342a6118b8012c852b4e10f45d71
4ded4e10f65d713c4d10edfd3c3c003f3fed3fe4ed3fede43f3c10ed10ed
1112393910fd3d12392f180110f55df4c43130004bb00c534bb024515a58
bb001bfff4001afff4b22a0832b8fff8b21e0800b8fff4b22c0830b8fff4
b2290c33b8fff8b22d162fb8ffea3838383838383838383838385900715d
015d013533321615140623231114070e0223232226353436331732363736
35350623220235341233321334262322061514163332360381c51e1a1a1e
712418705c4dee1e1a1a1ef14a77271687d5adfbfbadd587cb8d8dcaca8d
8dcb02c89a18131218fcb954422c5e2817131318014c492a41fcb90101b5
b50100fe4b94cccd9394cdcd>CourierNewPSMT AddT42Char 
2 10806 76 <000200bd0000041605110003001c007f402a221932194019521963197419
841907130d10581414220d060c09580505220c161c19951515221c03c502
b80194b61c060d0c0a0001bb015f0003000201e0400e04040520154f1401
14191d517f182b4e10f45d3c4dfd3c10fd3cfd3c003f3c3ff6ed10ed0110
f5d43c0010ed0110f5d43c0010ed0110f5d43c3130015d01152335131121
3216151406232122263534363321112322263534363302907c7f014a1f1a
1a1ffd181e1a1a1e014af51e1b1a1f0511d9d9fe51fcf217131218181213
1702b91812131800>CourierNewPSMT AddT42Char 
2 12128 79 <000100bb0000041404e70018005d4034621573158315030f090c58101022
09020805580101220812181595111122180009080a0001201110104f10bf
1003101919517f182b4e10f45d3c4dfd3c003f3c3fed0110f5d43c0010ed
0110f5d43c0010ed0110f5d43c3130015d01112132161514062321222635
3436332111232226353436330291014a1f1a1a1ffd181e1a1a1e014af21e
1b1a1f04e7fb6d1713121818121317043e1813121800>CourierNewPSMT AddT42Char 
2 12300 80 <00010015000004bf03800046022a403c0f370f380e390f3a0f3c0f3d0f40
0f430f450912260c360cb41bb22c042701360102551c6207621c7407741c
053607321c4507451c5507053008373db802ae400edf3a013a463e3a3a3d
3e2237150fb802ae401e2012015012d012e012f012040012101240120312
460e12120f0e2215251fb802ae4010002210220222461e22221f1e222536
30b802ae4010003310330233462f3333302f22364640b802ae4065df4301
43463f4343403f222d2f061e262e2d281d1c0601072a37403b0046062a21
031a21090903073736362525150a0d0e201716401f35301680160216fc26
1d1e202726401f35302680260226fc3e002f203f3e400d163f003ebf3ecf
3e033e19472aad182b4e10f45d012b3c4dfd3c10f45d2b3cfd3c10f45d2b
3cfd3c003f3c103c103c3f3c10ed10ed3f3ced1112173901111239123900
fd3d12392f180110f55df4c40010fd3d12392f180110f55df4c40010fd3d
12392f180110f55df4c40010fd3d12392f180110f55d5d71f4c40010fd3d
12392f180110f55df4c4b10602435458b90006ffc0b316243401b8ffc0b3
1b243401b8ffe0b2111a34002b2b2b59313043794020282918190a0c0405
0b252904271f010506190a171f0128052a1f01180c1a1f01002b2b012b10
3c2b2b81818181005d5d004bb01b534bb024515a58410a000affee0004ff
ee0007ffda0006ffda0001ffd338383838385900710171435c58b90007ff
c0b3161a3e06b8ffc0b3161a3e01b8ffc0b2161a3e002b2b2b59015d1315
363332161736363332171615113332161514062323113426232206071133
321615140623231134262322070607113332161514062323222635343633
331123222635343633e86b6c41622138733a5b3647471e1a1a1e9b4e332e
6641461e1a1a1e9b4f312d2c3d43471e1a1a1ee21e1a1a1e47471e1a1a1e
03625573454646453b4c5afdb517131218029740544565fdd31713121802
9143571d2964fdd3171312181812131702b918131218>CourierNewPSMT AddT42Char 
2 13042 81 <0001006c000004570380003801874037d506d50802c406c40802a308b206
b20803710780070263076408641b039b1ba506027b1fb301b402031c1f6a
1f0200010402021e081218b802ae40100f151f1502154619151518192212
292fb802ae400b2c5c302c2c2f302229110bb802ae400e000e010e460a0e
0e0b0a22112822b802ae40100025102502255c212525222122283832b802
ae400d3546313535323122323b380601ba01e00020016340131d21040729
28281212110a090a201adf190119b802a340103a002120319030a0300230
19394761182b4e10f45d3c4dfd3c10f45d3cfd3c003f3c103c103c3ffdf4
ed3fedfd3d12392f180110f5f4c40010fd3d12392f180110f55df4c40010
fd3d12392f180110f55df4c40010fd3d12392f180110f5f4c40010fd3d12
392f180110f55df4c4b10602435458b90001ffc0b31b243401b8ffe0b211
1a34002b2b593130437940141b1c05080708060802061c051a1f011b081d
1f01002b012b2a8181004bb01b534bb024515a58b21f1401b8ffdeb11b14
38383859007171715d0171715d5d5d011536363332171616151133321615
140623232226353436333311342623220607113332161514062321222635
3436333311232226353436330157588e59604f385b471e1a1a1ee11f1a1a
1f46826d537a715f1e1a1a1efeee1e1a1a1e5f471e1a1a1e03627f594429
1e8b49fdef17131218181213170203597b4385fdf1171312181812131702
b91813121800>CourierNewPSMT AddT42Char 
2 13588 82 <00020091ffdf043c0380000b0017014840381216041614171603c901c90b
d502db05dd07d50b066b07691102650265046908690a6a0d6c1165136617
081521030f2109030b09070c2100b8ffc0b30f193f00b8ffc0b30e173f00
b8ffc0400d1535b000011000300060000300b802874018122106400f193f
06400e173f6f06bf06cf06e006f0060506b801e2b3182aad18b8012c852b
10f65d012b2bedfd5d712b012b2bed003f3f10ed10ed3130004bb00b534b
b024515a58bb0016fff40014fff4b410140e1417baffe20013ffe2b30d1e
111e383838383838383859005d01715d0071435c58400b1614101b3f1414
101b3f11b8fff640130f1e3f0b140f1e3f080a0f1e3f070a0f1e3f11b8ff
ec401d120b3f07140b123f0b140b123f161411173e141411173e13140f14
3f11b8ffc440120f143f0a0a0c103f080a0c103f02030f1f3c012b002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b5901140023220035340033320007342623
2206151416333236043cfeedc2c4feee0112c4c2011355e1a0a0e1e1a0a0
e101afc0fef00111bfc00111fef0c19ededf9d9ce0df>CourierNewPSMT AddT42Char 
3 0 85 <000100ab0000045a0377002b011540147c0e012c094f0a6a127912891296
069d13071c22b802ae400b1fc8231f1f2223221c1b15ba02ae0018014040
091418181514221b2b25b802ae404f284e2428282524222b0b0e140c0b0a
090805070d011300140e100a24253b002b060a3f10210407153b1b223b1c
1c1b0a0f07f00702071a2d001420240f23502380239023a023f023062319
2cfd8e182b4e10f45d3c4dfd3c4e10e65d003f3c4d10ed10ed3feded3f3c
fd3c1112391112393911121739011139390010fd3d12392f180110f5f4c4
0010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4b1060243
5458b90001ffc0b31b243401b8ffe0b2111a34002b2b593130004bb01153
4bb024515a58b513140e16121c3838385900710171011536363332161514
062322262726262322060711213216151406232122263534363333112322
26353436330202a4a3454b8119130a0e13233419379bbf01741f1a1a1ffd
6d1e1a191fcb9b1e1a191f0362d49455651a13190713231a58abfe341713
12181712111702bc18131218>CourierNewPSMT AddT42Char 
3 402 86 <000100cfffdf03fe0380004401f14088143f1c4102124c0059006944ac20
ac37a138cc13c942de13d616d63edb42eb13e434e842fc13f434f842120b
130616053e09421f131516153e1b428b229534bb0f0b57135a3869386a3b
7a387e3b8938893ba514b2140a8e3bb51f0251082b29232631403d3c341a
180f0e07150c390034323023042e360f0e0c030a000311193b3d3d211121
430ab80135b403202e012eb80196401c26362121003b075539214f1e5f1e
6f1e031e1a463154233b29152140b8ffc040160f193f40596f2901291945
43070306260a210b5e8018b8012c852b003f3f3f3f014e10f45d4df4012b
ed10fde44e10f65d4dfdfded0010ed10ed5d10ed10fd11392fed11123912
17391112173901111239121739111239391239313043794038374212201c
251325173e151f003b1b391f013720391f011242151f00163f181f001718
3e3d3a1d3c1f011b1a3b3c381f361f001441111f01002b2b103c103c2b10
3c103c2b012b2b2b2b2b2b8181004bb011534bb024515a58b43b14340a1c
bcffe70017ffec0044ffecb23e1437b8ffecb322163c1c38383838383838
383859015d7100715d435c58b90038ffec40090d163f3b140d163f38b8ff
ec401810153f3b1410153f44140f143f44140c103f44140b0f3f1cb8ffec
b30f193f38b8ffecb70f193f00140f193f002b2b2b2b2b2b2b2b2b2b5900
5d0134363332161515140623222627262726232207061514171617161716
161514062322271406062322263535343633321615141716163332363534
27262426263534363332037c181213181813111702063852878d4e3b4630
86af44615fcec7c77f08150d1218171312191723996fa4a05152fec7884c
d493ae032b1d1a1a1f901e1a16193c2738392b353c281c0f1318237c486b
a76522140e1a1ead1e1a19152e1f303f7a444e2f2f2034683c6c7f00>CourierNewPSMT AddT42Char 
3 1090 87 <00010092ffdf043b0492002c00c94024fb1b010d1b1a1b02a40ab50ac20a
d30ae40a05760e860e950ea60ec60bd60b0617080107ba02ae0004017240
150804040708220110140915110f1011121405190c29b801a340111e3b24
24073b010100060c21190b148804b801a940142c2c0809202621c6001c10
1c201c701cbf1c051cb802e5b32d2aad182b10f65de43cfd3c3c10f4e400
3fed3f3c10ed3c10fded111217391239011112390010fd3d12392f180110
f5f4c431304379400e1a1b0a0b0b1a091f000a1b0c1f00002b012b818100
715d01715d01213216151406232111141633323637363332161514070606
232226351123222635343633333534363332161501ba01c81e1a1a1efe38
757155c637140d10180d20f77193ae9b1e1a1a1e9b181213180362181312
18fdd1496233200d19110f0d214d8a75022f18131218f81e1a1a1e00>CourierNewPSMT AddT42Char 
3 1418 88 <0001005bffdf0459036200270115400c0a04b516022816011a080f09b802
ae400b0c2f080c0c0908220f1e18b802ae400b1b4e171b1b1817221e2721
b802ae402d00240124462024242120222701160f1420213b00270a17183b
1f1e1e0f08093b100f061421030b202000001716b802a340092910112008
cf070107b801ebb328476118b8012c852b10f65d3cfd3c10f43c3c10ed00
3fed3f3cfd3c103c103cfd3c3f3cfd3c1112393910fd3d12392f180110f5
5df4c40010fd3d12392f180110f5f4c40010fd3d12392f180110f5f4c4b1
0602435458400a01401b24340120111a34002b2b59313043794010121304
0605251304111f001206141f00002b012b2b8181004bb013534bb024515a
58bd0015ffec0016ffe20012ffe238383859005d71213506232227263511
232226353436333311141633323711232226353436333311333216151406
230386acc87b4053711e1a1a1ec5684ecdab9b1e1a1a1eef471e1a1a1e7b
9c435875021e18131218fd8d526abc021e18131218fcf21713121800>CourierNewPSMT AddT42Char 
1 0 0 <00020100000005000500000300070046b10607b8010cb40201000504b801
0cb403000a0605b8010cb60303021a090704b8010cb6010019084f7b182b
4e10f43c4dfd3c4e10f63c4d10fd3c003f3cfd3c3f3cfd3c313021112111
2521112101000400fc2003c0fc400500fb002004c000>CourierNewPSMT AddT42Char 
CourierNewPSMT /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/comma 15 def
/hyphen 16 def
/period 17 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/seven 26 def
/colon 29 def
/equal 32 def
/greater 33 def
/D 39 def
/I 44 def
/N 49 def
/underscore 66 def
/a 68 def
/d 71 def
/e 72 def
/g 74 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
end
CourierNewPSMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 55 /seven put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 68 /D put
dup 73 /I put
dup 78 /N put
dup 95 /underscore put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
end
%ADOEndSubsetFont
reset_gvm
/MFPVYA+CourierNewPSMT /CourierNewPSMT findfont ct_VMDictPut
/MFPVYA+CourierNewPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three /four 2{/.notdef}rp 
/seven 2{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 5{/.notdef}rp /D 
4{/.notdef}rp /I 4{/.notdef}rp /N 16{/.notdef}rp /underscore /.notdef /a 
2{/.notdef}rp /d /e /.notdef /g /.notdef /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /s /t 
/u 138{/.notdef}rp]
MFPVYA+CourierNewPSMT nf
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 -128.007 mo
(serious_atl_0\(ID\) :- serious_2\(ID\). )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 0 
]xsh
90 -118.95 mo
(serious_atl_1\(ID\) :- serious_2\(ID\). )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 0 
]xsh
90 -109.892 mo
(serious_atl_2\(ID\) :- serious_2\(ID\). )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 0 
]xsh
90 -91.7778 mo
(serious_2\(ID\) :- serious_atl_2\(ID\), )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 0 
]xsh
170.997 -82.7205 mo
(not\(serious_atl_3\(ID\)\).)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79922 4.79919 0 ]xsh
90 -64.6058 mo
(damage_atl\(ID,N\) :- )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: CourierNewPS-ItalicMT Initial
ct_T42Dict begin
-0.066 -0.273 0.797 1
 256 array 0 1 255 {1 index exch /.notdef put} for  /CourierNewPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f329cba917b000000cc000000566376
742085017deb00000124000006ce6670676de6782f44000007f40000083b
676c7966636dd155000046e000031e2068656164c61771ef000010300000
0036686865610c9000f00000106800000024686d7478981982830000108c
000007646c6f6361066638de000017f000000ec06d617870072909e50000
26b0000000206e616d65c9b84ab7000026d00000199770726570fd1e6fbe
000040680000067567646972000000000000000000000000000104cd0190
00050000059a0533001e011d059a05330050036100660212050502070409
02020509040400000a870000000000000000000000004d6f6e6f00010020
fffc04e7fe7e000006a90267400001bfdff70000000004e700000492001b
04e7001e0362001e0000ffdf0000ffdf0000ffe2fe7e000004e70000fefd
ffff02d70000005200000052000000000000000000520052005400c00054
00540052005400af015700d70054006b00a000540003008f01d2003c0024
005400d2009300d70065003d0101015c025400e3002e00020024000f0107
0005002700bc000ffff100a50134005b00d10128003900a50134fffe0025
0052005300a100cb0077017a04ebffd400b2014003be0421000b003e00d3
020a000f002c0011002d008f010f014a021f04a3003c005400600078017d
035f03a4ff93fffc0006003d082c00b700cd0109000201d304c900100059
007b010d014a021d007200ad00ca00ce00ed012201590187000f001f009f
00df010d0123018702bffe83ffab00200033004a009800b3013403ed0460
0500ffc90020002c00310070007b00800084008e009b00c5010d017dff1f
fff90007001a00240052008900b400cd00d6013301380139017902410271
02e3037703cd03e7ff4f0019001f00250045005200540076008300ca00ea
00fc00fd010b01120129012a01aa02300253028a035a03ad042104490453
046604eb050ffde3febdff8cffabffdb00410045007f0088009600ab00b8
01050119013b018601fd0271034203be040c043f04830005000f005d0066
00780083009300a300c200cd00d100fd0131015b01d201d201dc02d8035f
0404043e04c6ff47ff67ffda0008001f002b002d00320035003a004c0052
0068006a007a009700a800ba00dc00df00e300e3012601400145014a015a
0172017301ae020102050246025a029a02b102bf048204ab04c7fef8ff18
ff38ffe4002d003a00410042005200600069007300730089009c00b300bb
00c800cd00e20101011801220154015f016001a401a501a701d903530390
03f50400fd90fe3efe8ffee9ffcf000100010002003000380041004f0058
005a00610076007a007d008b00a500ae00d000d100e100ea00f600fe011f
015e0175019801d701e001f7022b025f025f0287028a02b402bd02c702eb
03760397039d03b603e70404041ffed7ff64ff76ffad0014001e00260042
004c0062006500690077007a007d0083008d0091009a009b00cb00d000d1
00de00e800ef00f400fc00fd0104010601090118014301500159015d015e
015f0167016e0185018c01af01be01c101ef01f90204020602100214021b
025502670269026a02b402d202db02f9032a033b033d039003a003c603d2
03da0425043a04420460047a049804ae04dc050005060532057e061608cc
fdb9fe4dfe5ffe9dfed7ff25ff790012001d0020002b002c002e0030003a
0056005900680073008d009b00ab00bc00de00e000e100e700ee00f300fd
01070114012b013101320134014001430168017e0180018301870187018e
018f019c01a701ad01b101bc01c501cd01d001da01dc01dc01fb0204021d
02220223022602340238023e02420247024702490257025802650278027e
0282028a02960296029e02a102a302a502b502bc02ce02d102e802e802fc
0303030603060307030803150325032f03310332033303410347034a0358
03580366037a037e038f039203b903f7045604640465049304a004ab04b3
04e3059605c405ea06100671005200520052005700000000000000000000
000001580033022c00dc0076022a019201af0122012f000f0a3900cb012c
00dd0054027f018b024501ea03c301bc0249020601e40211004202af01ae
016a013d01b104060514041000000000055b03380233000002c701cf0042
015d019103d502df01e800970097022d0028030800420047004301180020
03b9014d00ef002300a500000221004200ab01bf007600e60048011a00ab
034d006300cf034000dd00b5017b0073025e00a20f010aeb005f01d30183
0359019801f3008201780224011d019c01c2035f02c60141022501a00218
022d0150003801f502f2016d0286029e0281016e03c4ff1d02d601720192
031f054eff82fff1000f04eb04eb082c034c03440250fdd700540152fe7b
00faff02028101bf0147004f003d00cc03de0150036b024201ed000304c7
03a4fc98fdc10539039202e40199003904e7fbddfbc30322ff6bfd080043
0022001efe02014dff7a037405fe03340036046300e3017d00fd003100c8
007600f6002c007f009600fd0010012b013200ea01af00ca0168007a0011
0005002500b7001f013800d1002001d2025800bc000800f4004c005d0040
01a7029f000a01d4014b01a7010c043e00a100b5fcaf00800334016b0130
ffa1049203a0028bfe6a00ac0059ff02027102c100eefe94028b02d7fb33
ff09036000ad011f00480129015402f90080ff84007fff86023e02f70038
008f0000ff9800410514008e008e064203a20535004106430000404d5958
57565554535251504f4e48473f3e3d3c3b3a3938373534333231302f2e2d
2c2b2a292827262524232221201f1e1d1c1b1a191817161514131211100f
0e0d0c0b0a090807060504030201002c4523466020b02660b00426234848
2d2c452346236120b02661b004262348482d2c45234660b0206120b04660
b004262348482d2c4523462361b0206020b02661b02061b004262348482d
2c45234660b0406120b06660b004262348482d2c4523462361b0406020b0
2661b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320
b8015a51582320b08d44235920b0ed51582320b04d44235920b004265158
2320b00d44235921212d2c20204518684420b001602045b04676688a4560
442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b1
01173e01b0172370b10217453ab10200080d2d2c45b01a234445b0192344
2d2c2045b00325456164b050515845441b2121592d2cb00143632362b000
2342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b0
4061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c
45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb012435887
45b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0a051
58b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb002254660
8a46b040618c482d2c01182f2d2c20b0032545b019234445b01a23444565
234520b00325606a20b009234223688a6a606120b01a8ab000527921b21a
1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b319
40201945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e
0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f43
2343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b0
03252349b04060b0206320b000525823b002253823b002256538008a6338
1b212121212159012d2c4bb06451584569b00943608a103a1b212121592d
2c01b005251023208af500b0016023edec2d2c01b005251023208af500b0
016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c
20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c
3eb02a2a2d2c352d2c76b8029d23701020b8029d4520b0005058b0016159
3a2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb820
00621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb2
00802f2b59b002602d2c0c6423648bb84000626023212d2cb40001000000
15b00826b00826b00826b008260f10161345683ab001162d2cb400010000
0015b00826b00826b00826b008260f1016134568653ab001162d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b02
592d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012
435c580cb00425b00425060c6423646164b807085158b00425b004250120
46b01060482046b0106048590a21211b2121592d2cb012435c580cb00425
b00425060c6423646164b807085158b00425b00425012046b8fff0604820
46b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b212159
2d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58
381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b
2121592d2cb0042523b00825b00325b0062518000810fdb0052520b00625
003c393d2f18b0052520b005250110d52fb0042523b00525b005255558f4
1b21105921212121b0102bd4212d2cb0042523b00825b00325b006251800
0810fdb0052520b00625003c393d2f18b0052520b005250110d52fb00625
23b00525b005255558f41b2110592121b0102bd42121212d2cb00b25b003
25b00b25b00525b00e25b00f25b00e25b00d25b00925b00f25b00f25b017
25b019251800103c08fc003c393d2f18e0f02d2cb00225b001b00425b004
255058601b615920b00325b00325b005255558b0062b1b2121592121212d
2cb00c25b00925b00e25b00b25b01025b01025b00f25b00f25b0544b5258
b04f2bb04f2b52582359811b212121212121212159212121212121212121
21212121212d2cb003260110493b2d2c23b003260010493b2d2c20262320
26232d2c234b5458202060b00160258a381b232159b8ffff602d2cb00160
252320b002602520582020608a60b0026023b0532ab8ffff6026201b23b0
026026592060b003602d2cb04e2b01b00625b0072546b00c25b00d25b008
25b00c25b01325b00e25b00f25b00f25b01025182f5558d41b2159b0102b
3c0110f02f48b20f0a552b21205820b0542a592121b00b25b00a25b00c25
b00f25b00c25b00825f0b0102b3c01103c3cb0502b2d2cb04e2b01b00625
b0072546b00c25b00d25b00825b01225b00d25b01425b01525b01025b011
25b01125b01225182f5558d41b21593c10b0102b3c0110f02f48b20f0a55
2b2120580120b0542a592121b00b25b00a25b00c25b00b25b01025b00825
f0b0102b3c01103c3cb0502b2d2c462346608a8a462320468a608a61b8ff
8062232010238ab9035c035c8a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2cb1020042b123018851b1400188535a58b91000
0020885458b202010243604259b12401885158b920000040885458b20202
0243604259b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b20210024360425959
59592d00000100000002e666c0fd5a7e5f0f3cf50809080000000000a350
96aa00000000b5c9aa10ff76fdcf06670801000200090001000100000000
0001000006a9fd99000004cdff76fe660667002100070000000000000000
00000000000304cd00670000000004cd0000000001f901ef011701090160
013802c202b100fd01ae010b016f012801e000cb014000ec00ab00e10121
00e7017e01b90126011f01e0017b00de00c000aa01dc011d0044005f00ea
009a006000ba00dd007300ed00cc008b00880020006100d300d900d30061
00c20131011900ff00f80058013300d502060200010d0189ff76024100bc
003500fa00cf00d600df00d5007000c5006a008b00c4001d007400e3ffe3
00d800b300d80144010900e900e7006d001e00ed01fd023c0165012d0019
001900e00060006100d3011900bc00bc00bc00bc00bc00bc00fa00d600d6
00d600d600c200c200c200c2007400e300e300e300e300e3010901090109
010901aa0242016500b300cd01f10140006100000000ffbf0315022800c0
001b004600e5009300ac0072014900ba00b000c100b800afffdc013e015b
003d0049006600d601d100930089009700fd005200bf00b8007200190019
00d3007c0061010d006e01be0182030701bb010b009b001e013300ac0023
0188019c00350035013b025100f100b3011b0019006000190060006000ed
00ed00ed00ed00d300d300d301190119011900c2021402020220023702e8
02960182020f0227023d008600c400c200d800d500ed023c005e00d30133
001e00bbffe3010b01a9017b015201730078006e004700ba00dd00d500ed
00c200d800ea00fa00ea00fa00cf00f8033d004400bc004400bc009a00cf
005e006000d6006000d6008800c4008800c4008800c40061007400610074
00d300e3006100b3006100b300c200d80131014401310144011901090119
010900d500ed00d500ed006000d300d300bf0107013600cd019700d3ff76
0113018d00160002017d0002017d0002017d017d000200ab00a0009900a7
01b000a8fff1021d021dfff1021dfff1021dfff1fff1fff1fff1fff1017d
021d017d017dfff1fff1fff1021d017d017dfff1fff1fff1021d017d017d
fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1
fff10267005afff1fff100020002000f0002000f000200ae007c00260003
00030002014100b800800002006c009f010f005a00080010006a02c201ef
0160017b000201f001f000ae01f1004400bc00ea00fa00ea00fa006000d6
006000d6006000d600dd00d500dd00d500dd00d5007300700073007000ed
00c500ed00c500ed00c500ed00c500cc006a008b008b00be008800c40061
00740082009000d300e300d300e3006100b300c200d8013100ef01190109
01190109011901090119010900f800e70133001e00df001900bc001b0049
00460066026b00f800e700f800e700f800e70133001e030701ec00b3005a
007d0077007b00820198019b02c101df0044006f005c00a30091006f005b
01d10044005f006e006000d5007300ed008b003900200061009d00d30073
00d900c40131013300580110004500ed013300bf01360089021e010000c2
00f601870089011f021e00c1005700b100f3016f00e300790115010000c1
00fe00bd01fd010000e3010000bd006000c1006000e200c200ed00ed00cc
0028000c00c1008d00ac00770044005f005f006000010060000200890041
0041008d00210020007300d3007300d900ea013100ac00d60058004f0109
000a000a00bfffff005f00a00015004e00bc00d3005f0060002400d6001c
00aa00510051008a001f0020007300e30073ffe300fa00f2008000bf006d
007300eb000a000a008f001f005f009f0023004a00d60070006000fa00d8
00c500c2006a003a001c0070008a007f00730060006000a800400082006e
00c401bf01160119011901f00183018301680168031f0117029001cd0173
02940242049501b801e400d000a6011a016100cf023d020f0150012e0239
015b00bc017e010c012a02340124011500cf016701020182016600a60172
00fe00a80140014b014b0235016d005901e90153014300cb00e000cf00fe
00fe00fe00fe00d000d000d0009e0113016100cf01d101a4012e02130153
00bc017e012a011c011501670102016600a6017200fe00a80236009e00bc
010200d00243018c016001240101000000ed00c200ed00c500d300e300d3
00e300d300e300d300e300d300e300d300e300d300e300d300e300d300e3
00d300e300d300e300d300e30119010901190109011901090119ff85ff85
ff85ffb7ff85011901090133ff85ff85ff85ff85ff85ff85ff85ff85ff85
ff850256025202880270004400bc004400bc004400bc004400bc004400bc
004400bc004400bc004400bc004400bc004400bc004400bc004400bc0060
00d6006000d6006000d6006000d6006000d6006000d6006000d6006000d6
00ed00c200ed00c500d300e300d300e300d300e300d300e300d300e300d3
00e300d300e300ed00c200ed00c200ed00c200ed00c200ed00c201190109
0119010900ed00c500ed00c500ed00c500ed00c500ed00c50133001e0133
001e0133001e004400bc00ed00c200d300e3011901090119010901190109
011901090119010902250238023802380240020d006000600002001c008d
008a008d008a00730073013300fe015100f20058006d010900eb00730074
009f00d600d300e3000000000000002a0000002a0000002a0000002a0000
00c6000000fe0000032400000540000006ec000008a80000090000000986
00000a1400000b6800000c2c00000c8200000cc400000d1800000d960000
0ecc00001036000011b6000013880000163a00001814000019e600001ad2
00001c7000001e1600001eac00001f4a00002018000020b2000021720000
22e2000024e00000270c000028c400002a8c00002c8c00002f9200003240
0000345e000037380000385800003a3e00003f56000040cc000045ea0000
487c000049e400004be000004dc400005070000052940000550e00005750
0000591e00005cf2000060b6000063f6000065e2000066a0000067220000
67f0000068ca0000693c000069aa00006bf400006dd800006f7a000071f0
000073e600007564000077a80000799800007b0c00007c84000081380000
821c00008624000088060000893e00008b9a00008e3000008ff000009278
000094220000963c0000980a00009bf600009f8a0000a1900000a3cc0000
a59c0000a5f80000a7d40000a8ae0000a8e20000a9160000a9400000a972
0000a9a40000a9d80000aa0a0000aa3a0000aa720000aabc0000aaee0000
ab1e0000ab5a0000ab860000abb80000abf00000ac1e0000ac500000ac80
0000acae0000acdc0000ad0e0000ad3c0000ad6c0000ada60000ade00000
ae120000ae420000ae720000aea20000aee20000af120000b0120000b0a8
0000b2680000b3cc0000b5be0000b60e0000b8be0000ba880000bd720000
bf8e0000c32e0000c3b40000c42e0000c5920000c9520000caec0000cbde
0000cd600000ce820000cfa20000d2800000d4440000d55c0000d6720000
d7580000d90a0000da360000dc7c0000dd320000dedc0000e19a0000e328
0000e4800000e51a0000e5c20000e6800000e7de0000e94e0000e9e00000
ea940000eb520000ec060000ec360000ec660000ec960000ef060000f114
0000f1760000f1dc0000f2780000f30c0000f3640000f3ba0000f4960000
f5160000f5480000f57c0000f5f40000f91a0000f9800000f9ea0000fc6c
0000fe900001000e0001005e000100b20001014800010388000103b80001
03ea000104220001045600010486000104c2000104f20001053200010562
00010594000105c6000105f6000106260001065c0001068e000107600001
0818000108be00010926000109b0000109fc00010a9400010b9c00010c78
00010d0400010e020001103e0001121a0001124e0001127e000112b40001
12f2000113ee000115e0000117b4000117e400011812000119ec00011bc2
00011c3a00011da800011e8800011f4e00012090000120b0000120d00001
20f00001238e000123be000123f4000124240001244e00012478000124a8
000124d80001250c0001253e0001274c000127b40001280a0001283a0001
286a00012896000128c2000129160001294a00012b2c00012b5a00012b86
00012bc400012bf200012c2600012c5600012c9600012cce00012cfe0001
2d3e00012d7000012da000012dd000012e1600012e4e00012e8600012eb6
00012ee600012f1600012f4400012f7400012fa200012fe6000130180001
305800013086000130ba000130ec000131200001315200013182000131b2
000131e20001321000013300000134fe000137360001385c000139a00001
3ae200013bd000013d1800013eba00013f0400013f460001418c000145b0
0001461e000146a2000147120001479c0001484a00014908000149ee0001
4a3e00014b3e00014c0000014c9600014d3c00014de000014e8e00014ec0
00014ef800014f3a00014f7c00014fc2000150040001504a000150900001
50c800015102000151460001518a000151d60001522e00015290000152fe
00015352000153ae0001541e00015474000154d600015544000155980001
55f40001565e000156c00001571c00015794000157f400015850000158ca
000159120001595e000159da00015a2000015a7000015aea00015b580001
5bbe00015c6600015c9a00015cd000015d0600015d3c00015d7000015ede
000161ae0001641e000164540001648a000164be000164f80001652e0001
6568000165f000016656000167000001682a0001692600016b3400016bf2
00016d3600016dfc00016ef600016f8600016fe800017090000171940001
73e8000176980001788200017892000178ca00017afa00017c4a00017c74
00017c9000017cbc00017cf400017d4000017d7200017da600017dd60001
7e0400017e3400017e6600017e9800017ecc00017efc00017f2e00017f70
00017f9e00017fce00017ffc0001802c0001805a0001807e000182cc0001
82fc0001832c0001870e0001871e0001874e0001877c000187ac000187da
0001880a000188380001899a00018b1c00018b4c00018cbc00018cee0001
8d1200018f9c00018fc000018fe8000190100001903a0001927000019458
0001948c000194ba000194f0000195240001954c00019576000195a60001
95d8000197d8000199ec00019a1c00019a4a00019a7a00019aa800019ad8
00019b0c00019db20001a0120001a0420001a0740001a0a40001a0d20001
a2300001a29a0001a2f60001a3260001a35c0001a3920001a3c00001a3f2
0001a4220001a4500001a4800001a4ae0001a4e20001a5140001a5440001
a5720001a5c20001a5f80001a8000001a8e60001ab5a0001ad2a0001aeee
0001b0780001b0e20001b1660001b1b20001b28e0001b4aa0001b7740001
b9cc0001bb0e0001bc740001bea40001c13e0001c17a0001c18a0001c19a
0001c2580001c2680001c2780001c2880001c2980001c2a80001c3d60001
c3e60001c3f60001c6560001c6660001c7ae0001c7be0001c9360001c946
0001c9560001c9660001cbb00001cdf40001ce360001ce880001ceb80001
ceee0001cf240001cf540001cf980001d12e0001d2260001d3420001d528
0001d6500001d7420001d93a0001da540001dc520001dd5a0001dece0001
dede0001e0180001e1640001e2d60001e4020001e5fc0001e79a0001e7d6
0001e8280001e8600001e8a40001e8da0001e90e0001eb7a0001ebaa0001
ed160001ed260001ed360001ed6e0001ed7e0001efd80001f1da0001f42c
0001f45c0001f48c0001f6560001f6660001f7fe0001f80e0001f9720001
fb860001fb960002008a00020200000205080002053a0002081800020a14
00020a2400020a3400020a4400020c8600020c9600020ca600020cb60002
0ed20002118c0002119c000213d8000216a400021a9600021ec800022098
0002237a000224ec000226b0000228e000022b3200022b4200022c820002
2e3800022fc0000232220002323200023776000238ee00023bc400023bf2
00023f2c00024148000244a0000247da000247ea00024a4a00024a5a0002
4a6a00024c2400024e6e0002508200025092000252ec0002562c000259dc
00025dc200025fa80002633200026520000266a40002696c00026cac0002
6cf000026fb400026fe20002718a0002719a000271aa000271f800027208
000274b80002776400027a3e00027a6e00027a9c00027cf400027e700002
8004000280520002839e0002854c00028724000287b2000287fc000288a6
0002891600028996000289c200028a0e00028a7c00028aae00028af20002
8b1e00028b8600028bb400028be800028c1200028c4600028c7a00028ca8
00028cd600028d2a00028dba00028e2600028e9800028eda00028f500002
8f8800028fda00029038000290c0000290f800029146000291a200029216
00029276000292f0000293260002935e000293d800029440000294b20002
9534000295a40002963e000296d200029728000297ba0002982c00029890
000298f4000299580002998e000299ee00029a8c00029ae600029b680002
9be000029c7000029d2800029d9000029e3800029ee000029faa0002a074
0002a12a0002a1ec0002a29c0002a3240002a3bc0002a41a0002a4ac0002
a5000002a5760002a61e0002a6740002a6da0002a7520002a7e20002a87a
0002a8d40002a96e0002aa000002aaa00002ab540002ac020002ac780002
ad2c0002adbe0002ae120002aea20002af240002afcc0002b0680002b084
0002b0c00002b0f00002b1200002b2900002b5220002b68c0002b79c0002
b9540002bb6e0002bbea0002bc660002bcee0002bd700002bdf20002be78
0002bf300002c0140002c0ce0002c1b20002c2640002c3080002c3ba0002
c43e0002c4b60002c4f40002c6bc0002c6dc0002c6fc0002c7760002c7f0
0002c86a0002c8e40002c9a00002ca5c0002cb0e0002cbc00002cc720002
cd2a0002cde20002ce9a0002ceac0002cebe0002ced00002cee20002cef4
0002cf740002cff40002d0ac0002d0be0002d0d00002d0e20002d0f40002
d1060002d1180002d12a0002d13c0002d14e0002d1600002d2040002d2b6
0002d35a0002d40c0002d43c0002d4700002d4a00002d4d60002d53c0002
d5ae0002d60a0002d67a0002d6d00002d7440002d79e0002d8140002d876
0002d8e00002d9320002d9960002d9ee0002da4a0002daa00002daf60002
db3c0002dba80002dc000002dc4e0002dc7e0002dcb40002dcf00002dd30
0002dd7a0002ddb60002de1c0002de720002decc0002df200002df740002
dfcc0002e0240002e07e0002e0de0002e12e0002e15c0002e1880002e1be
0002e1f00002e2200002e2500002e2920002e2b60002e3180002e37a0002
e3d20002e4320002e4840002e4e80002e53e0002e5a40002e6020002e650
0002e6920002e6ca0002e7040002e73c0002e76a0002e78e0002e7c40002
e7f40002e8340002e86a0002e89c0002e8d00002e9060002e9520002e99a
0002e9da0002ea160002ea440002ea760002eacc0002eb060002eb4c0002
eb760002eb9e0002ebdc0002ec040002ec320002ec5a0002ec900002eccc
0002ed120002ed4e0002ed8a0002edc40002edfe0002ee400002ee7e0002
eec00002eed60002eef20002ef080002efe40002effa0002f0760002f08c
0002f12a0002f2640002f45e0002f6ae0002f8700002f9480002fa160002
fb320002fc4e0002ff480003025400030412000305e60003083200030a6a
00030bf600030d6000030d7000030e7400030fa2000310f00003126e0003
1414000315de00031792000318a0000319e000031b1800031c0400031d24
00031e200001000003af0100003f0077000500020010002f005a000002c8
083b000300020000005f047a000000030000000000fe0000000000030000
0001001601100000000300000002000c01280000000300000003006800fe
000000030000000400240110000000030000000500180166000000030000
0006002a017e000000030000000700a601a80000000300000008002602da
0000000300000009001c0902000000030000000a021e091e000000030000
000b006c0b3c000000030000000c00660ba8000000030000000d06b4024e
000000030000000e005c0c0e0001000000000000007f0c6a000100000000
0001000b0cf2000100000000000200060cfe000100000000000300340ce9
000100000000000400120cf20001000000000005000c0d1d000100000000
000600150d29000100000000000700530d3e000100000000000800130dd7
0001000000000009000e10eb000100000000000a010f10f9000100000000
000b00361208000100000000000c0033123e000100000000000d035a0d91
000100000000000e002e12710003000104030002000e12b7000300010403
00040026129f0003000104050002000e12dd0003000104050004002612c5
0003000104060002000c13030003000104060004002412eb000300010407
0002000c132700030001040700040024130f0003000104080002000c1353
00030001040800040024133b000300010409000000fe0000000300010409
0001001601100003000104090002000c01280003000104090003006800fe
000300010409000400240110000300010409000500180166000300010409
0006002a017e000300010409000700a601a80003000104090008002602da
0003000104090009001c0902000300010409000a021e091e000300010409
000b006c0b3c000300010409000c00660ba8000300010409000d06b4024e
000300010409000e005c0c0e00030001040a0002000e12b700030001040a
00040026129f00030001040b00020014132700030001040b0004002c130f
00030001040c00020010137700030001040c00040028135f00030001040e
00020008139f00030001040e0004002013870003000104100002000e13bf
0003000104100004002613a70003000104130002000e13e5000300010413
0004002613cd0003000104140002000c132700030001041400040024130f
0003000104150002000e140b0003000104150004002613f3000300010416
0002000e14310003000104160004002614190003000104190002000c1457
00030001041900040024143f00030001041b0002000e147b00030001041b
00040026146300030001041d0002000c132700030001041d00040024130f
00030001041f0002000c14a100030001041f000400241489000300010424
0002000e14c50003000104240004002614ad00030001042a0002000e14eb
00030001042a0004002614d300030001042d0002000c151100030001042d
0004002414f900030001080a0002000e12b700030001080a00040026129f
0003000108160002000e1431000300010816000400261419000300010c0a
0002000e12b7000300010c0a00040026129f000300010c0c000200101377
000300010c0c00040028135f005400790070006500660061006300650020
00a900200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e00200070006c0063
002e00200044006100740061002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002f005400790070006500200053006f
006c007500740069006f006e007300200049006e0063002e002000310039
00390030002d0031003900390032002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064004d006f
006e006f0074007900700065003a0043006f007500720069006500720020
004e006500770020004900740061006c00690063003a0076006500720073
0069006f006e00200032002e0039003000200028004d006900630072006f
0073006f00660074002900560065007200730069006f006e00200032002e
003900300043006f00750072006900650072004e0065007700500053002d
004900740061006c00690063004d00540043006f00750072006900650072
2122002000540072006100640065006d00610072006b0020006f00660020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e00200070006c006300200072
00650067006900730074006500720065006400200069006e002000630065
0072007400610069006e00200063006f0075006e00740072006900650073
002e004e004f00540049004600490043004100540049004f004e0020004f
00460020004c004900430045004e00530045002000410047005200450045
004d0045004e0054000d000a000d000a0054006800690073002000740079
007000650066006100630065002000690073002000740068006500200070
0072006f007000650072007400790020006f00660020004d006f006e006f
00740079007000650020005400790070006f006700720061007000680079
00200061006e006400200069007400730020007500730065002000620079
00200079006f007500200069007300200063006f00760065007200650064
00200075006e00640065007200200074006800650020007400650072006d
00730020006f0066002000610020006c006900630065006e007300650020
00610067007200650065006d0065006e0074002e00200059006f00750020
00680061007600650020006f0062007400610069006e0065006400200074
00680069007300200074007900700065006600610063006500200073006f
006600740077006100720065002000650069007400680065007200200064
00690072006500630074006c0079002000660072006f006d0020004d006f
006e006f00740079007000650020006f007200200074006f006700650074
0068006500720020007700690074006800200073006f0066007400770061
007200650020006400690073007400720069006200750074006500640020
006200790020006f006e00650020006f00660020004d006f006e006f0074
007900700065002700730020006c006900630065006e0073006500650073
002e000d000a000d000a005400680069007300200073006f006600740077
00610072006500200069007300200061002000760061006c007500610062
006c00650020006100730073006500740020006f00660020004d006f006e
006f0074007900700065002e00200055006e006c00650073007300200079
006f00750020006800610076006500200065006e00740065007200650064
00200069006e0074006f0020006100200073007000650063006900660069
00630020006c006900630065006e00730065002000610067007200650065
006d0065006e00740020006700720061006e00740069006e006700200079
006f00750020006100640064006900740069006f006e0061006c00200072
00690067006800740073002c00200079006f007500720020007500730065
0020006f00660020007400680069007300200073006f0066007400770061
007200650020006900730020006c0069006d006900740065006400200074
006f00200079006f0075007200200077006f0072006b0073007400610074
0069006f006e00200066006f007200200079006f007500720020006f0077
006e0020007000750062006c0069007300680069006e0067002000750073
0065002e00200059006f00750020006d006100790020006e006f00740020
0063006f007000790020006f007200200064006900730074007200690062
0075007400650020007400680069007300200073006f0066007400770061
00720065002e000d000a000d000a0049006600200079006f007500200068
00610076006500200061006e00790020007100750065007300740069006f
006e00200063006f006e006300650072006e0069006e006700200079006f
00750072002000720069006700680074007300200079006f007500200073
0068006f0075006c00640020007200650076006900650077002000740068
00650020006c006900630065006e00730065002000610067007200650065
006d0065006e007400200079006f00750020007200650063006500690076
0065006400200077006900740068002000740068006500200073006f0066
007400770061007200650020006f007200200063006f006e007400610063
00740020004d006f006e006f007400790070006500200066006f00720020
006100200063006f007000790020006f006600200074006800650020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e000d000a000d000a004d006f006e006f00740079007000650020
00630061006e00200062006500200063006f006e00740061006300740065
0064002000610074003a000d000a000d000a0055005300410020002d0020
002800380034003700290020003700310038002d00300034003000300009
00090055004b0020002d0020003000310031003400340020003000310037
003300370020003700360035003900350039000d000a0068007400740070
003a002f002f007700770077002e006d006f006e006f0074007900700065
002e0063006f006d0048006f00770061007200640020004b006500740074
006c0065007200440065007300690067006e006500640020006100730020
006100200074007900700065007700720069007400650072002000660061
0063006500200066006f0072002000490042004d002c00200043006f0075
007200690065007200200077006100730020007200650020006400720061
0077006e002000620079002000410064007200690061006e002000460072
00750074006900670065007200200066006f0072002000490042004d0020
00530065006c006500630074007200690063002000730065007200690065
0073002e0020002000410020007400790070006900630061006c00200066
006900780065006400200070006900740063006800200064006500730069
0067006e002c0020006d006f006e006f0074006f006e006500200069006e
002000770065006900670068007400200061006e006400200073006c0061
006200200073006500720069006600200069006e00200063006f006e0063
006500700074002e00200020005500730065006400200074006f00200065
006d0075006c006100740065002000740079007000650077007200690074
006500720020006f0075007400700075007400200066006f007200200072
00650070006f007200740073002c00200074006100620075006c00610072
00200077006f0072006b00200061006e006400200074006500630068006e
006900630061006c00200064006f00630075006d0065006e007400610074
0069006f006e002e0068007400740070003a002f002f007700770077002e
006d006f006e006f0074007900700065002e0063006f006d002f00680074
006d006c002f006d0074006e0061006d0065002f006d0073005f0063006f
00750072006900650072006e00650077002e00680074006d006c00680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d002f00680074006d006c002f006d0074006e
0061006d0065002f006d0073005f00770065006c0063006f006d0065002e
00680074006d006c0068007400740070003a002f002f007700770077002e
006d006f006e006f0074007900700065002e0063006f006d002f00680074
006d006c002f0074007900700065002f006c006900630065006e00730065
002e00680074006d006c547970656661636520a920546865204d6f6e6f74
79706520436f72706f726174696f6e20706c632e204461746120a9205468
65204d6f6e6f7479706520436f72706f726174696f6e20706c632f547970
6520536f6c7574696f6e7320496e632e20313939302d313939322e20416c
6c205269676874732052657365727665644d6f6e6f747970653a436f7572
696572204e6577204974616c69633a76657273696f6e20322e393020284d
6963726f736f66742956657273696f6e20322e3930436f75726965724e65
7750532d4974616c69634d54436f7572696572aa2054726164656d61726b
206f6620546865204d6f6e6f7479706520436f72706f726174696f6e2070
6c63207265676973746572656420696e206365727461696e20636f756e74
726965732e4e4f54494649434154494f4e204f46204c4943454e53452041
475245454d454e540d0a0d0a546869732074797065666163652069732074
68652070726f7065727479206f66204d6f6e6f74797065205479706f6772
6170687920616e64206974732075736520627920796f7520697320636f76
6572656420756e64657220746865207465726d73206f662061206c696365
6e73652061677265656d656e742e20596f752068617665206f627461696e
6564207468697320747970656661636520736f6674776172652065697468
6572206469726563746c792066726f6d204d6f6e6f74797065206f722074
6f676574686572207769746820736f667477617265206469737472696275
746564206279206f6e65206f66204d6f6e6f747970652773206c6963656e
736565732e0d0a0d0a5468697320736f6674776172652069732061207661
6c7561626c65206173736574206f66204d6f6e6f747970652e20556e6c65
737320796f75206861766520656e746572656420696e746f206120737065
6369666963206c6963656e73652061677265656d656e74206772616e7469
6e6720796f75206164646974696f6e616c207269676874732c20796f7572
20757365206f66207468697320736f667477617265206973206c696d6974
656420746f20796f757220776f726b73746174696f6e20666f7220796f75
72206f776e207075626c697368696e67207573652e20596f75206d617920
6e6f7420636f7079206f722064697374726962757465207468697320736f
6674776172652e0d0a0d0a496620796f75206861766520616e7920717565
7374696f6e20636f6e6365726e696e6720796f7572207269676874732079
6f752073686f756c642072657669657720746865206c6963656e73652061
677265656d656e7420796f75207265636569766564207769746820746865
20736f667477617265206f7220636f6e74616374204d6f6e6f7479706520
666f72206120636f7079206f6620746865206c6963656e73652061677265
656d656e742e0d0a0d0a4d6f6e6f747970652063616e20626520636f6e74
61637465642061743a0d0a0d0a555341202d202838343729203731382d30
3430300909554b202d203031313434203031373337203736353935390d0a
687474703a2f2f7777772e6d6f6e6f747970652e636f6d486f7761726420
4b6574746c657244657369676e6564206173206120747970657772697465
72206661636520666f722049424d2c20436f757269657220776173207265
20647261776e2062792041647269616e20467275746967657220666f7220
49424d2053656c656374726963207365726965732e202041207479706963
616c2066697865642070697463682064657369676e2c206d6f6e6f746f6e
6520696e2077656967687420616e6420736c616220736572696620696e20
636f6e636570742e20205573656420746f20656d756c6174652074797065
777269746572206f757470757420666f72207265706f7274732c20746162
756c617220776f726b20616e6420746563686e6963616c20646f63756d65
6e746174696f6e2e687474703a2f2f7777772e6d6f6e6f747970652e636f
6d2f68746d6c2f6d746e616d652f6d735f636f75726965726e65772e6874
6d6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c
2f6d746e616d652f6d735f77656c636f6d652e68746d6c687474703a2f2f
7777772e6d6f6e6f747970652e636f6d2f68746d6c2f747970652f6c6963
656e73652e68746d6c0043006f007500720069006500720020004e006500
77002000430075007200730069007600610043006f007500720069006500
720020004e006500770020006b00750072007a00ed007600610043006f00
7500720069006500720020004e006500770020006b007500720073006900
760043006f007500720069006500720020004e006500770020004b007500
72007300690076006f0069007400750043006f0075007200690065007200
20004e00650077002003a003bb03ac03b303b903b10043006f0075007200
69006500720020004e006500770020004900740061006c00690071007500
650043006f007500720069006500720020004e0065007700200044015100
6c00740043006f007500720069006500720020004e006500770020004300
6f0072007300690076006f0043006f007500720069006500720020004e00
650077002000430075007200730069006500660043006f00750072006900
6500720020004e006500770020004b007500720073007900770061004300
6f007500720069006500720020004e0065007700200049007400e1006c00
690063006f0043006f007500720069006500720020004e00650077002004
1a044304400441043804320043006f007500720069006500720020004e00
6500770020004b00750072007a00ed007600610043006f00750072006900
6500720020004e006500770020013000740061006c0069006b0043006f00
7500720069006500720020004e0065007700200050006f01610065007600
6e006f0043006f007500720069006500720020004e006500770020006e00
670068006900ea006e00670043006f007500720069006500720020004e00
650077002000450074007a0061006e006100b259120f411e03640001002f
0364003f0364004f03640003000f0364006003640090036400c003640004
001f0366000100100366003f0366008f0366000300800366b3090e3240b8
0366b20f7b32b9035f027eb2641f0fba02820001035e4023de641fcf1dcf
21cf22cf24cf2fcf4fcf5ccff308cf16cf1ecf1fcf28cf2bcf47cfc2cfb8
0136401108cf23cd36cd50cf51cf52cf54cf69070f413503570010035600
1f035700200356002f0357000500400356004f0357007f0357009f035700
af03570005002f0355003f0355004f035500030060035400700354000200
200354003003540040035400500354006003540070035400800354009003
5400a0035400b00354400c0a3f023f034f024f0304122f413d0282003f02
82005f0282008f028200bf028200050060027f0080027f0002003f027f00
60027f00c0027f00e0027f0004002f027e007f027e0002000f027e002f02
7e004f027e005f027e007f027e00af027e00e0027e0007002f027e003f02
7e004f027e0060027e00e0027e000502820282027f027f027e027eb72f1d
701f361d701fb80159b21e701fb9015801e2402a701fc250701f4a2f701f
3123701f221e701f1f1d701f010001010009010200080017170000001211
0840410e025302160063000d02120063000d01490063000d011e0063000d
011a401a630ddf630dc7630dc1630d8d630d54630d53630d52630d2a630d
b8015b401a570de8570d51570d49570d3f570d38570d35570d32570d2d57
0d411101590158000d00c20158000d004a0158000d00310158000d002201
58000d001f0158b20d0009b8018db247931fbc015c004702ab001f0138b2
47931fba0136001d0401b61ff347bb1f6921b80401b61f5c1d671f4f1db8
0401b21f2b21b80401b21f2821b80401b21f231db80401b71f5534093409
3790bb02060007009001bb40360790a307905e07903907903707902e0790
29079027079026079025079020071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b00
4b544218b0372b4bb807ff52b0382b4bb009505b58b101018e59b0382bb0
0288b801005458b801ffb101018e851bb0124358b900010127858d1bb900
010181858d59590016763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b2b2b4b5079bf001f02190007001f01ab0007001f01
aa4016071fb0071fac071f4e071f48071f3d071f34071f30072b2b2b2b2b
2b2b2b2b2b4b5379bf009002190007009001ab0007009001aa40160790b0
0790ac07904e07904807903d079034079030072b2b2b2b2b2b2b2b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d594bb0e453205c58b9004702
534544b90253025345445958b902460047455258b9004702464459594bb8
040153205c58b9025502534544b90254025345445958b90a400255455258
b902550a404459594bb8040153205c58b9001e02554544b9002102554544
5958b90a40001e455258b9001e0a404459594bb8040153205c58b9001d02
544544b90024025445445958b90a40001d455258b9001d0a404459594bb8
080153205c58b150214544b1212145445958b915000050455258b9005015
004459594bb8030153205c58b121214544b1212145445958b907e0002145
5258b9002107e04459594bb8030153205c58b121214544b11d2145445958
b907e00021455258b9002107e04459594bb8030153205c58b121214544b1
242145445958b907e00021455258b9002107e04459592b2b2b2b2b2b2b2b
2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b45695342014b5058b108004259435c58b1080042591610703eb012
4358b90d4f3e9a1bba00d503ea000b2b59b00a2342b00b2342003f3f182b
103c012f060cb0062342b0072342b0124358b93b21187e1bba040001a800
0b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59
b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b01023
42b0112342002b2b2b2b2b2b2b2b2b184569444569444569447374757374
73435c58bc000f027e001f027e000273590073017374737374747474002b
732b2b2b73747373744358ba00c0035f000174592b00000000>
[14425 16209 15397 16281 16285 16021 16101 16225 16361 16373 16241 16357 12057
] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> CourierNewPS-ItalicMT AddT42Char 
1 1344 8 <00050160ffe804f204fb000b001700290035004100ec405973087332ae0d
a114ae37a33ebb0db414bb37b43ecd0dc314cd37c33e0e23242526272829
0718221a1b1c1d1e1f2007192221212f191814191918187222222a060c36
6f000100002a06217219192a063c366030013030062a0cb8030cb4123606
053cb8030c4009363636362a0d0f3609b8019cb327393633b801e9b5271a
433f362db8019cb31e153603b801e9b31e1942fdb9010a00182b4e10f44d
f4ed10f4ed4e10f64df4ed10f4ed003fedfde63ffde61112392f5ded1112
392fed1112392f5ded1112392fb10602435458b42240091334002b59ed87
0e2e2b7d10c400121739111217393130015d012226353436333216151406
273236353426232206151416050506232226353436372536333216151406
01222635343633321615140627323635342623220615141602c05874c27d
5974c36f5f9558446095590242fcc00e08080e111503400e08090d11fe3c
5974c37c5974c2706095594460945802f4745a78c173567dc13d945f4358
945d45585cfd040e090c1407fd040e090c14fd0c745979c173577cc13c94
604258945d445900>CourierNewPS-ItalicMT AddT42Char 
2 12626 68 <000200bcffdf04600380002c003901a6405559010186079607028607f608
021802c931d931031f021f392b01030f00000200391f001f0105124a0101
75318807020a11043579088b058b379c059c37070c2d3901010200000d04
05033639012d00002c29262524b80277400f1f480d00001e252414252524
0c4f2db80320b32f210a0ab8ffc0401f14283f0a031f39f301254f01a12c
000a3621030b173019323f174012233f17b80189400c13211f072517253a
0a0c712db80132401d3961016100f3250d4f24a125400b123f4f255f256f
25af2504251a3b1ab8ffc0b3140c3f1ab8ffc0b3120b3f1ab80115401533
2106400b123f4f065f066f060306193a24251042b901d900182b2b103c01
4e10f45d2b4dfde62b2b4e10f65d2b4df4ed10fdf4f4f4e52b103c2b003f
fde42b2b3fed3f3ce4ed10ed1112392b2ffdf6ed87052e2b0e7d10c4182b
0011123939111239390710083c0e3c3c053c3130014bb00c534bb025515a
58b4121e112335b8ffdd3838385901715d0071435c58b53118110a3f09b8
ffe0400c140c3f151811391d18113909b8fff0400b11393110120b3f3110
0d392b2b2b2b2b2b2b59015d005d5d5d7171213706232226353437363332
173736353427262322070623222635343637363332161514070333321615
14062303262322070615141633323637035919d7d186887895f073981d03
2e3e7361c9170a0d121d62ad548f910676711c1421216c7191c9795b5f63
6dce7a799a785a89627b1f880f0f3a23303c07120f131e192d7e4f1a19fd
d41110151e01a2215d465a4152556100>CourierNewPS-ItalicMT AddT42Char 
2 13696 70 <000100faffdf04c9038000360107b51a100f093f36b8fff04040190f3f5f
155136a535ba17b535c917c421cc2a086f0c6f0d022b1a2c312c32393288
299a31a51eea1aeb31091e228a21bf21bf22040d400a113f1f0d010db100
b8018c401404061f212c0b1f212c0b18213407104f0a00f308b80132b30f
0a010ab80132400b2740110a3f27400f093f27b8ffc0b31b203427b8ff80
40161a350027013f274f275f278f27e02705271a381c212fb8ffc040171b
2034002f102f024f2f5f2f8f2fe02f042f193776dc182b4e10f45d712b4d
ed4e10f65d712b2b2b2b4df45df4ed10ed003fed3fed3fed3ff4ed5d2b31
30014bb00b534bb025515a58bd001dffec001effdd001affec3838385901
715d005d712b2b0136373633321615140707060623222635343736353427
26232206061514163332363736333216151407060423222635343e023332
16046b0c0b11150e130329071d120f13020140548b7ad886a69360da6519
110e121447fee590a9ca659bc97c6196030d390b11130c0911be1f1a120c
060e080844314277ec73839f475114110e14154a6ec39c77d8965d39>CourierNewPS-ItalicMT AddT42Char 
2 14744 72 <000200d6ffdf04960380001f0027017eb9000bffd8b30a113f0ab8ffd8b3
0a113f09b8ffd840180a113f1f280a113f00280a113f01100a113f002809
0f3f09b8ffd84009090f3f0a28090f3f0bb8ffd8407d090f3f1f28090f3f
0009000b000c1009100b100c200a200c200e20103909f9260c04196a2602
122a182b192c269915aa1d052309200b200d0305040608040a033c183c26
4d184b1d4d26520350045014501552166c1d791d9525ab19e604f5041055
26010504060327201e00000101240621130b24211b07204f002c0eb80189
40213f1e4f1e701e901edf1e051e1a29272c012c03214f165f16df160316
19283a56182b4e10f45d4dfdf4e44e10f65d4de4f4ed003fed3ffd11392f
3c10fd3c01111239393130004bb00b534bb025515a58b42314221409baff
f40008ffeeb2251405b8ffecb41919140c04b8fff4383838383838383838
59014bb00b534bb025515a58b90004ffeab52322210c2222383838385901
715d0071005d015d435840098f188c198f268d2704015d5900715d2b2b2b
2b2b2b2b2b2b2b2b01210615141633323637363332161514070604232226
35343e02333216151427362726232206070486fca803ba9f5dda4e170e0d
12102efeec8eb8df609dcd79acd1540557589490fa3a019d1f1089b23d34
0f130f1210315fdaa86fc58f5cca9d340d8a5857aa8f>CourierNewPS-ItalicMT AddT42Char 
3 496 76 <000200c50000041f05110003001c0115b90005ffe8b3140c3f14b8ffe840
14140c3f0904091519041915e815050c0d10131415b80277b71f470d0c09
060504b80277b71f48041c19161514b8027740111f480405051e14151414
14150201b10300b8031a400d1c04060c0d0a141d2815141002bc01910001
013200030191401370000100001e1d044f15054f101417141d0a14b8ffc0
b3121e3f14b8ffc0b3111c3f14b8ffc0b30f093f14b8ffc04018140c3f14
4014391440133900147014b014e0140414191d10ba02de01d900182b2b4e
10f45d2b2b2b2b2b2b2b103c2b2b4de519d4e501181112392f5dedf4ed2b
103c2b10c0003f3c3f3cf63cfd3c87052e2b7d10c4182b2b2b3130014bb0
18534bb025515a58b90001ffeab10316383859015d2b2b01072337130321
3216151406232122263534363321132322263534363303a32e7b2e23a601
4a1c142121fd181c142121014a94f51c1522210511d9d9fe51fcf2111015
1e1210141e02b91210141f00>CourierNewPS-ItalicMT AddT42Char 
3 1244 78 <0001008b000004b004e70036041440773613010909090a0f150f160f1a0f
1b0f2e0f341a0a1f2e1f340b0f150f1b1f151f1b102405121b800e351980
0e351a800e3517800e3516800e3515800e3518800e356020602469266935
970a9612a914a924bf2ad9140a551365136514a513a72505122536000024
00002413121314120101020508090ab80277400d1f4700201020021b1c20
232425b80277400d1f470f311f31022d2e31343536b80277b71f4712110e
0b0a09b8027740101f480f18010f181f18021c1b18151413b80277b71f48
2e2d2a272625b8027740551f4812241413131e0024140013120024362526
261e3536143535360a09091e011214010112132324252635360008011c13
232425360006383700f340131301111200144f1b201b1c060201012e282e
2d0a12011024b80191b71400611200140114b80264b41313011026b80191
b60f35013f350135b80191b2264035b802bc400e3f369f3602364f203f25
9f250225b80218b638094f10011701b8ffc0b3140c3f01b8ffc0400b160d
3f3f014f019f010301bd01fe00370010011d02e400182b2b10f45d2b2b2b
2be5011910f65d1afd5d18e41a10fd5d71ed2b103c011910e671435c58b9
0014ffc0b31c373f14b8ffc0b31e3c3f14b8ffc0401821413f144011173f
14400d113f144012233f144014283f14b8ffc0b2120b3f2b2b2b2b2b2b2b
2b5918e410ed2b103c003f3c2b103c00103c3f3c1a1910ed183f3c12392f
1aed0111121739001112173987052e2b7d10c4872e182b870e7dc487082e
182b87057dc418435c584018241413134021413f13401e3c3f13401c373f
134019323f13b8032db7002414001312002487082e182b2b2b2b2b87057d
c418592b2b5d5d2b2b5d2b5d2b0708103c083c070e103c3cb10602435458
b535201d243425b8ffe8b31d243414b8ffe0b31d243413b8ffe0b21d2434
002b2b2b2b5931304358b1141c013859014bb00b534bb00d515a58400e1b
401a40194018401740164015403838383838383859005d015d012b2b2b2b
2b2b2b435c58b525180a113f13b8ffe8b30b123f14b8ffb8b3120b3f13b8
ffc0b3120b3f13b8fff0b30b0f3f13b8ffc040090f093f18400a113f26b8
ffc0b30a113f20b8ffc040310a113f1a400a113f1b400a113f19400a113f
18400a113f1a40090f3f1b40090f3f1940090f3f1840090f3f18400d163f
0eb8ffc040090b123f36180f143f26b8ffe840310d163f1420101b3f1418
0d163f18400c143f26180c143f35200c143f26180f143f35200f143f1840
0b123f18400e133f20b8ffc0403f0e133f144012233f1440120b3f154012
0b3f0908120b3f19400c103f17400c103f18400c103f1440160d3f364017
0e3f2540170e3f3640160d3f2540160d3f012b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b
2b2b59015d5d005d01032322263534363333132322263534363333030123
222635343633213217161514062323010133321615140623212226353436
33330101d050c51c14212171e6701c142121c5a501a52b1c142121010d1c
090c222161fe7e0145611c142121fef01c1421213afee70176fe8a121014
1e043e1210141ffcfa012c1210141f080a10141ffeeefe591110151e1210
141e0173>CourierNewPS-ItalicMT AddT42Char 
3 2448 79 <000100c40000041e04e700180094400d28114a0548110308090c0f1011b8
0277b71f47090805020100b80277b71f48001815121110b8027740181f48
0001011e10111410101118000008090a101928111001bc02e00011016800
10ffc040160f093f00104f107010a010e01005101919101710190aba02de
02df00182b2b103c2b4e10f45d2b4de4ed2b3c2b10c0003f3c3f3c87052e
2b7d10c4182b2b2b3130015d010321321615140623212226353436332113
23222635343633039df9014a1c142121fd181c142121014ae7f31c142121
04e7fb6d1110151e1210141e043e1210141f>CourierNewPS-ItalicMT AddT42Char 
3 2676 80 <0001001d000004d40380004c03354023090b080c080e091a0c2d09330945
1b0e1b1a1a201b2b1b2c1f2d1c2e19331945101207b8fff0b3140c3f01b8
ffe8403c0f39280e2a1a29342a45390e39183921392b392d39343945490e
49184834484563007500920012470e451f4621951fc42005013434323535
003d0943b8025e4016400f401f4002406344404043430a44223d44451009
16b8025e40111313530f131310100a0f22160f0e230929b8025e40162600
26102602265322262623230a222229222136093cb8025e40163900391039
02395335393936360a35223c350046094cb8025e40394949534549494646
0a45224c4544200603323330010e0f0f1e1718141717182122211f221e2a
2b142a2a2b4544441e3500143535004c000634b80191b501f30321f306b8
013b402a09302103031d4f09070f4f16161717224f29292a354f2a3c444f
3c3d0a354d2818172b2a0035100ff317b8ffc0401b110a3f1740343d3417
40303517401b25341017201730177f170417b8027bb222f32ab8ffc0401b
110a3f2a40343d342a4030352a401b2534102a202a302a7f2a042ab8027b
4016354f4440110a3f70440144194d17172a173517354d0aba013c01db00
182b2b103c2b2b2b4e10f45d2b4dfdf65d2b2b2b2bfdf65d2b2b2b2bed2b
103c103c103c2b10c0003f3ced103ced103c10ed3c103c10ed3fed3c10ed
10f4ed10fded3f3c87052e2b7d10c4872e182b087d10c487052e182b0e7d
10c40011123939111239180810fd2b3c3d12392f180110f12ff42bc40008
10fd2b3c3d12392f180110f15d2ff42bc4000810fd2b3c3d12392f180110
f15d2ff42bc4000810fd2b3c3d12392f180110f12ff42bc4000810fd2b3c
3d12392f180110f15d2ff42bc40710083c0e3cb10602435458b90001ffe0
b20e2434002b59313001715d002b2b435c58401f0e08110a3f1808110a3f
2108110a3f2b08110a3f3408110a3f4508110a3f00b8ffd0b3111c3f0fb8
ffd8b3140c3f17b8ffd8b3140c3f22b8ffd8b3140c3f2ab8ffd8b3140c3f
35b8ffd8b3140c3f44b8ffd84021140c3f1810120b3f2110120b3f2b1012
0b3f3510121e3f4410121e3f45101e3900b8ffe8b2143901b8ffe8b11439
012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59015d0107363332
161736363332161514070333321615140623231336353426232207060703
333216151406232313363534262322070607033332161514062323222635
34363333132322263534363301a012836e3c561347823b4a62067c461d14
22219b8d04392a2e32435877471c1421219b8c043b272d31475a76461d14
2221e11c1421214695471c142121036255734645464565501418fdb51110
151e02971111353d1c2767fdd31110151e0291141333401b2966fdd31110
151e1210141e02b91210141f>CourierNewPS-ItalicMT AddT42Char 
3 3708 81 <00010074000004610380003a013eb90021ffc0b30f093f22b8fff0b30a11
3f22b8fff0b2113902b8ffe04053110a3f2120190f3fca1ddc1dfc1d030b
1d1c1d22012d1d34013d1d650184019c1daf1dba1e0b0f120f1800210024
002a1f121f1810211024340646068a2288339a1d0e22010000230f151f15
0211121518191ab80277b71f472a2b2e313233b80277b71f4712110e0b0a
09b80277400b1f480027012b2a27242322b80277b71f48003a37343332b8
0277b61f48213a000622b80191401301951f2104071112122a2a2b0a0721
0f1c011cb8018c400a194f000a2f0a8f0a030ab802e5b2234f32b8013b40
0c00f3303380339033d0330433b80264b33b76a8182b10f65dedf4fdf45d
fdf45ded003f3c103c103c3fedfded3f3c01392b2b5d2b2b2b5d070e103c
3cb10602435458b90001ffe0b2192434002b593130015d00715d2b2b012b
2b2b01073636333216151407033332161514062323222635343633331336
353426232206070333321615140623212226353436333313232226353436
33020f1b6e9b5a7c8d0571471c142121e21c142121476d05665f57898a70
5f1c142121feee1c1421215f94471c14212103627f5b428469141afdef11
10151e1210141e02031715495f4682fdf11110151e1210141e02b9121014
1f00>CourierNewPS-ItalicMT AddT42Char 
3 4190 82 <000200e3ffdf04a10380000d001c00dbb90010ffe8b211390cb8ffe84084
113905281139661c017b0c7b107c14751c9a029509aa0baa11ba0bba11c8
0bc811ec05eb180e161b490c4910030a14051c590558065a176b14661c7a
14771c9b14941bcc13c61c0d240525187a057a1785058b148518841cfa14
f518f61c0b0e21000b1521070712213f0a4f0a700aaf0adf0a050a1a1e1a
214f03df030203191d3a56182b4e10f45d4ded4e10f65d4ded003fed3fed
3130014bb00b534bb025515a58bd000cfff40017ffea0018ffeab213161b
bafff4001cfff438383838383859005d7101715d00722b2b2b0522263534
1224333216151402042732363635342623220e02151416025ca5d4a00117
8fa4d49bfee77e76e77fae8761a78154ae21d1a183010f9dd09b88fef4a2
5485dc6f7eaa4d79a95a83ac>CourierNewPS-ItalicMT AddT42Char 
3 4502 83 <0002ffe3fe7e04c203800025003101c640700a1e1a1e0212da1e0115012a
0c6401b001be0cb627b92dbf2e082302232d7727ab2b049f30df3002122d
0c2d1e2c272d2e491d4c1e4c2f6400760084008d278c2b930095099b2bab
00a70da71daa1eea0114092b192a281e391e3a27691e881e853008012f30
0c0d0d001516191c1d1eb80277b71f471615120e0d0cb80277b71f480025
221f1e1db8027740651f48302604000d0d1e1d1e141d1d1e2500062c2104
0726210a0b15160e1d171d320a29210780603500077f07027007af070207
1a330d004f1e1e1d806035af1dbf1dcf1d033f1d5f1d6f1d7f1d8f1d9f1d
064f1d5f1d6f1d8f1d9f1daf1d061d19321e1d10b8013cb1a9182b2b103c
4e10f45d71712b3c4d10f53c014e10f65d712b4ded2b103c2b003f3c3fed
3fed3f3c87052e2b7d10c400111239182b2b2b870e7d10c4c4c43c313001
4bb00e534bb025515a58bb0031ffe6002dffe6b32b23281a383838385901
715d4358b656005f125f19035d5900725d710172435c58b90002fff04016
0f3902080d391d101c113f1e0c140c3f1d10170e3f00b8ffe8b3170e3f00
b8ffe8b3160d3f00b8ffe8400e140c3f12400f143f19400f143f22b8ffc0
b20d113f012b2b2b2b2b2b2b2b2b002b2b59015d01073636333216151400
232227033332161615140623212226353436333313232226353436330132
0035342623220015141601e22060bf74a7c6feb3dae0656ccb170f0b2221
fe701c14212171e6711c142121018db3010ea580b3fef1a50362995d5ac1
99cbfebab7fe0606110a151e120f151e043b1210141ffd080106a7759ffe
faa179a1>CourierNewPS-ItalicMT AddT42Char 
3 5768 85 <000100b3000004fc0377002b013fb90014ffe0405f0c103f0b1304140924
19242b243824540065006f076f086f0da500c512e8240e0c280f093f0d20
0f093f0f010f1313011313570153136601f601080b125b126f0d6b127c0d
7f128b12aa12be12cb120a1313120100010200141b1c1f222324b8027740
0b1f470018011c1b18151413b80277400b1f480f2801002b28252423b802
7740231f4802120311050f0e060c080a07010014141e232414232324254f
2b2b0006000a010ab8018c403710210407154f1b224f1b1c0a232c282423
100d4f100701600701071a2d004f2424144f102317232c0a102350230200
23e0230223192c10b802e6b160182b2b4e10f45d712b103c2b2b4de53c10
e5014e10f65d714ded2b103c2b10c0003f3ced10ed3ffde45d3f3c10ed87
052e2b7d10c40111121739182b5d2b5d2b0708103c083c313000715d2b2b
015d2b010736363332161514062322262726262322060703213216151406
232122263534363333132322263534363302ba2dc7b344446d20160a0c0f
1b2f1838ade46201741d142221fd6d1c142021cb959b1c1421210362d496
535c1a15200713231a58abfe341110151e110f141d02bc120f151f00>CourierNewPS-ItalicMT AddT42Char 
3 6216 86 <000100d8ffdf04810380005001a940510424102402129932a932c932c945
04c94b0173429818a300a714af29a350b400bd29b450c000ca29c550fa28
0dec28e150020f2825504c28c51dcd45054a474543221f1c1a08264e0c8c
03064021260b36b8014340092d0a16214e07432122b8ffc0b30d163f22b8
ffc0b30c143f22b8ffc0b30f143f22b80132402f09004f08124f09610008
017008c008e008f00804081a521a214a400d163f4a400f143ff04a014aa1
33294f323c4f33ba01320032ffc04013101b3f0032016f32e032f0320332
19513adc18b80127852b4e10f45d712b4df4ed10ed10f45d2b2bed4e10f6
5d714df4ed10ed10f42b2b2bed003fed3fed3fed3fed111217393130004b
b016534bb025515a58b62816141615163eb8ffeab44616481400b8ffec38
3838383838385900715d5d015d71435c58400b1e100a113f1c300a113f46
b8ffd8b30f093f1db8ffd8b30f093f1fb8ffd8400e0f093f1e10090f3f1c
18090f3f1cb8ffe8b3140c3f47b8ffe8b3140c3f20b8ffe8b3140c3f42b8
fff04019140c3f1f200d163f1e200d163f48200f391f200f391e200f3900
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59015d0136363332161514070706
062322263537363534272623220706151417160417161615140606232226
270607062322263534373736363332161514061514171633323635342e04
353436363332160429061e120f13041e071d130e1301013047809a5b443b
2b01163c54526cde8b639835080c11140e130325061e130e13063b4e96b3
bc3770ff754256c97d5785032b1d1a130c0911901e1a120c110807362234
4231373622181f141b66404a94603332290c0f120d0910ad1e1a130d081e
07392b398e4626492b1b2954363f79592a00>CourierNewPS-ItalicMT AddT42Char 
3 6864 87 <00010144ffdf046e049200350110402a2c100f39320d012c203f204b20ba
2df82d05303133032d000a0b0b352c2423350b0b1e232d1423232d15b801
8cb410211e0b30b8031840362b25094f01012b062336282d231004610018
101802181a3728c52400610a0a0b092c612424230935354f2d090b0b4f23
092d2d092323b8ffc0400e160d3f00231023024f2360230223b8027ab636
09231723360ab80202b16f182b2b103c2b2b7a10f25d712b01182f2b3c01
2f2b7a10e101182f2b7a10e101182f2b103c012fe42b103c012fe410e44e
10f6714de42b103c2b10c0003f3c10fd3c10e43ffde4870e2e2b0e7d10c4
05103c3c07103c3c011117393130004bb012534bb025515a58bd000effea
0013fff40012fff438383859015d712b0121321615140607062321030615
141633323637363332161514070607062322263534371323222635343633
33373636333216151407027601c81d130e0a0d1dfe387705635f59d13e17
0d0e12193d9a6f5f7d8906779b1c1421219b35061e130e13040362101112
170506fdd11814304f32210d131015122c241a74521a1f022f1210141ff8
1e1a120d0811>CourierNewPS-ItalicMT AddT42Char 
3 7290 88 <00010109ffdf04920362002a019f406401800d163f8f010101280d163f19
300d163f8a01010f1b0f21180918112609261126233f0437234d045e046d
057b05720d8a059c05920d9723122e193f194e195b196a19059618010140
343734014023253419191801000102001a0f1e0122211e1b1a19b80277b7
1f48002a27242322b80277b71f4811100d0a0908b8027740551f48192301
1112121e0809140808092223231e001a1400001a01a12a000a1721030b10
1111212821220622224f1a091961010100091a1a000923234f0900004010
1b3f00400d163f10000100008f009f00c0000400b802e740152c0911114f
090909080912124f09080840101b3f08b8ffc04010110a3f100801100820
083008f0080408bb019f002b0009011db1a8182b2b7a10f05d712b2b0118
2f2b7ae101182f2b103c012f2b7ae101182f2b7a10f05d712b2b01182f2b
7ae101182f2b103c012f2b103c012fe42b7a10f101182f003f3c2b103c00
103c3fed3f3ce487052e2b7d10c4870e2e182b057d10c401111239182b2b
2b5d0708103c083cb10602435458b40120192434002b593130002b2b715d
015d01712b2b00712b213706232226353437132322263534363333030615
1416333237132322263534363333033332161514062303861acdcb647508
73711c142121c585044e43cfd2739b1c142121efa6471c1421217b9c7359
2024021e1210141ffd8d1516424fbc021e1210141ffcf21110151e00>CourierNewPS-ItalicMT AddT42Char 
3 7828 89 <000100e900000542036200250160b90013fff0b20f3901b8fff0b20f3925
b8fff0b2113915b8fff0b2113900b8fff0b2133900b8fff0b2113900b8ff
f0403310390100001d002416001f021f121f161f171f1c7b0078150b6610
6611791903660a660b660c660d660e660f06090a0e111213b80277400e1f
470021010021011c1d21242500b80277400b1f471f06010a0906030201b8
0277400b1f481f19011d1c19161514b8027740231f480201011e13121413
13122500001e14151414141514134f0101000a090a1c1d0600b801b5b725
4f15400b123f15b8ffc0b31c1d3415b801ad402940140114bf1301746f02
019f0201024f12401c1c343f124f128f129f120412741013012f13301302
13ba01b900260145b156182b10f45d71f45d2bfd5d71e410f671f42b2bfd
e4003f3c3c3c3f3c10fd3c05872e2b7d10c4872e182b7d10c4182b5d2b5d
2b5d5d2b3130015d5d014bb00b534bb010515a58b90000ffe83859015d2b
2b2b2b2b2b2b212303232226353436332132171615140623231333012322
263534363321321716151406232302b08eb3561c142121013b1c090b2121
8ba02501c28c1c142121013c1c090b212155030d1210141f080a10141ffd
4702b91210141f080a10141f>CourierNewPS-ItalicMT AddT42Char 
3 8290 90 <000100e7ffff05440362002a036a404f0f190100000d0100190a1a0a2a05
123f184f1802592a6800681a682a7b007b03da02e9020809000803071608
18091a05d61601a60201a902012902d901020a01017800b902c80203190c
0d11141516b80277b71f47212226292a00b80277b71f470d0c09060504b8
0277b71f4822211e1b1a19b80277404b1f481716161e0302140303022a1a
19191e002a14001918002a19191a0102021e1819141802031819002c012c
032c040a02f3181717040c294f221b4f2221210c144f0d064f0d0c062a4f
1ab8ffc0b3140c3f1ab8ffc04010120b3f1a401c25341a401935001a011a
b802bc400f003b194f4001281e0f3f01401d3501b80189b3023b2018b801
13400d17401c2534174019350b170117b802bc40090371161e042c151e05
b8ffc0b3110a3f05b8ffc0b31c263405b8ffc0b21a3505b8ffc040141935
00051005200530059005a005b005e0050805ba027b002b011db1aa182b10
f65d2b2b2b2bedf4fdedf45d2b2be61a19fdf42b2b4bb00b534bb00f515a
58b90001ffc038591a18fdedf45d2b2b2b2bed003f3ced10ed103c103ced
10ed1112392f3ced3fe4f4e487082e2b87087dc487082e182b87057dc487
042e182b057d10c4182b2b2b2bb10602435458400a1940090e341620090e
34002b2b593130012f4bb010534bb046515a58b3010c1722383859015d72
7100725d71014bb00b534bb010515a58bb0000ffc00003ffc0383859004b
b00b534bb010515a58b50222192216223838385901715d005d435c584010
19800f093f19401e0f3f16401e0f3f02b8ffc0404f0f1e3f19401b103f16
401b103f1980190f3f1680190f3f1940170e3f1640170e3f1940160d3f16
40160d3f1940140c3f1640140c3f1940120b3f1640120b3f1710110a3f18
280f093f17280f093f19b8ffe8b31e0f3f03b8ffd8b30f1e3f03b8ffe0b3
190f3f00b8ffe0b3190f3f00b8ffe0401d170e3f17201e0f3f00201b103f
19201b103f03201b103f16201b103f19b8ffe4b3190f3f18b8ffd8b3190f
3f19b8ffe4b3170e3f18b8ffd8b3170e3f19b8ffe4b3160d3f18b8ffd8b3
160d3f19b8ffe4b3140c3f18b8ffd8b3140c3f19b8ffe4b3120b3f18b8ff
d8b3120b3f19b8fff0b30b123f00b8ffe8b30b123f2ab8fff0b20b123f01
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59015d005d210703012703232226353436
333332171615140623231301331301232226353436333332171615140623
2303896946fed66808291c142121e71c090b21216b0801236447011d6a1c
152221e61c090b21212801021cfde401030d1210141f080a10141ffd6602
14fdec029a1210141f080a10141f>CourierNewPS-ItalicMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>CourierNewPS-ItalicMT AddT42Char 
CourierNewPS-ItalicMT /CharStrings get begin
/space 3 def
/percent 8 def
/a 68 def
/c 70 def
/e 72 def
/i 76 def
/k 78 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/v 89 def
/w 90 def
end
CourierNewPS-ItalicMT /Encoding get
dup 32 /space put
dup 37 /percent put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
pop
end
%ADOEndSubsetFont
reset_gvm
/MFPVYB+CourierNewPS-ItalicMT /CourierNewPS-ItalicMT findfont ct_VMDictPut
/MFPVYB+CourierNewPS-ItalicMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 59{/.notdef}rp /a /.notdef /c 
/.notdef /e 3{/.notdef}rp /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w 136{/.notdef}rp]
MFPVYB+CourierNewPS-ItalicMT nf
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
185.999 -64.6058 mo
(%unknown values)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79921 0 ]xsh
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
126.006 -55.5485 mo
(damage\(ID,N\), not\(integer\(N\)\). )
[4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 
4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79922 4.79922 4.79919 4.79922 4.79922 0 ]xsh
90.008 -46.4912 mo
(damage_atl\(ID,N\) :- )
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 0 ]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
186.007 -46.4912 mo
(%numeric values)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79921 0 ]xsh
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
126.014 -37.4339 mo
(damage\(ID,N2\), integer\(N2\),)
[4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 
4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79922 0 ]xsh
126.014 -28.3766 mo
(damage\(N\), integer\(N\), N2>=N. )
[4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 
4.79922 4.79921 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79921 4.79922 4.79922 4.79922 
4.79922 4.79922 4.79922 4.79919 4.79922 0 ]xsh
90.0159 9.41675 mo
(serious_atl_0\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 0 
]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
210.019 9.41675 mo
(%positive)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
84.06 1.53326 mo
84.54 1.53326 li
84.54 1.05328 li
84.06 1.05328 li
cp
f
84.06 1.53326 mo
258.48 1.53326 li
258.48 1.05328 li
84.06 1.05328 li
cp
f
258 1.53326 mo
258.48 1.53326 li
258.48 1.05328 li
258 1.05328 li
cp
f
84.06 11.6133 mo
84.54 11.6133 li
84.54 1.53326 li
84.06 1.53326 li
cp
f
258 11.6133 mo
258.48 11.6133 li
258.48 1.53326 li
258 1.53326 li
cp
f
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 18.5129 mo
(serious_atl_1\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 0 
]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
210.003 18.5129 mo
(%positive)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
84.06 20.6733 mo
84.54 20.6733 li
84.54 11.6133 li
84.06 11.6133 li
cp
f
258 20.6733 mo
258.48 20.6733 li
258.48 11.6133 li
258 11.6133 li
cp
f
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 27.6329 mo
(serious_atl_2\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 0 
]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
210.003 27.6329 mo
(%positive)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
84.06 31.2333 mo
84.54 31.2333 li
84.54 30.7533 li
84.06 30.7533 li
cp
f
84.06 31.2333 mo
258.48 31.2333 li
258.48 30.7533 li
84.06 30.7533 li
cp
f
258 31.2333 mo
258.48 31.2333 li
258.48 30.7533 li
258 30.7533 li
cp
f
84.06 30.7532 mo
84.54 30.7532 li
84.54 20.6732 li
84.06 20.6732 li
cp
f
258 30.7532 mo
258.48 30.7532 li
258.48 20.6732 li
258 20.6732 li
cp
f
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 44.1329 mo
(serious_atl_3\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 4.79922 4.79922 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: CourierNewPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal CourierNewPS-ItalicMT gcheck setglobal} if
2 15628 74 <000200d5fe7e052f0380002a0038019fb52028110a3f27b8fff0405b110a
3f0a00010a28110a3f3128110a3f3028110a3f12220b200e221e752d8638
d32a06360b4c314438032e35650062317a277a348f2d9638c01f08311f30
2d302eb42db42ecb32061f1f20300001002a011e100501010205090a0bb8
0277400d1f470a0b0b1e1e01141e1e0100b8013b402e0a4f020106191e11
181e1212110e1faf2b21210b332129071e3928011030a10b4f4f1e014f1e
601e8f1eaf1e041ebb02e7003a001501894016242136400f093fc036010f
364f366f367f36f0360536b801f74009391e171e390a3adc182b2b103c2b
10f45d712bfde410f45d71ede42b3c2b10c0003fed3feded3f3c10ed10ed
3f3cede4870e2e2b057d10c4182b5d8708103c0e7dc4083cb10602435458
b90000ffc0b2112534002b593130014bb00c534bb025515a58b42d1c311c
00beffe2000affee0035ffec0038ffe238383838383859004bb00c534bb0
25515a58b9002dfff4b231141bbefff6001cffec002affec0000fff63838
383838385900715d01715d4358400f3a01300b300e301e400b450e401e07
015d59012b2b2b005d2b2b01373332171615140623230306070e02232322
2635343633173236373637370623222635343e02333201323e0235342623
2200151416041821c51c090c222170b31130228a604eee1c142121f14786
39200e36afd891c0648eb568d5fe845596784b9c76a7fef99c02c89a080a
10141ffcb951422e6027120f151f01484c2a42fcb9c3996bc58758fcea46
73a355759bfefaa57a9c>CourierNewPS-ItalicMT AddT42Char 
CourierNewPS-ItalicMT /CharStrings get begin
/g 74 def
end
CourierNewPS-ItalicMT /Encoding get
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/MFPVYB+CourierNewPS-ItalicMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 59{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /.notdef /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w 136{/.notdef}rp]
MFPVYB+CourierNewPS-ItalicMT nf
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
210.003 44.1329 mo
(%negative)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 96.9845 mo
(serious_2\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 
4.79922 4.79922 4.79922 4.79921 4.79922 4.79921 4.79922 0 ]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
190.803 96.9845 mo
(%positive)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
84.06 89.0132 mo
84.54 89.0132 li
84.54 88.5333 li
84.06 88.5333 li
cp
f
84.06 89.0132 mo
258.48 89.0132 li
258.48 88.5333 li
84.06 88.5333 li
cp
f
258 89.0132 mo
258.48 89.0132 li
258.48 88.5333 li
258 88.5333 li
cp
f
84.06 100.593 mo
84.54 100.593 li
84.54 100.113 li
84.06 100.113 li
cp
f
84.06 100.593 mo
258.48 100.593 li
258.48 100.113 li
84.06 100.113 li
cp
f
258 100.593 mo
258.48 100.593 li
258.48 100.113 li
258 100.113 li
cp
f
84.06 100.113 mo
84.54 100.113 li
84.54 89.0133 li
84.06 89.0133 li
cp
f
258 100.113 mo
258.48 100.113 li
258.48 89.0133 li
258 89.0133 li
cp
f
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 113.493 mo
(serious_0\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 0 ]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
190.803 113.493 mo
(%negative)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 122.55 mo
(serious_1\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 0 ]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
190.803 122.55 mo
(%negative)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
MFPVYA+CourierNewPSMT*1 [7.98 0 0 -7.98 0 0 ]msf
90 131.608 mo
(serious_3\(id_47443\).)
[4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 
4.79921 4.79922 4.79922 4.79922 4.79922 4.79921 4.79922 0 ]xsh
MFPVYB+CourierNewPS-ItalicMT*1 [7.98 0 0 -7.98 0 0 ]msf
190.803 131.608 mo
(%negative)
[4.79922 4.79921 4.79922 4.79922 4.79922 4.79921 4.79922 4.79922 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/MFPVYA+CourierNewPSMT*1 uf
/MFPVYA+CourierNewPSMT uf
/CourierNewPSMT uf
/MFPVYB+CourierNewPS-ItalicMT*1 uf
/MFPVYB+CourierNewPS-ItalicMT uf
/CourierNewPS-ItalicMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
