%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: DedVoj_ILP.pdf
%%Creator: Adobe Acrobat 8.0
%%For: dedek
%%CreationDate: 8.1.2009, 14:29:21
%%BoundingBox: -431 430 258 689
%%HiResBoundingBox: -430.6930 430.6931 257.8920 688.5851
%%CropBox: -430.6930 430.6931 257.8920 688.5851
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4634 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xap:CreatorTool="Acrobat PDFMaker 8.1 for PowerPoint"
   xap:ModifyDate="2008-09-12T10:47:05+02:00"
   xap:CreateDate="2008-09-12T10:43:08+02:00"
   xap:MetadataDate="2008-09-12T10:47:05+02:00"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:18a6fe36-0718-4d82-bf7a-446271debfda"
   xapMM:InstanceID="uuid:84b62106-0a0b-4114-86dc-836a3531d0e1"
   pdfx:Company="KSI MFF UK">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Jan Ddek</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Slide 1</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 57 
/Lookup <~
p\k'`r;H3`r9sL[m.pPDq"j1JqW.AGiV!!&oD%,3pY#-2f'rC^n+G)roZcdqb3\`@lgi$[o"sY]^Zb1Y
qu#pZqsX@XnG<(Mq>9RSqs=+TlM(/>p\O%Gq<.JIjRr?/p%dP<ptbQ9hXgKqo(Uo0pXes/eaW7]nFb5u
p!N7$d-gPPme"]io??UnaR&N?m.89`o#9qc`p<36lghpXn\FAX^Zk:'kj\~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 31 
/Lookup <~
JC!5.d,Tr1jG_RLOO`KXf&rFQkFC5hT\J_,h!1ipl`B"1Yi4uVipO>;n%@fP_<CF.l12s^o$-OmdI-YW
n+GB(p>,<6iUlp,p%dkHqX+(TnbW.Uqu$9grVc`p~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 31 
/Lookup <~
cgLGPn+G,tp!`F'eaW7_nb1W*p=]$2g[b*ooCq,5pYYW<iUlp)p%d\Aq<%DIkkFr<q"j=OqX"%TmeQbK
qY]m[r:9a_o_\RZr;HBfrV6?jqYgEjrr2lqrr2rt~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -688.585 translate
pgsv
[0 1 -1 0 257.892 0 ]ct
gsave
np
gsave
0 0 mo
0 688.585 li
257.892 688.585 li
257.892 0 li
cp
clp
[1 0 0 1 -147.392 0 ]ct
false sop
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f320cdf326b000000cc000000566376
7420962ad27600000124000006306670676dcc79599a000007540000066e
676c7966cf4bb60500005350000052d468656164ce98269200000dc40000
003668686561123312ff00000dfc00000024686d74780e34584000000e20
00001a286c6f63610208345c0000284800001a2c6d6178700b470ca80000
4274000000206e616d65c15c100a00004294000005bb7072657052fec4e9
0000485000000aff67646972000000000000000000000000000103880190
00050000059a05330000011b059a0533000003d1006602120805020b0604
02020202020400007a878000000000000008000000004d6f6e6f00400020
fffc05d3fe510133073e01b2400001ffffff0000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b4043555441403f3e3d3c3b3a3938
373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19
1817161514131211100f0e0d0c0b0a090807060504030201002c45234660
20b02660b004262348482d2c452346236120b02661b004262348482d2c45
234660b0206120b04660b004262348482d2c4523462361b0206020b02661
b02061b004262348482d2c45234660b0406120b06660b004262348482d2c
4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b0
4d44235920b09051582320b00d44235921212d2c20204518684420b00160
2045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b432343
0b2d2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45
b01a234445b01923442d2c2045b00325456164b050515845441b2121592d
2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0
0743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364
615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb017
23442d2cb01243588745b0112bb0172344b0177ae41b038a45186920b017
23448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae4595918
2d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b001
85592d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b8022323701020b802234520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b004
25b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b
2043b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc0385959
5959212121212d2c462346608a8a462320468a608a61b8ff806223201023
8ab902c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b94000020063b804
00885458b202400243604259595959592d2cb0024354584b53234b515a58
381b2121591b21212121592d0000000100000003000059fa5a6f5f0f3cf5
081b080000000000a2e3272a00000000b9d5b4f6faaffd671000080c0000
0009000100010000000000010000073efe4e00431000faaffe2610000001
0000000000000000000000000000068a0600010000000000023900000239
0000023900b002d7005e0473001504730049071d0077055600580187005a
02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba0239
000004730055047300df0473003c047300560473001a047300550473004d
047300610473005304730055023900b9023900aa04ac007004ac007204ac
00700473005a081f006f0556fffd0556009605c7006605c7009e055600a2
04e300a80639006d05c700a4023900bf04000037055600960473009606aa
009805c7009c063900630556009e0639005805c700a10556005c04e30030
05c700a105560009078d0019055600090556000604e300290239008b0239
00000239002703c100360473ffe102aa00590473004a0473008604000050
047300460473004b02390013047300420473008701c7008801c7ffa20400
008801c7008306aa00870473008704730044047300870473004802aa0085
0400003f02390024047300830400001a05c700060400000f040000210400
002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c70068
055600a205c7009c0639006305c700a10473004a0473004a0473004a0473
004a0473004a0473004a040000500473004b0473004b0473004b0473004b
023900bd023900230239ffe5023900090473008704730044047300440473
004404730044047300440473008304730083047300830473008304730049
033300800473006b0473001b0473005102cd006d044c000104e3009905e5
000305e50003080000e102aa00de02aa003d0464004e0800000106390053
05b4009a0464004e0464004d0464004d0473fffd049c00a003f4003805b4
007a069600a1046400000231000002f6002f02ec002d0625007f071d0044
04e3008104e3009e02aa00e804ac0072046400540473002e0464003304e5
001a047300860473008c080000ef0556fffd0556fffd0639006308000081
078d00520473fffc0800000002aa005302aa004701c7008001c7006c0464
004e03f4002f04000021055600060156fe390473ffe402aa005c02aa005c
040000170400001704730049023900b901c7006c02aa0047080000250556
fffd055600a20556fffd055600a2055600a20239008d0239ffe002390004
0239001506390063063900630639006305c700a105c700a105c700a10239
00c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa006b
02aa003a02aa00b702aa00280473000001c700030556005c0400003f04e3
002904000028021400bc05c7fffd0473004905560006040000210556009e
0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b06ac
006b06ac0021047300000639006d04730042023900b10556005c0400003f
05c700660400005005c700660400005004730046046bffe102aa01f10556
fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd055600a2
0473004b055600a20473004b0473009601c7004204730096025500880473
009a02ac008305c7009c0473008705c7009c047300870639006304730044
05c700a102aa008505c700a102aa003c0556005c0400003f04e300300239
002404e300300300002305c700a10473008305c700a10473008304e30029
0400002804e3002904000028046800a4063900600662005504a000480474
00480391006204f000440329002e05300048046bffe1040000b002eb0052
08c000330800004f040000990800004f040000990800004f040000980400
009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d50105
05abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e05ab
ffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905ab02d6
05ab006605abffea05d5ffff04d500920800000007eb013007eb012007eb
013007eb012004d500b204d5008004d5002a082b0198086b01b807550010
060000f40600006f0440003a0540003704c0003f04150040040000250600
005505e100bf038d008904d5ffd90180008002d50086071500610296000f
04d5009202d6008302d6008304d500b202d600700556fffd0473004a05c7
00660400005005c7006604000050055600a20473004b055600a20473004b
055600a20473004b0639006d047300420639006d047300420639006d0473
004205c700a40473008705c7001f047300060239ffce0239ffce0239ffe4
0239ffe40239fff60239fff5023900a301c700660400003701c7ffa20556
009604000088040000860473009601c7fffa05c7009c0473008705c900a5
0473008b0639006304730044063900630473004405c700a102aa006b0556
005c0400003f04e300300239000c05c700a10473008305c700a104730083
05c700a10473008305c700a104730083078d001905c70006055600060400
002101c700890556fffd0473004a08000001071d00440639005304e30081
023900b9078d001905c70006078d001905c70006078d001905c700060556
00060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac0022
06ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff0646
ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556fffd
055600960558fffe055600a204e3002905c700a4023900bf055600960558
000b06aa009805c7009c0533006d0639006305c700a40556009e04f20094
04e30030055600060556000906af007f05fb0061023900040556000604a0
0048039100620473008b01c7006b04600088049a008c0400001903870048
0473008b0473005c01c700890400008604000018049c00a00400001a0395
005c04730044048d008303db0056046000880433001105b4007a063f0057
01c7ffc9046000880473004804600088063f0057055700a206eb00320455
00a105c000640556005c023900bf02390004040000370875000d081500a4
06d5003104a900a10515000a05c000a00556fffd054000a7055600960455
00a1056b0000055600a20763000704d5004e05c000a105c000a104a900a1
0540001206aa009805c700a40639006305c000a00556009e05c7006604e3
00300515000a061500520556000905eb009f05550057075500a1078000a1
06550000071500a8054000a505c00055081500a405c7001a0473004a0495
005b0440008802eb008804ab00000473004b055afffb03ab003204780087
047800870380008604ab00180580008c046b008804730044045500880473
00870400005003aa0026040000210695004b0400000f0495008a042b0045
066b008d0695008d0500002805c0008b042b008404150030060000890455
001f0473004b0473000002eb00890415004b0400003f01c7008802390009
01c7ffa20740001306800083047300000380008604000021046b008803e9
00a1034a008808000041089500a00585002d02aa010102aa001e02aa0031
02aa003102aa010102aa007e02aa007e02aa008c02aa008c02aa010102aa
001002aa010102aa01210310007d02aa008c023300d202aa030b02aaff04
023900b90481006904560032033100190411002d04d1009601f9009b030f
005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca009b
04cf005001f9009b02d2003c0498005a043c00190488006e045f007303b1
001903d4000a0466009604130028058e00640524002803f2009b03f2009b
03f2009b01e3005a0356005a0686009b01f9ffac041300280413002803b4
ff5703b4ff570448002d058e0064058e0064058e0064058e006404810069
048100690481006904560032033100190411002d04d10096024b0000034a
000004b8008c024b00000413002803b0005003b4003c04cf005002d2003c
0498005a0488006e045f007303d4000a0466009604130028058e00640524
002801f9009b0456003203b00050045f0073049b003c0000ffdc0000ff25
0000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba019c
004601e50046019c0046019c004601ad0048019c004601b1004601510046
0435017c0435012e043500b7043500810435012c043500be043500af0435
00810435009a043500db04350085028d00c1043500b30600010006000100
02420036060001000435009e04350098043500cb06000100060001000600
0100060001000600010001b1004606000100060001000600010006000100
06000100060001000600010006000100051bffba06000100060001000600
010005b5003a05b5003a01f4ffba01f4ffba060001000600010006000100
060001000481003604350036043dffba043dffba03e9004a03e9004a067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
051b003204b5002406000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010001cf003001b1004601b1004601b1004001b1
004606000100060001000000ffdc0000fe510000ff160000ff160000ff16
0000ff160000ff160000ff160000ff160000ff160000ff160000ffdc0000
ff160000ffdc0000ff200000ffdc0473004a080000000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100060001000600010006000100028d007f028d005d0600010004ee0015
034d007901a8000e01d6ffdc01a8005601d60010037500320375003201a8
002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d60013
05b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3005f
03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5ffba
06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba04a7
ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a0036
0435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027064f
00270224ffba021affba04a7004604a700460224ffba021affba04cf002d
04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba02b4
002302b400230327ffba0327ffba043500450435004501f4ffba01f4ffba
024200360300fff7039affba0327ffba0375003203750032051b003204b5
0024051b003204b5002401f4ffba01f4ffba045a004004ce0049045a0026
04ce0039045a005304ce004a045a005304ce004a0600010006000100019c
0046019c00460600010006000100060001000151004601b1004606000100
0600010001ad004801e5004606000100060001000600010001b1004601b1
004601b1004601b1004601b1004001cf003006000100019c0046019c0046
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100028d00ca028d00c7028d00c6060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100060001000100ffba0800
ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000fc2f
0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd110000
fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b00a0
06ac006b06ac00190000feb60000fd730000fe080000fca60000fe530000
fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000fcf1
0000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc20000
fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000fc90
0000fd150000fc2c0000fc130000fc120000fb960000fb9601c700880556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b055600a20473004b
055600a20473004b0239006301c7001f023900ba01c7007c063900630473
004406390063047300440639006304730044063900630473004406390063
047300440639006304730044063900630473004406dc0063053f004406dc
0063053f004406dc0063053f004406dc0063053f004406dc0063053f0044
05c700a10473008305c700a10473008306d500a1055b008306d500a1055b
008306d500a1055b008306d500a1055b008306d500a1055b008305560006
04000021055600060400002105560006040000210556fffd0473004a0239
ffe201c7ffb0063900630473004405c700a10473008305c700a104730083
05c700a10473008305c700a10473008305c700a1047300830000fefe0000
fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a900a1
0380008604a900a10380008605c700a4046b00880473fffd040000140473
fffd04000014055600090400000f05550057042b0045055500a104730087
0605006304730055063900600473004405b5003a01f4ffba0224ffba021a
ffba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4fff9
0227ffce01a8000f01a8fff502aa00a402aa00a401a8000e01a8005601a8
00560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6fff5
01a8009301d6001303750032037500320375003203750032051b003204b5
002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba048100360435
0036043dffba043dffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b3003202b3
003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b30038
02b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba043f
ffba0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5
ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327ffba
064f0027064f0027064f00270224ffba021affba064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba04a7004604a7
004604a7004604a70046067f0014077600140327ffba041effba067f0014
077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba04cf
002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba040d0047040d004701a8
ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba043500450435
004501f4ffba01f4ffba0435004504350045043500450435004504350045
0435004501f4ffba01f4ffba04350045043500450481003604350036043d
ffba043dffba024200360300fff7031a001a031a001a031a001a03750032
037500320375003203750032037500320375003203750032037500320375
003203750032037500320375003203750032037500320375003203750032
051bffba04b5ffba051b003204b5002401f4ffba01f4ffba037500320375
0032051b003204b5002401f4ffba01f4ffba051b003204b50024067f0045
067f0045067f0045067f004501a800280000fe290000fea20000ff300000
ff1d0000ff120000ff920000fe7e08fc003208ad00320000ffb50000ffb6
0000feed0000ff640000fe7e0000ff9f018d000002f6fffd0000fe820000
ff1004cd00320000ff580000ff580000ff640692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a00360435
ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4002f
01f4003b01f4001201f400b101f4006d067f00140776001401f9009b0000
fed902bc000003f2009b045afff504cefff5045a005304ce004a045a0053
04ce004a045a005304ce004a045a005304ce004a045a005304ce004a045a
005304ce004a04350071043500ad045a000f04ce000f000000000000002a
0000002a0000002a0000002a0000002a0000002a0000002a0000002a0000
002a00000214000002140000021400000214000002140000027c000002f4
000002f4000002f4000002f4000004b00000058c000007b6000007b60000
07b6000007b6000007b6000007b600000a4a00000a4a00000a4a00000a4a
00000a4a00000a4a00000a4a00000a4a00000a4a00000bf400000bf40000
0d2e00000e7600000f3a00000f3a000010ca000011d0000012b40000139c
0000139c0000142600001426000014260000155a00001660000016600000
18cc00001b7600001c2400001d4800001ebc000020fa000020fa000020fa
000020fa000020fa000020fa000020fa000020fa000020fa000020fa0000
23cc000025aa0000275e0000291200002ad000002c2400002e1400002fb8
000030ac000031c40000345c00003558000037880000394e00003b100000
3cd400003cd400003dda00004182000042a6000044440000466200004acc
00004cf000004f4800005130000051300000513000005130000051300000
513000005130000051300000513000005130000051300000513000005166
000051660000516600005166000051660000516600005166000051660000
516600005166000051660000516600005166000051660000516600005166
000051660000516600005166000051660000516600005166000051660000
5166000051660000516600005166000051660000516600005166000051b2
000051b2000051b2000051b2000051b2000051b200005234000052340000
523400005234000052340000523400005234000052340000523400005234
000052340000523400005234000052340000523400005234000052340000
523400005234000052340000523400005234000052340000523400005234
000052340000523400005234000052340000523400005234000052340000
523400005234000052340000523400005234000052340000523400005234
000052340000523400005234000052340000523400005234000052340000
523400005234000052340000523400005234000052340000523400005234
000052340000523400005234000052340000523400005234000052340000
523400005234000052340000523400005234000052340000523400005234
000052340000523400005234000052340000523400005234000052340000
523400005234000052340000523400005234000052a0000052a0000052a0
000052a0000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d4000052d4000052d4000052d4000052d4000052d4000052d4000052d4
000052d4000052d4000052d4000052d4000052d4000052d4000052d40000
52d400010000068a0100003f0076000700020010002f00560000040d0aff
000300020000000e00ae000000030000000000fe00000000000300000007
00c400fe0001000000000000007f01c20001000000000003000e02410001
000000000004000e024f0001000000000006000e025d0001000000000007
0062026b000300010409000000fe02cd0003000104090001001c03cb0003
000104090002000e03e70003000104090003001c03f50003000104090004
001c04110003000104090006001c042d000300010409000700c404490054
0079007000650066006100630065002000a900200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e00200070006c0063002e002000440061007400610020
00a900200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e00200070006c0063
002f005400790070006500200053006f006c007500740069006f006e0073
00200049006e0063002e00200031003900390030002d0031003900390032
002e00200041006c006c0020005200690067006800740073002000520065
0073006500720076006500640041007200690061006c00ae002000540072
006100640065006d00610072006b0020006f006600200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e00200070006c0063002000720065006700690073
0074006500720065006400200069006e0020007400680065002000550053
00200050006100740020002600200054004d0020004f00660066002e0020
0061006e006400200065006c0073006500770068006500720065002e5479
70656661636520a920546865204d6f6e6f7479706520436f72706f726174
696f6e20706c632e204461746120a920546865204d6f6e6f747970652043
6f72706f726174696f6e20706c632f5479706520536f6c7574696f6e7320
496e632e20313939302d313939322e20416c6c2052696768747320526573
6572766564444541434e452b417269616c4d54444541434e452b41726961
6c4d54444541434e452b417269616c4d54417269616ca82054726164656d
61726b206f6620546865204d6f6e6f7479706520436f72706f726174696f
6e20706c63207265676973746572656420696e2074686520555320506174
202620544d204f66662e20616e6420656c736577686572652e0054007900
7000650066006100630065002000a900200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e00200070006c0063002e00200044006100740061002000a900
200054006800650020004d006f006e006f00740079007000650020004300
6f00720070006f0072006100740069006f006e00200070006c0063002f00
5400790070006500200053006f006c007500740069006f006e0073002000
49006e0063002e00200031003900390030002d0031003900390032002e00
200041006c006c0020005200690067006800740073002000520065007300
6500720076006500640044004500410043004e0045002b00410072006900
61006c004d00540052006500670075006c00610072004400450041004300
4e0045002b0041007200690061006c004d00540044004500410043004e00
45002b0041007200690061006c004d00540044004500410043004e004500
2b0041007200690061006c004d00540041007200690061006c00ae002000
540072006100640065006d00610072006b0020006f006600200054006800
650020004d006f006e006f007400790070006500200043006f0072007000
6f0072006100740069006f006e00200070006c0063002000720065006700
6900730074006500720065006400200069006e0020007400680065002000
55005300200050006100740020002600200054004d0020004f0066006600
2e00200061006e006400200065006c007300650077006800650072006500
2e00b1540f4122031700ef031700ff03170003001f0317002f0317004f03
17005f0317008f0317009f03170006000f0317005f0317006f0317007f03
1700bf031700f00317000600400317b2923340b80317b28b3340b80317b3
6a6c3240b80317b2613340b80317b35c5d3240b80317b357593240b80317
b34d513240b80317b344493240b80317b23a3340b80317b331343240b803
17b32e423240b80317b3272c3240b80317b312253280b80317b30a0d32c0
4116031600d00316000200700316000102c4000f0101001f00a0031500b0
031500020306000f0101001f00400312b32426329fbf0304000103020301
0064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001f
ffc002edb30e11329f414a02e200af02e200bf02e2000302e202e202e102
e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02
e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd005f02
dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc00
01001002dc003f02dc000202dc02dc001002db000102db02db000f02da00
0102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f25
32b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb802e3b3
202b1fa0413002d400b002d40002000002d4001002d4002002d4005002d4
006002d4007002d40006006002d6007002d6008002d6009002d600a002d6
00b002d60006000002d6001002d6002002ca002002cc002002d6003002d6
004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02c700
17001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02c902
c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002c700
2f02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f02bf
004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca0800
001f02b200e90800001f02a600a20800406a1f4026434932402043493240
263a3d3240203a3d329f209f26024026969932402096993240268e923240
208e92324026848c324020848c3240267a813240207a813240266c763240
206c76324026646a324020646a3240265a5f3240205a5f3240264f543240
204f5432b8029eb724271f374f6b0120410f027700300277004002770050
0277000402770277027700f90400001f029bb22a2a1fb8029a402b292a1f
80ba0180bc0180520180a201806501807e01808101803c01805e01802b01
801c01801e0180400180bb0138000100800140b40180400180bb01380001
0080013940180180ca0180ad018073018026018025018024018020013740
b80221b2493340b80221b2453340b80221b341423240b80221b33d3e320f
410f0221003f0221007f0221000300bf022100cf022100ff022100030040
0221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e3a32
6f414802c3007f02c3008f02c300df02c30004002f02c3006002c300cf02
c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600
df02220001008f02220001000f0222002f0222003f0222005f0222007f02
2200ef0222000600bf022100ef02210002006f0221007f022100af022100
03002f0221003f0221004f0221000302c302c30222022202210221401d10
1c102b1048038f1c010f1e014f1eff1e023700161600000012110811b801
0db6f70df8f70d00094109028e028f001d001f0290028f001d001f028fb2
f91d1fb80198b226bb1f41150197001e0401001f013900260125001f0138
00730401001f0135001c0801001f0134001c02ab001f0132b21c561fb801
0fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd7
20b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b2
1fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26b801
9ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52
265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f35
1cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231e
b80401b21f5537b80168402c07960758074f07360732072c0721071f071d
071b071408120810080e080c080a080808060804080208000814b8ffe040
2b0000010014061000000100060400000100041000000100100200000100
0200000001000002010802004a00b013034b024b5342014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52
b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb101
018e851bb0124358b900010111858d1bb900010128858d5959001816763f
183f123e113946443e113946443e113946443e113946443e11394660443e
11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b
1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901f201
f04544b901f101f045445958b9033e01f2455258b901f2033e4459594bb8
015653205c58b9002001f14544b9002601f145445958b9081e0020455258
b90020081e4459594bb8019a53205c58b9002501f24544b9002401f24544
5958b909090025455258b9002509094459594bb8040153205c58b1732445
44b1242445445958b917200073455258b9007317204459594bb804015320
5c58b1ca254544b1252545445958b9168000ca455258b900ca1680445959
4bb03e53205c58b11c1c4544b11e1c45445958b9011a001c455258b9001c
011a4459594bb05653205c58b11c1c4544b12f1c45445958b90189001c45
5258b9001c01894459594bb8030153205c58b11c1c4544b11c1c45445958
b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
2b01b33b59635c456523456023456560234560b08b766818b080622020b1
63594565234520b003266062636820b003266165b059236544b063234420
b13b5c4565234520b003266062636820b003266165b05c236544b03b2344
b1005c455458b15c406544b23b403b4523614459b3475034374565234560
23456560234560b089766818b080622020b134504565234520b003266062
636820b003266165b050236544b034234420b147374565234520b0032660
62636820b003266165b037236544b0472344b10037455458b137406544b2
4740474523614459004b5342014b5058b108004259435c58b108004259b3
020b0a124358601b2159421610703eb0124358b93b21187e1bba040001a8
000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400000b2b
59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59b010
2342b0112342002b74757375001845694445694445694473737373747573
74752b2b2b2b74752b2b2b2b2b7373737373737373737373737373737373
73737373737373732b2b2b45b0406144737400004bb02a534bb03f515a58
b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ffc0604459
004bb02e534bb03a515a58b1030345b040604459004bb02e534bb03c515a
58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b75
2b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e4b5402
b0124b545ab012435c5a58ba009f02220001007359002b7473012b01732b
2b2b2b2b2b2b2b737373732b002b2b2b2b2b2b0045694473456944734569
44737475456944734569444569444569447374456944456944732b2b2b2b
2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b0000>
[15573 5633 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> PBAAAA+ArialMT AddT42Char 
1 3060 38 <00010066ffe7057605d3001d00d3b563026a1d0201b8ffe8b40b0b065500
b8ffe8405f0b0b06552000320d63007000741d8000841d90009a05ab03a5
0db903b40dc70dd000e41df31d110e121d111d1d032a0628112a1c201f47
0d56145715561968056b1d7b128b129a03990e9a1ca801a402a811d50e13
0014001a1014101a0402b8ffdeb2283901b8ffc0402d2839100f0001041b
131e0c031b1e040910260f4a0026200101011a1f1726200801080c0b0b06
5508191e635c182b4e10f42b5d4ded4e10f65d4dedf4ed003fed3fed1117
393130012b2b5d5d71005d2b2b0172011706042322240235341224333204
17072626232206021514121633323604b4c23dfec3e5edfed79baf0143c2
dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155b1e0
cb2da092a2feef91bbfee98abc00>PBAAAA+ArialMT AddT42Char 
1 3702 40 <000100a2000004e805ba000b0095401506051e080807070003041e020102
0a091e0b000807b8ffc0401d1012340754034a200a200d020a1a0d040920
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffab40c0c025500b8fffab40c0c065500b8fff0400a0d0d0655005d0c3b
5b182b4e10f42b2b2b2b2b2b5d3c4dfd3c4e10f65d4df4e42b003f3cfd3c
3f3cfd3c12392f3c10fd3c3130331121152111211521112115a20424fc9e
032bfcd5038405baadfe3facfe0dad00>PBAAAA+ArialMT AddT42Char 
1 5158 50 <00020063ffe705dd05d4000e001b00ca40501a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b09152620070107b8ffe8b41010025507b8ffeeb40d0d025507b8fff0b4
0c0c025507b8ffeab40b0b065507b8fff4b40d0d065507b8fffa40210c0c
0655071a801d011d0f2620000100060b0b065500060c0c065500191c635c
182b4e10f42b2b5d4ded4e105df62b2b2b2b2b2b5d4ded003fed3fed3130
015d71005d5d5d7113100021320412151402042322240237100033320011
3402262322006301880136cb0146abb4feb6bfcffebaa8c8011dd7db011b
79e991cefed702ca016d019dc2fea5dcdffea0b5c8015abefef7fecf0134
011bb3010b93fee5>PBAAAA+ArialMT AddT42Char 
1 10514 72 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>PBAAAA+ArialMT AddT42Char 
1 10960 73 <000100130000028005d30017010d401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040281a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff134004172504000302920101
00b8ffc0b331383400b8ffc0402b1c1f3490000119400f0f025519400d0e
025500141010025500280f0f025500220e0e0255002c0d0d025500b8fff2
400b0c0c025500140b0b065500b8ffeab41010065500b8ffe6b40f0f0655
00b8fffab70c0c065500a31819bc01ba002100f6010a00182b2bf62b2b2b
2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced10eded5d003f3f3c3c3cfd3c
3fed391139313043794014101106090706080602061009121b0011060f1b
012b012b2a8181012b715d00723311233533353437363633321707262322
06151533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b3446
57129d0a4660628cfc66>PBAAAA+ArialMT AddT42Char 
1 12216 76 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>PBAAAA+ArialMT AddT42Char 
1 13656 80 <0001008700000626043e002301c7b9000dfff4b40d0d065508b8fff4b40d
0d065509b8ffd8404d0b0d342504e404e409e117e52005d505f620021708
202309181b20090303231e1c06151c0b0b06070106231a19100ad0250190
25a025022517171a0e2590110111041010025511180f0f025511b8ffec40
0b0e0e025511140c0c025511b8ffe840170b0b025511020b0b0655110c10
10065511060f0f065511b8fffab40c0c065511b8fff8b40d0d065511b801
5d400c1825901b011b180f0f02551bb8ffec400b0e0e02551b140c0c0255
1bb8ffee40110b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d
06551b0c0f0f06551bb8fffcb40c0c06551bb8015d4016000233232501d0
00019000a000021f003f004f000300b8fffe401d0e0e025500100d0d0255
00100c0c0255000c0b0b025500160b0b065500b8fffcb41010065500b8ff
f440140f0f0655000a0c0c0655000e0d0d065500192425b80178b3214750
182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c4dfde410f42b2b2b2b2b2b2b
2b2b5dedf42b2b2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f
3f3c4d10ed10ed11173901111239123931304379400e0c141326140c111b
01120d151b01002b012b2b81015d005d2b2b2b3311331536363332161736
3332161511231134262623220615112311342623220606151187a132a66a
76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258baafb6fd
27029d6c5f3a95a4fd9702b27878509a91fdd900>PBAAAA+ArialMT AddT42Char 
1 14216 81 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>PBAAAA+ArialMT AddT42Char 
1 14670 82 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>PBAAAA+ArialMT AddT42Char 
1 15120 83 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>PBAAAA+ArialMT AddT42Char 
2 0 85 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>PBAAAA+ArialMT AddT42Char 
2 262 86 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>PBAAAA+ArialMT AddT42Char 
2 1198 87 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>PBAAAA+ArialMT AddT42Char 
2 1490 88 <00010083ffe803e004260018014fb9001affc0400915173402201316340f
b8fff040331214342b1301240813160c0113160b06000a111c030b003316
251817403336341a401010025517281010025517120e0e025517b8ffec40
0b0d0d025517040c0c025517b8fff4400b0b0b065517141010065517b8ff
f8400b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c0170117
4e1ab8ffc04015343634b01af01a02701aa01ab01aff1a041a0c2509b8ff
c04010333634f0090100092009d009e0090409b8fff8b41010025509b8ff
f840110e0e025509040c0c0255090a0b0b065509b8fff640160f0f065509
020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b2b2b5d712b
ed105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfde4003fed3f3f3c3939
0111123931304379401a04100e0d0f0d0206070806080508030610040c1b
000d08111b00002b012b2a2a81005d012b2b2b2135062322262627263511
3311141716163332363635113311033f7cd55ea34f100bb40b116e51518e
3bb49cb4486d4f35730292fdb38d314751538f880239fbda>PBAAAA+ArialMT AddT42Char 
2 3576 91 <0001000f000003f10426001001dcb1020243545840150f010b0604020906
02060d0a000a0f180f0f02550f2f2b003f3f3f3f11173931301bb70f1201
0f22193906b8ffde405019395a0f96049608990e9a0fc005c006c007cb0f
090f4016391a031309150d1a1035013a0b81018e0b082f1257045907590b
580e9701980a980bb702b80cc80bca0ecc10da03d509d10ddb10e50a1212
b10602435458400b0c0012110f180d10065506b8ffe8400e0d1006550f06
00020d000a0a0206003f3c3f3c111239392b2b01111239391b4066060603
0708090901060609050403030b0f0f100e0d0d010f0f0d100b010009020d
0b030c100a060f020f0a10c600c60902102500091400000903020dc60d01
0d250c03140c0c030a090903030206100d0d0c0c000a4f120112490d7e0c
220a0f6106097e400ab8011bb74006500680060306b80243400e20037e02
224f00010049117cc4182b10f65df4ed1a19fd5dfd1a18ed10e510f4ede6
5d003f3c103c103c3f3c103c103c87052e2b5d877dc4872e182b5d7d10c4
00111239390f0f8708c4870e10c408c4870e10c4c408c4070e103c3c083c
59313001435c58b40e181d390bb8ffde400b1d390c221739032217390bb8
ffdeb2213910b8ffc0400a15390122213909401c392b2b2b2b2b2b2b2b59
5d71002b5d2b2b015d5933010133171617363737330101230327010f0184
fe99e1a32e1c2c25b3d7fe91018bddda3afee9022801fef947304233fbfe
0cfdce014a59fe5d>PBAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/space 3 def
/C 38 def
/E 40 def
/O 50 def
/e 72 def
/f 73 def
/i 76 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/x 91 def
end
PBAAAA+ArialMT /Encoding get
dup 32 /space put
dup 67 /C put
dup 69 /E put
dup 79 /O put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
pop
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /.notdef /E 9{/.notdef}rp /O 
21{/.notdef}rp /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -40.02 -40.02 0 0 0 ]msf
77.46 588.565 mo
(Context of Our Experiments )
[-28.8984 -22.2551 -22.2551 -11.1295 -22.2551 -20.014 -11.1296 -11.1255 -22.2551 -11.1295 -11.1255 -31.1396 
-22.2551 -13.3304 -11.1256 -26.6976 -20.014 -22.2552 -22.2551 -13.3304 -8.88843 -33.3404 -22.2551 -22.2551 
-11.1296 -20.014 0 ]ysh
81.72 588.565 mo
84.6 588.565 li
84.6 94.765 li
81.72 94.765 li
cp
f
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 42 9 <00030058ffde052705d3001f002c0036013d40c87a15721672177a2e7a2f
8616a62fdd0008961da31602892f833602831c842102b416016017612102
161540166a0003aa1eda1602731c731d02751a721b0275007b16028a1783
1b02a915ae1602831e8a20028a0a831c02cb20c62702cd16c21b02ba1ac6
14026936ba16026917653302652f0156335c360246335a1f024d16421b02
301a391f02261b242002002d2d1e2d2e0a0a001b16161d152016162020ba
0a2d140a0a2d2629100134291e3a030b1b861d235e60137013a013032f13
40130213dc1d8f180118b8025a401c193e1e72201d011d3838295ea00d01
0da0315e200701076a377198182b10f65dedf45ded10f45de4f4ed5d10f4
5d5ded10e4003fe4ed3fed870e2e2b0e7d10c4070e3c870e10c4070e103c
3c870e10c43130015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d005d5d
5d5d5d5d5d25060623222726353436372626353436333216151405013637
170607161707260136363534262322061514161701010606151416333236
03cd59d27ae1846bafae6342cf9d96bffeeb01072d19bb30526580796dfe
1e75455f4749612323014dfeb692668e8251adad6363987c9988db53728e
4284c3b881d194feb1587428c07c865b8f46038545683f4b5f5e44224b2a
fd35019957954959c065>PBAAAA+ArialMT AddT42Char 
1 3374 39 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>PBAAAA+ArialMT AddT42Char 
1 6348 54 <0001005cffe704eb05d30030021540276303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e23b8fff2b410
10025524b8fff2b41010025525b8fff2b41010025526b8fff2b410100255
27b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525b8ff
f6b40d10025526b8fff6b40d10025527b8fff640460d100255280d262402
24032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b
7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f9615
1eb10602435458402d2126121b261a09262901260000291a120432312600
650002000d2d791b891b021b25160d2d1e27250125051605b8fff4400c0c
0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d1112
395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e1b08
070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011aed16
002d01b8ffc040120c0c02551001200150016001700190010601b801b040
132d1e1e1603051e2d091b261a4a092600290129b8ffeab40e0e025529b8
fff4400d0c0c0255291a32212612012612b8ffecb40e0e025512b8fff6b4
0d0d025512b8fff8400f0c0c02551254200001001931635b182b4e10f45d
4de42b2b2bed10ed4e10f62b2b5d4dedf4ed003fed3fed10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d7113371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>PBAAAA+ArialMT AddT42Char 
1 7868 58 <000100190000077605ba001801db40262900261129122618390036113912
361849004711491247185800571158125718109808980f02b10602435458
403310011a192b153405340c4405440c4b155405540c5b156405640c6b15
7405740c7b150f05150c030001120800080f0208020102003f3f3f3f3f11
1217395d01111239391b401e030405050206070808050a0b0c0c090d0e0f
0f0c14131212151617181815b8ff3cb305001820b8ff3cb30c121120b8ff
3c405a150809200005020220010014010100180508081e15181415151812
0c09091e151214151512110c0f0f2010111410101112090c081815050f11
100c000205150c050318100f0f0909080802020102181212111100081a17
171a10410901510020000c015100150151004000050151b6202001010119
19b8018bb1a8182b4e10f45d1a194dfd1a18fdfd1a19fd184e456544e600
3f3c103c103c3f3c103c103c103c103c1217390112393911123939111239
39113939874d2e2b877dc4872e182b877dc4872e182b877dc4872e182b87
7dc42b2b2b870e10c4c4870e103cc4870e10c4c4870e10c4c4870e10c4c4
870e10c4c4014bb00f534bb011515a58b2120a18b8fff6383859014bb025
534bb02a515a58b90000ffc03859004bb00b534bb00e515a58b30c400540
38385959313001725d210133131617363701331312173637133301230126
27060701019efe7bc7df241a380a0117ead24f231c2de6c3fe6ebbfecb27
071714fec905bafc3f9795eb2403defd1afeecf38bb403aefa46045d8c20
6547fba3>PBAAAA+ArialMT AddT42Char 
1 8442 68 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>PBAAAA+ArialMT AddT42Char 
1 9164 69 <00020086ffe8041f05ba0010001d0180409b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b1824d00b01100b400b60
0b800b041f400d0d02550b0c0f0f02550b180d0d02550bb8fff6b40c0c02
550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ffe0b40c0c06550bb8
fff4402f0d0d06550b7401113300040c0c025500040d0d06550033032502
02c001019001a001b001f001041f013f014f010301b8fffeb41010025501
b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b0255010c0b
0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c06550114
0d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71723c4d10
fdf42b2be410fd2b2b2b2b2b2b2b2b5d71ed003fed3f3fed3f1139111239
3130005d015d7172007121231133113633321e0215100023222703141716
333236353426232206012da7b472b162af7140fef2bdbc6b0234559176ac
a57576ac05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>PBAAAA+ArialMT AddT42Char 
1 9642 70 <00010050ffe803ed043e001a015ab1020243545840340e7f0f010f0b0140
0050007000030004121c0b07181c040b010e1507080e0e0255070c0d0d02
55070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d
3210c45d3231301b4047090c011f1c4313431753135317601360179b029b
039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60a
b50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa407930004000
5000600070009000a000e000f00009000f0f0b000004121c0b07181c040b
1c0f010f240e080d0d06550e221b000100240b2b1f010100010101400b0b
065501401010065501480c0c0655011a0d0d065501491c1524cf07011f07
3f0702070e0b0b0655070a1010065507120c0c065507311b34c4182b10f6
2b2b2b5d71ed10f62b2b2b2b5d724b53234b515a58b90001ffc03859ed72
f42bed72003fed3fed12392f11392f105de4105de43130005d71015d7159
011706062322001134123633321617072626232206151416333236033cb1
1defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf011d01
0aac010281afa11b6b6cc3d3d6c28200>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/ampersand 9 def
/D 39 def
/S 54 def
/W 58 def
/a 68 def
/b 69 def
/c 70 def
end
PBAAAA+ArialMT /Encoding get
dup 38 /ampersand put
dup 68 /D put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 28{/.notdef}rp /C /D /E 
9{/.notdef}rp /O 3{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a 
/b /c /.notdef /e /f 2{/.notdef}rp /i 3{/.notdef}rp 
/m /n /o /p /.notdef /r /s /t 
/u 2{/.notdef}rp /x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -33 -33 0 0 0 ]msf
118.74 655.286 mo
(Semantic Web & Semantic Data Extraction)
[-22.0113 -18.348 -27.4888 -18.348 -18.348 -9.17401 -7.32599 -16.5 -9.15088 -31.152 -18.348 -18.348 
-9.15091 -22.0113 -9.15088 -22.0113 -18.348 -27.4887 -18.348 -18.348 -9.17401 -7.32599 -16.5 -9.15091 
-23.826 -18.348 -9.17407 -18.348 -9.15088 -22.0113 -16.4999 -9.17401 -10.9888 -18.348 -16.5 -9.17401 
-7.32599 -18.348 0 ]ysh
122.22 655.285 mo
124.56 655.285 li
124.56 28.045 li
122.22 28.045 li
cp
f
283.35 657.895 mo
361.35 657.895 li
361.35 580.075 li
283.35 580.075 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
361.38 657.925 mo
361.38 580.045 li
283.32 580.045 li
283.32 657.925 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
gsave
clp
[0 -1 -1 0 835.977 257.892 ]ct
[77.88 0 0 78.06 -400.033 474.597 ]ct
<<
/T 1
/W 180 
/H 180 
/M[180 0 0 -180 0 180 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
JcNOc!s8N%JF3C>?iU/Qmf3=irr2upp&Oph!!iK&mf3>PrVllUn,NH<rVllenGiOkr;QclnGiOor;Qcp
nGiP"r;QftJFW[?+8c'<JFW[?5PtH\i:6jJJ,B6G_"%L%rrDQZ!;c]qnFlq]!!!&rrrDic!!!&rrrDug
!!!,trrE&i!!!9"s763j#PnB"JFigA#Q"H$s+'_A!"\o*!5S4,!"\o*!5S4,!"\o*!9!JL!$D%:!:]U\
!$D%:!;Q9grVup?q>UHioDekUq>UHioDek5q>UHaoDekUq>UHioDekUq>UHaoDekUq>UHioDel@q>UHa
oDel@q>UHQoDel@q>UH1o`+soq#:>Eo`+ssq#C!e!<>@Zrr@TB!!%NDs7H?l"8DfqJG&sC#P\5uJG&sC
&,6)(JG&sC#P\5u_"Ia."8DfqJG&sC!VcTo_"Ia.!VcToJFrmB?hjX$_"@[-5PY6YJFrmB(\n"1JFrmB
&,?/)JFrmB!VlZpJFigA5Pb<ZJFigA"o82i!!!&qrrIWMo`+smq>^!cq>^!c!.XkFnc8Od!<2Nh!.XnG
!<2Qi!!)lq!<2Nh!.XnG!;uBf!'gA\!;uBf!$D+<!:]OZ!'gA\!9!DJ!$D+<!5SR6o`+t&qu6YHnc/Xp
qu?0d!"\u,nGiOkr;QcrnGiOkr;QcrnGiOor;QcpnGiP"r;QclnGiP2r;QcdnGiPRr;QcTnGiP2r;QbI
nGiQ=r;QbIquHEj!.XqH!5S.*!!E,u!;Q*b!!iE$!;uBf!$D(;!.aY@!'g>[!5S1+s8Vur!:]R[q>UHm
oDejnq>UHooDejnq#Bsd!"\l)!.a_B!!i<!!5SO5q#CC*q#:?Po`+t6q#:?`o`+tVq#:?ho`+uAq#:?l
o`+uAq#:?no`+uArr;lq!;uKip\t6mo`4^cp&G'npAY,CpAb0opAY,CpAb0qpAY-.r;c]p!!2fn!5S=/
!!Drp!9!SO!!i5t!9!SO!"\f'!;Q9g!!i5t!:]^_!"]#-qu6ZkpAb0upAY-^pAb1(pAY3hJ:RFq!"\f'
!;uQk!"\f'!<2]m!"\f'!;u`pqu?^-pAY0mM"grM+85^7r:^0k+85^7rq?Bm+85^7rq?Bm+85^:reQ)T
q>^L;qu?QnpAb1Xp&>"9p](:9p&Fad!'g/V!f2X<q>^L;p&Fad!'g/V!2BAkr;Zg>p&Fad!'g/V!iW&R
q>^MFp&Fad!'g/V!hpk]q>^L[p&Fad!'g>[r;QhuLk,=%!$Cn6pAb1Xp&>&m,5D3=+8,[.!!!Q&rrK-u
q#CC"p&>"WqZ-Tq!"\c&!NMgg!!!,os7ZKn"82ZpWdsmF!!2cm!(?P]p&>#lpAb18qZ$Nop&G(Wp\t<o
WdsjE!!i8u!W>jh!!!,qrrN+tpAb3pJ,'$Dp%8=ZrrMthq>gHo!$D"9!;6!b!"8T%!:'4W!<I]Grr?$j
!;QQokk"iT(]+.4rBTuT!!E,u!rr.jo)Jbtqu6Xqnc/Y#qu6Z[nGiPrrVloS5k+gS0E(nNqX4Ce(OpXO
5kY3S!!J1^rp##o!.k3&!94(.!.Y~>

%%EndBinary
grestore
np
f
361.38 657.925 mo
361.38 580.045 li
283.32 580.045 li
283.32 657.925 li
cp
gsave
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 /CSA get_res setcolorspace
clp
[0 -1 -1 0 835.977 257.892 ]ct
[77.88 0 0 78.06 -400.033 474.597 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 180 
/H 180 
/M[180 0 0 -180 0 180 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 180 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 180 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 180 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)b-9
K)^H&K)`pl&tJuuS=Gh6Pa%,kN0K9[KS9AYcMs+.#ZC\#8lA8Z8lGOYs$?bd6A5Bprt5V;#QP,1#QP,1
#QP,1#QP/1#eBu;rsYb(V5;2_kO806n)rm2h?VWgf%.6fs*O;9K)bTF)H-T5;Iad<[CruMV59]PPamu&
N1?,c>"\f]VuOX6!<E/c!!3H+!8RU9rr]C*^$#7l!r)`h!;HH\rT=LDcFppBn'7I'H^4WbrubKKA!G!Y
cIUk/f$;R\]sY8EV4='?P_=BnCQ,BK;ZB)+s/#_s#QP/"!!!<(!!3E+#lXf,#lb21s+::?rrL^FpAb0e
s6opLs5*_*#L:#b^"2A[Ha`sdrt&tRf%0$Ip[@S6kMG(@`kAeYV%&rZN/WFCHYZepH^nS4li2_>r;bjX
!!o:ue,KHVkP"oWp[@SKrr`#qp\4XTrT=FBcFpX2`cH4Ss.95pA!Gj$kP,#SpB0m8cHcFP#i=.XcGmQ*
[A=;.S=Gh.KR73=F)+*/O8nGD!!rK&$kN[U#RCD9!!j,Z&.%t0!!rQ("pb27!!iQ1`;d4E!:T^_!Vc'V
s8Vinn,;GLhYl"/cFp?nX`O@=K)biM)Pu<In,N.^p]'^5cL:N-n+Z;>kNC^YcGmQ*rM9mlP`1QSKR7K<
@o>=ks2k<>!!!<%&-O.dF#aNh!!!;ds-N`d^#&Pa!:T^_"TSMrn*g2S"8Diip\jRZk6'Sd]ptVmiVs<r
Hfs8Sp](!fp[?]-rVufi"7OgdcMlu=hU]ut`kAdfV59]PPa$iJ@oC_SlMnd%!!rN'(D%E#+W)@OK[uA2
&-rgQ#QP,1#S7ga#ke5u#lXf*#QP/!s,[0\^%_C'"8D9as8)`rp[@hU&,5hen)rljhWO(YkMGCQ]r(h_
rsN>MhVS#$s7cQMcM.><+nu$2s6nOan+ZkNp[@S6kMG(@`kAdMS>DaGP`1icN.c!$s.o\n!!!<((^;-,
0ne_2)#FjI+^/&(#l+Jk!0R<MrrC@?rrDN_rrDN]rr`#an+ZPU!U&&5h>saCaoAsP")HcVkPbDhpVu\%
s7cQfs7c!5n,<:apBC$:cGn`(q#:TfXb;XlKN_"Is+UIS#QOi+!$NNb.46ispSB#M(a0_>.<E1U+V4nj
#RCD9!!j,jA!F[XcIU:d`fs'q!!rQ(!!ot3d/O*sqYpTjn,!%bp[@nW!Vc'NrrhNAf&!h!s-s#jF6D`T
rVloTcMmhJp](!fhTkThrrMlo#5A/df$<IQnc&deXa>DJ>+biVs8;rs.0VF\6G;5RrYPh_+Ye>hCDcp[
"!LQh^&?7T`W<cmrOi6>F8Q$fs0;S(f)#FHp\Omin+cn_n*^5Srrr/Rf&"*)N;reT"*<Ygp\k*mf&$<(
%/7d1s8Vinp](!Vf'hr)"ibn9N*8Qas2P'@#QP,9r@nI9>2HqI+oWo,0l,@!+W)%>(a1>DV:Nr;`l>^3
]tLherO)U+"/Vh*#lXf(#kn:]rrC(8rrDNarrMl_qYpTjn)s]QpYOKXX8guT"(UNWn,E=gpWht!rrM!%
rr32ss7cQMcL:&u"o&&JKQDh)s/5nq!<"V\6=\lB0e"P+0g__V9)]Y9+X&RU]uJ(*`kB'n^&PM;XU(c"
S>DaPS=D&-!1*ZUrrC(8rrDNas8ViirrDNJrr_-/hK-sA^&J1EhWOA+rrLF6qu6]JhY[<SpVu[`rr_G;
F+aNRM>m_b!!iQZ0a0Qd8orjJr@nI9;T>Of+oWnl0k7Wj^&>>FXgP:5V6-SjS>H1SrKIDCN&_1C!4`'W
rrD6ZrrDNarrDNarrMl_iVru9f%06gSc8b]kNDjE!r'^tr;QimcKG*)"5_?'s6Tadp](6e#64GlhKs<s
U]9NW!WWK+r@nC@A(HV;0apBP`f)W$.5<P;PdRptXTbQ'V59]YrLEhNqhtZ2KR8A4rW(UNlMo$,!64p9
!:Tda!:Tdas7bFNrmpiDQ2^nqn)sZL!RBm*rr^R8s8W&t!S6,krsST$p](!fp\36cF*k%hhu=;h#QQ"s
0el!ucBL%<3@RR1]mK]4#!#;PXf\G%rM9gjV4='?S<T7sPl6R>K`?DtEs!is!!)$YV#UJ`qu6ZbqYpTb
p[S:Orr_`@cGl:Po`"sCkPbG\cM[\DpVuCorrVr?kOAKVp](!fp](!fqtC?ap[@k%F)tj:s1eR?!!!QR
.5<hL]qtZ^"%$1nHi5Z%6;jYMV>ZnjPamu&N0K9[KT,k_%srtVHZO7DF(8uq@p3@R!<3%YrrC@BrrVrX
s8;ltn+Z_Z!:S\B"6\7dV7Q]WrrR!!p\t0nhT#Hm!RBR!rrLF.m/I+\s8M`ms8DZun+Z;Fn*dZ2F'A&4
T`5f.!!jDj+Xo.9[5fZj0g\d7HSI68.8!eCS-"qFPlI!GN;\G.HO4b?F)u,4@r#RaqcX(%#QP.,s6K[b
^&.g0hY[?Qn,*+cn+YQ9"5_V[K\QO8rrQB\kPkJ_kIpWfrrLErr;Qim`om!o"o&&ks7cQjpB'gXpAjsb
mg&%EkNA(NHU<kp')qq3#S7gi+Xpp'8g,W<3B<U_r@nRE;O!-)N/WFKrIb?$KQDK]Hi8!hCMREi>%@M7
!E*,";ZBAf!65&^rrBb1rrM!Fr;QflkPP8[n+YK7rmh'Zr;W)_!a>'err3#,cM[\ChT#Kn!rpR&nG`Ub
s7cQhpBC$[n*fH.roXLSkMCl=HTAD3i;WiY#RLDH&0Wd)Eu6>L.5?L?3@Q[;6;%69rIb2uK`-6,F*htL
CNF9,@q/\P>$Cl&!D68g8d@[T8hg;O!!qcfVZ6\Qqu6ZQqu?]bmf2SP"8C*l]q,2rrs%';s7cQ$Xo/2#
kIp?^s8UC:rr`#qp](-b!Uod]mfVbAkO8B4#i=b$kMF4"F(<Yu_#GAS!!iiA&0ZCb+W)%>.9_Zs+Xo-+
3J;a4H[Bg\qf;jTCL_/Y@foV4;H!Hc"%#UH9)V'X3C5_-69,VV!0[?^^&@s6pX]*=s8N$!hXCCB!Vbd.
rri)Qf%uA"s472T>4;4[s5'U/r;Qf*cM[\ChT#3f"o&&ks7cQjpAsaWrU0jOn)s0<kPa6?`f+tc9(W(V
rs8r2#QPDA&2BD0rYQ"d0na$R.3U,pCNFk$Erg&t#A\BrCL_-iA,][2;Ys)`630)5rAb':3=l/j#QUk(
li-t9rVuoCr;ZfRqu6ZQgA_KRs7c9NhTj]tf&$Gls3:QJN:660n!opIrr`#q[B9B,!p@8cq>UQks7cQh
pAsaWrU0dMn,;DOhWNbYrS@Y-`iXpnEr^mks-Wfe!!rQ(&-rPpCCga_&0YP1+W)%>.7sbZF),i4C].`D
>%@M7$W9kp;F3uB69.@m6N&q?0``^?qZ*r%hZ!W>^&7m3pX]*:rrM!Fg&M*@qUPYSkl7db%HlpKpUuOB
s8VinhPJg$rrKOQp\t?is7cQjpAsaWqsO^On)rljkPa6Bf&"ESKQD3]rc8'CT)\Qb!WW3+rW!6ZKHU=,
#S8G31&`!j+Y!A*rF6@A@p3&6>#J6j;G'PJ69.C23<:ipq_87'0e"O_#lXf(#lXf(#h/gkrrBJ*rrKOI
r;ZfBr;ZfRh>[WPs7c!=rmh>"f$;jlf%+>srsN#nn)rk\N;rqPp[A-Prr3,qs0]!'rr3/rs7cQfs7uBi
n+ZeL!U&qMk5jH&rS@_/hTj-2Hhh^`HTAk@f`1gK!XNROrW!?4#\-aD#S7Oa8n2%7rEB.t$VF;h8jYj)
69.%\3VtN3.5C]K!>l+9!!!;ss.fSo[Jp1-hR2hNrrVAsp\k*npX\g+s6BUfp\3k-f&$/P!PN!Ds6]gk
>4:Y;X`N(nrq?`4N8FU7p]'*Hf)#CMp](!fp](-brU0dMn,;GHh?hcQ[?Q#bF*htTrc83hF)u+Wi;^=e
!<<E)!!EQNEu52^!!ar_+TN&Z&0_$V!E*,";?]Zj8kME:rAam53W1Z7.5<8+r@%gl.3T9%!!!<(!!!<(
!!!<(!!!:krrD6]rrK70r;Qf*`r,l:cJnj/p](!^kNCFQqpl%uf$;jlf$;ifbQ#ie'=H][emie$s6o.6
H]8")p\4-HSGrNhp](-b"n23Sp[@kTmfDV?rTF.9"kMP]`jM?8HNA27pi?Li3WGKHqZ$XG6N$lc#Z=:o
!!<K48l?'q8lA8R6:sR23C5_dr@n=%1&WO-+XnQ`+XnQX(^TO0[f>Cf!3Q8#!p?E:rVlrU[I=(o!p@8k
j8]/Rs6'@;!S6-"ec="]s/uA%;Z>M[X]h7On)rl9F3agbpBnTmf)PdEs7cQfs82Nkn+Z_J!9a@E$f:('
f#G_3P_=^:K`-5uF*mn-!.4]d!df!IU&Xof!!rQ(!!rE$":,iJ&.&78!$V;5!CBEW6N9(E0``^Xr@%aj
.Jt=j(^LEH!!!<(!!!<(!!!<(!!!<(!!3E+!7q1brrKO(r;Qf"[J^%*[DqD0s7cQ^rS@Y-hU^Q_ecXd[
f$4HMcIU:lcMlC\rsIr?hIBI/kMGCQ@fU<Dmfhn;H]7_!q=b![p[@kTn,;DWhWNbPcGmQ"P`19SrIb9"
HZOQ-Er^m/s4@;C!!!<'!!!<%6N&qE1&WO%+Y!@5"W/C"(^LE1!;6Aerrp+9s7`A'rVlr^V:PVF!oC?J
o`+aes7cQ^rT=4<kPO*<f&#!7p!s0#;QTocrruuihS!*6kPj<?X]gtGroXEdF04oorU0d]n,E%jn+Z;>
kNC^Yf%.j\[AEhd&WDs-N.d.CKR8B!HZOOTHZOQ5Es-i2H^#u<s6BX1rr<?(!!3E+#lXf(#l4N:#QP,9
&.fZq+X&9`0e"Op+W)%-&-rR>!!!<(!!!<(!!!<(!!!<(!!!<(!!!<(!!!<(!!3H+s-irkn,NF=SEKkN
!k"m!rVlo#[J^%,p](!frV$?]p\XC[kO8B4"5`4tkPa6<f&$DW!8d\*"O>TDf$=6F!4B36jSok+f%,dX
XkqpchIBI'hVRGH@r)"^#JJ-j]sYP][Jd6+V>Zq_Pl6R>K`-6"F*htTqJu^bKPTiPYQ*)Pj8bhPpAY/q
V>^DqpSGS%rrVA[f(o=Hp](3d"7Q!Qp\jOekO7U&kNC^bhWOjo"kMP]hU^QWecP#4.FnI:s8Lj\>#Nr7
hVPqLC]3)uX]gt7cGn/L`kBC*^&>A;Xo5*pS-P:CN0K9[KT,k_qg/BcHZKI6F*htTKWQ[/R/d*b!!rK&
!XJc+rVup(jo>AerVup(rVup(rVup(rVup(rVup(rVup(rW!!*!!'h7gA_>as8VPX^&@s4estUqrrTU)
n,E=hp](!fqtC-[p\jO_kO7U&rT=:>kMGD#h?2?cf&$;T!m]BBrRM&5S2'[9V>h65hVPY<F6DE2er3Ls
f&#!7@oB_[rPerQ`kB(a[K!B/XoG6rS-,"GPa)-*!JHF1K`-5uF*mb)"FGg(8eA$&n,KfrhuC:f"kN_R
estq%rrK6urVlrnV7la*!VcWkpAsaWqsORKn,)8KhWOjo"lA+ehU^Q]ect!^hVR_H6C7]RK\k8]N)HeV
h?$kYcMlZ%]io4NcMbc]]`Y[U[C,t8#Gn8eV4='?SGeZSN/WFKrIk,r!HWVeEs?u4KS6It(s2g(s8Duu
#l4N$#lFZ&#j;6g#lXf(#lXf(#lXf(#lXf(#lXf(#lXf(#lO`(#QXl(Qi@)gSGiHhn!q)irrUcAhYmHS
pAk6hp\XC[kO8B4"5`4tkPa6>f&#!7rmh)+qUPf+hXBW"ZiB+d"m=In>#NZFh?()_F8aYqN)H1kcGml;
`r3UL[Jd3<V59]YS=Gh6Pa%,kN/WFKrIk,r!HWVdEs6oDN30cBkl7jde,\Y3!>kg.s8;lt`om=#!Mups
rrUcAkPbD^Xekdirr`#qp](3d!Uod[mfDV?qr\":kPO*>f&#!7f&$DW#2[qfkP+^\df7Af#@j"]hVQOU
>5m@]er3M'f)FM:>#N&Z`m2TD]uIb![CruUrN-I(XehkaV4='?S<T9:N!4lnKS4]*rHeWfHZON;H]43&
c7t^d!!rK&!!rK&!!rQ(r;Zg'jo>AerVup(rVup(rVup(rVup(rVup(r;ZjI#eg8orrCXJrrVARcMdbE
Xdo.brrVYZ^&J$4p](6e!<<#l!Uod]mfDV?q<%e8kPO*<f&#!7rmhA3f%/^@kP+^\nc,Qf(456=kMG't
8rVW`f%sS.`n'#'[8LecrPnfLrO)X,"KeMsS>H1SrKR8>",)VdK_p)rF8gLiKTr=QehO*&o)Aak!!p4;
!XLdlh#H[>fDblbf)#CIn+Zb[!MupsrrUcAhY[<Rp](-brpL?kn*fH.kO7U&kNC^bhWOjo!7q/+%G'Ce
hVRGYn*g;>;DC3/s.]Mp@rq,;s8V9^^&?e!c;Iisf&"u:;OkbP`l>^3]ah``]sY8M[B6R-XehkaV>Znh
Pa%,kN0K!SrIb].KR8B!KS5SSV7#0n.1e5=s6Tak#QP,9&-rOA#l4N$#lFZ&#j)*e#lXf(#lXf(#lXf(
#lXf(#lXf(#lXf,+Xm[&1$8MGrrCpHrrVARcMdbEXdo.brr`#qp](3d!Uod[mfDV?qr[t9!pAG'rSA.;
hU^Q7hU^Q?kND=.s3=4c0qA7DErbD&rs/;up](!VkNDj$$*?gQcJI./>#Md-`WNoo]tOBPrN-0uXehlm
S-,"GPa)-*!JHF/KFN9]KT(k[V7"V3S1,"(d/VAjrrDm$!<<DC!!*@'!uM:L0q\IH^"2]Q!Uod]rrW4s
Xo/2$p](!fqtC-[p\jO_kO7U&rT=:>kMGCuhYlUEp\4^fpNo4U3AEP,s5j7^@rq,5rtG/$n*f,i[C+T:
hVQOU>0b.-]uL#arO)U+rM:[-V4='?S<T7sP`1QSN.d.CN/X!cS>EX$cJHi5+W*3o3V!-Rrt#G9#RCtI
&-rgQ&-rgQ#QP/*!!!;m!;c`r#lXf(#lXf(#lXf(#lXf(#lFZ.#WXmN#S8^F3N)oSrrCX6rs7eX`qTN-
s7cQlpB0mYn+ZeL"6].9n,;DVhWNbYhWNbYhWNbok6^VGp](9fX[4`krA!+-`r?O%kPt;Vp](!fp](!f
p](3d(%:>BhU^Q?X\*r[`kBC*]sYP][B6k8Xo5*pS->.IPa%,kqMbH=$_4&q[Ct/[epAPO)#Z1_s8N)k
#Qk><!!paJ"qXBn&-rOYr@u@mh#@D%n*'fOn,*+cp](-b!Uod[mfDV?roX:MqWIhGs7cKl$LaK_3AE6K
0f^sKr;W\p#:[[mp](!fp\t11p](!fp](!fp](!^kO7Ts[C+<*`m29;]tFT_]sY8M[Jd6+V'2A*S=Gh6
Pamu.Pamu7V6-l5]uJ@\n&Aid&/ZiN0f^sKZN'Ip&-sF.#S77Q#S77Q#S77Q#S?k=!<<Db!!!<(!!!<(
!!!<%!!<KU@kmrg"rJdD0f^sKkPr0o!/080!VcWmpAsaWp[84In)s->kPaiOp\4^^r;R#IHU9G93AEPk
0r"[M3TpG:!<<&m!<<&m!<;lh!Uod]n,MSNhZ(n"`rEaO[Jm91V6-SrrhTUsqka:o&[f<l]uJ@\kMD^q
+V5260ek-T1"60LrrN0e)"._6!!iQ1!!q3W#pE2=(^L*I&1K%/0e*#TU&P+WlMp5N"8Diis8M`ps7cQf
pAY<IPY*qb1&X-30`j?i3PGIRrshZqs7cQfs7cQfs7cQfs7c9cn,2>Pf&#!/cHc=,"MMgg`kDAk'tqW,
cHb"df&#TYkG;'*(^Ls-3AEPn0`j?i3V*3RrsT0:+UAVb&-rgQ&-rjH#QPG8#QPG3#QXo2o)S4Z":-_l
@j1gW!WX&dq_8.40fc34q#:AkpW!4:p\2sd8icl"r](*93AE6;r%[(.lMoT<!`JLeoCi7Rrq?N`p[@kP
mfVbAkO860"5`4tkPO*Of&#!@kO7ljS3eYA&.g!>0f^sC.5<:L1&V'JrrN0u1#WB>#RCG0#Qk&4!!rQ(
!!rQ(!!rK&"V<+\F$^`C#Qau;)#c5m.5<8+.Jtp+s6osh;N1@mrs8AU[<l(T3@Q]Z3VkH13Tg@QrrWg!
f)P[B!<;`d"7Q!Qp\sU`p[@S6rpKmNn,DJMn,)8KhWOjo!U&nen+Y\HF%S/9(_@iF0f^sK0f^sC.5<:N
0q\II!!k"Z@h91W&-rgQ&GQM2&H2q8&H2q8&H2q<&-rgQ&GHGF!!iQ1!!j,r;M7@c&/Yri#S7h-0ff+c
r[Ih$dJqJk!-?Eb$Jr1;@o>ocF/?9!r&Fp83AE6;0`idY.K2&nrrjkOp](!Vrq?E]rq?Tbp[@kFp\sXZ
mfhnCkO7U&q<%k:kMGD$h@f#7n*f,8HU9_A.2Ys0N%m=I3W1Z5.5C`L!\l,Y^&R*l"9AI364i5a!!*!(
#65#0#QP,1#lXf-(bnp88g4'C">NeX0ff1e$RmeZ0e"Op.4Hu#1%P@GrrQAWkM#t5rse/!HXg5O8opNB
p\4^$r&Fd43W1Z6.5<:N0rP'Frra0!XnVkkpB0mYn+ZhM!;HK]"8D9QkPjoNkO8E5!:TdI%I`c[hR.]&
0ejgp8opO%c3':k0ff+c!@]c&.0;4Q1#2fFrs/l1(i)_\&-rjH#QPG8#QPG4#QPG-#RLJ:!!iij;L:_Z
q[`ue;JV5MP[cHH0`rjZ.5CcM"!KBJ0q81F9)jS$r;Y[S(#HWF@o>ocCR!-=s7cQfs7`oU3AEPm0`rjZ
.5CfN!AQ%Ds4.,X&H>(nn+ZkVp[@kFp\4+[kO7U&kO860&DlU,kO7lIKL.[J+W*gmV8iGY!QL)s0`rjZ
.5CcM!$V:ir;WGi#6=c(&6`j0&F9Z&!<*62!!iQ1!!iQ16>IbA&.1-aF,Z?BP`1QS>5^/X.5<8+r@%^i
r@,&Pl2LoZ8n34Mn)+-^en\G]6>N+2p](9fs7cQfs7cP`3AENK3W1Z7.5<8+r[@h%kPqph$kN[f0j;Tk
p](!^n+ZhM!;HBZ!9a@M!U&qNk5auKk6pbIS2i#A+[U7?cHc@5"iej-c?hSK0``^Xr@%^ir[FE<rr;os
#RDS`CJ#`]#S?t@!"eT)'*&:D0k2%3&-rgr;JV5MP`1icPl6O@;Z8BQ.5<8+r@%mn.3U,`.FS79rs).g
@sb?7s7b[U&)MY*;O#2qs7cQfs7cQfs8;TkHi5Z'.5<8+.5<:N.0:YA.@:&A#S8.6>-6u^s7c9dmg&%E
kO7U&kO860%,U11pU*=2.;PHncGok/!65#`r5JqN0ek+3.5CcM!?ioi+hdp1s82j$&34fI3?\t-#QOl(
#S6tA!!iQ1+_r54#T,m<KT(T\N!G#pKT(RV.5C]K!?iog+nGZ.rru(n@r$b*kN`'KpRGCf9!/*e&-)D(
p](!fp](!fp](!^;Z&6O.5<8+r@%gl.3U.=s6]h#&.g!66>O!cp\4^^p[@S6n)s0&n+u2Op\36:.3XBB
`X'l0cGn/LcGn0.`W/@)0``^Xr@%sp.3U,`.3Tkjs6BX1s8;p(#QQ#7F)t56+V=8O#T,R;0aJ=-;LA@q
",qnlK`6o2KT,k_"$&(b1&WO'+XnQ`q]Yk:Qi@Fcs&*?JKVcu_p](!_rsJf+p]'*7>!e2:n*fuT3@Q[3
0e"jS.K1Ij.Brj2rt#J9(b%I3;N/<Gn+ZkVp[@kUmgo0]p\3jQ8gton[CsSn`kD)c"hhph3@Q]].0C_B
+Y!:3jo;F^!s&?$!<!0,+ZX%cCKg^(&h,7i6:,1/8f/*F&34fQH[CEmqh4m#$[[PR0e"h+.3U,`.K(Cl
(a0_>S,`-\*/'i/@o?fHF*ikJ^"2&kp[?tieua:7;F6&fp[@PE!'1$5!@]c#.0UkD+XnQ`dJpu]$SbO>
.2XK_3B9]8HiBiLcH`hfS81_O.2YsZrOi6O^%02C1&EC&+XnQ`+oELErrWNM(_HWO'F56U&.fZq0e"7W
(^LZY&-t"#F*%;,!JGgpKFN9]H[@1r.4HDh+XnQ`q]PtW+h[j)rsP()kMG('P]L>,;H!Kt$"IIK>#IsQ
CR!]Tmg&UUp[@kFp[@tQ#OhEUp[:*k1&WO'+XnQ`q]YJ/TDolkCQt'RCJm/A&/Z65+Xnip+XnQO&346s
[Cru]r4Nfa]uIb*]uIb*]uIb*]eLrb+XnQ`q]Q%Y+W)B"s69Ok#Ur)4=tq0;&-rOApBUpG3FciGC]/>F
HN8-d.JY+j(a0_>(`;$-Zi:BGhWO@jhWNbYcGoj["cS,2V6.c7mfW=Qp[A+U!:TXU"7PtE1&37!+Y!=4
OoPC['k<JmXdk?7PamDR@r#RP8n2XXN305\[0++M]s[gP#faQt]uIb*]uL#a#;Iq^.3U,`.Jk7i(a0a9
s2b3I+[Se2;F3uB8i]6;0bYuZ0ek[\@q0:aCMS!,F)u\LHZSn-!HWVd.JY+i(a0_>)#O>rrsR]?n)rQa
kMGCYkMH1#"6\k9kP+EVp[@kFp[@kFp[@kFp[@kF3W1B/+XnQ`r?2.XrZSQHh#@\>N3/V7N0KQsPl7*S
V4=BYrN-+.Xo5X.]s[FE"19j4.Jk7n(a0_>(a0_>k5V@Z"%#=a;Z/r\8dA6d;Gp[r>$Cl7rG)FTC]/;U
HZON7F*mn-!.4]d!\l,Qq]Q%Y+W)C$(nCWsrrf1LkND=5h?2rtkMH1#"7PFAkP=QOp[@kFp[@kFrq?E]
rq?ljp[@i20e"Op.3U,`.Jk:8s1SF88q`G*Xo+F^S->aZV5:;jrN6%+"22+U[IV!21&`Wt+TiQ)(a4k<
"V<[\>&-J)6N'LW;G-mcrE9;5@r#TQCB8Klq/ZO_qfD`cqB6"Z+W)@>(q]gqrrgX(kO7U5h?E*!kMGCY
qr\.OkO7U&kPO]Jp\sU]p\sU]p\aI]0e"RN+UKT5k91uc+W)@>nGf$Y"ac2uXdk@KPQ@;=rLEh_"g+W'
XgP;.[0XIR]sYP]]sYQO[/r'3.K(Cl;Pb3Rr"u=2k5P`B6;hSs3C6&)6Mj@_;Gp[r>$>E>@q0:arG)a]
CNF94CNF94CNKJj$7R,I(a0_>0j5D;r#"2glMo!+$^A'^hXBXahWNbYhYZI<n)s0&q<npin+Z;Fn+Z;F
n+Z;Fn+Z;>1&`U0+XnT'k:%Pt(a0_>q>Z]Z"Yj2FPc^eZPl7*QV47XaV6-TmXT>i3qm?^C[Cru][Cru]
rNu\].4P6>!Z7c1rZV7X!$SQGhZ!lf(d^Q)@mWLS6N'LW;G-mc"'ST+>5_q3CLd<Y#]jd&CNF94CNKGi
#Uq2G+W)@>>#P>Cr>=VqW;d!sf&#TYr8%G:rn[\=hYZI:n)s]=!9a+FqX4OL0d/"E+U$uk.5<:N+drB$
rs)/LPao.GP`5R*!M#DQS->aZV5:;jrN-10XgP;)[1TOKXXPD:(a0_>S>@Yh+W)@>cMtTX$P5<b>'!;&
3C6&)6MjCR;Z0c"@p8h@")DC^A,^6G@r#RiraQ!Y+X-e$"]A5I0e!q?+W-(9"NK<]n*^P=kMGCYkMGCY
q<%eIkP+EFp\sU]p\aI^hD$H.rZMPNkN=ic0e#F<\c:(W"`oWm[B5DdPQ@;=rL<nbSGf8bXekos"1>8=
XnoF/XgP:-.4P3=#XYAX3B8fC3?dhjSGr^@3D+@&r^%&d6:sR:8lA8Z8lAPj;Z0er@g6^YCL_-iC\qTO
+XnQX(a1>+8i\Ud+Yb.9s5j7`hVR_ikPX0?kMGCYkMH$t"7PFAkPjoMkPFWZkO7U&ehJU&(a0a9hWJ(,
6;#l0Yl>/kN2<qPN0K9cPamu.Pl7*QV4@L\!Ni3oXT5d)XTG"A+UTA0+W-0.S4[9G0oc50rrkDC@rkO.
rB^NW6Mj@Y;G'hb>#P<&#@gqI>%:`G>5i%1=o_J"+T`K()#d,03B8N*_Z.XU&"LZ&hY6KqhWNbYhWNbY
hYH=>n)s0&n)s0&rpKjMrpKjMrpKsPc7(4@+U-`ckJk2NpA^9T#=<KrPdRWXN;\tBS<TQAS,oIVrM9Os
V=L_tV3E,P(`4D5Pan7sCI5-&g]%H`.7-XRCJ+Rm!D5]U8c_g^qbm;p#\.%J>%:`G>%@P8!`C0jr>>K*
rupA$V>g_$f&#TakPO*>kMGCYkMG^k$Kpm@n)s0&kH-0^rZMF^kMGCIXd9"Urs;SVN2=4aN/X![qih>U
Pan8?S>DbOV&$20Xei.rXei.rV0aX?+W)@>Pa%\k>0HrWrrj6"6<\_>qa(<U6Mj@W;G'hZrDEZ";Z9i"
;Z9i4;Hct%;Gp+1.3TNO(eR+e3=u4DrrL-r%Hm3SkMG(YhWNbYhWNbgk5auMk6CD<n)s0&n,DJWN2:Tc
V:O5SkMEn[s3CWLF,Z?c]pt%?qih,OPl7*SV4=BPq5"(npn\=5F'<X+N0KQsP\]RaRK!FF3D+(6;Yrc]
8j`JK"B%ii8l>X]rDEo);Hct%;Hct%r)3GZ"\MBR8jX\os5O%]f&#TYn+b`EkMGCYkMGCYmcO]/kMGD"
h>kjNs6BX&rsOL=S@,bhN/X![P`5R*!M#DOS->aZV4=BPrhTjiV4=BPV4=C\SG\TOHh.2trs(PE>'k<_
694s1"@>^I8j`DI!E)Ph;?0>g;?0>g;?KNh8lGU["[YgJ8jY82s4[JTPdTB)rpT^?#Nst,hWNbYhWj8)
hWOjo!3P)WV>gub>*OuJ]sX)`N0K9cN;\tAS<Wo@!2][b"JqWbS>?=XV4=CZSG\TPN*;GFn,E\"(d^5m
HZMeG3W28H8jZ-:q+:`e8lA:\;?0>g;?9Bfr^mJp8kMEB6:sR2(s)`errTmjhZ!!;h@8Z)kMGCYkMGCY
kMGCYroXOCkMGCYkMGD!h>jt]s+C=OCCQ5]XhD-,N/X![P`1icqih,OPkLUWPamu.Pamu.Pa%,kN/V8P
s3:QL.7-@:HZMe>3VbuD8jZ-:q+:Wbq+:WRr_!&S!#Xo!R/[D]`noS@p\3kJh>la<h?2rtkM?=(hWNbp
k5aB8k6p/0hWNbYhWNbP]qq;"ir9HSF,Z?k]sXAhN0K9cN;8\?S<TP.pm_GNS<TQ@PQQl/CJ*%TXoA\=
0g\KRKR6TW3Vu,H8jZ-:8j`#>"%#UH9)V'W.1h=8q#:_"8qbLHhXBq-kMFe_h>la<h?<#ukMGCnh>tWm
]`5nL$Y*@<H]42s]tKr#K_p]1P`1icmZ[s8P`1icN,qV]s,R*eS:imW6:u<PKN^]&"%#"73V>]E8jZ-:
8jZ-:9)1dU3C5/+VuPHM%:^P10ndj/hXC45n)r9th>la<h>la<h>la<h?<#ukMGD$h>la;h>tWmg]+)L
$u8aE;Gqk#N30e5[@I/R"dFt1N0K:qPkpULN0K9cN/VgUOoOkL%#h<rS3eqs6>M75F&Muto0N^T6:sR:
6:sR:q*G*2&B=a]rr?j6+V?.XHcFpnkO806n(upPhU^Q7lJ;Wof"IpVs+UISCJ%J7;HcsrF,YdB[Don^
P`1:iN!bf.P`1icP`1icPkg7=CJ(i2ci3uuriHR9S3eYb3EgK_HXf\H3<_`069.@mr^$TFp-Ja>r^$]I
3?\sqs-s&e+U';<.5>nWrn[Y<rq?Z\kLSM@hU^QMh?)99V4.GGs8>h*>#JO%8o'BEPbl(5]qq7qMu]+A
Mu]+AMu]+=Mu]+@MudE\ci<;1a8ZUNXgP:=[CrD7.7-$eA,_,^@oE:d"%#"73Vl&B3W;>Q3C5_m3D)V)
3B85omJi=Kr?2@o+XnjDV:PY&!:LWjp\4.5hU^Q7hU^Q7hU^Q7hU^Q7r8%S-hU]]KU&WmIrDFG8;Hd6r
>(hinPc_X=]rdfhN/WFKKT(T`Mu\P1N!b5sN0K9cN/WF2A(L[Wrs>g0[B6jE]rc&nr](<XCO;"nCJmbb
3ALIm#=:F;3C5_m3<2)=63TtA69-bDN;rJKr#u"f#r*l$KZ;U"hWO)$p]'^^kPa6=f&#!Vh?)lskPa6>
f!VX*_>h4K!)!2frE9hD>$=O>KT(SKV7""V[C)j$Pa)-*%ton#Pa%]&S<T7kN-f>]SG)u=rrnppXgP:=
#IV7Q]tK@b.K2=98n34$N-f>D;G'PA6N0"F6N9[W;?of\3C5GL6>N\&df91f#q7#H.5<83>+EV2h?<$)
n*g#LmfDV?qr\@DhU^Q7f"I#G8jZ/0s.0/j;G-mc'O"C<>%:`G8lBG`KT(k[V7!_E[C$+=Xei/uV%&rb
Pa$i[KS3i=@s`94R/c@LrN6%+#JIOY]sVW1.K2=46;h<7H\?`erG2@A"'SSp9)UaR+[V^M`i[Mc[Jp;#
HTD'K!@]2j.02.Pr\4OBCRiDqr8.G9!q5=@rT=XHhU^Q7hTiNfCJ%2c8cqCP6;!"4"TSL*HXm%Q!ErD"
=p\\B@q0:X;Gq:`rJUiCPanTLXTYJsS=GiAN!"E:;JZ/Vs(f7Hb5VNYKXLf]rO!rb[Cs8n]uHmY.4I8D
3C5_u;HdRG@r#Ra>#I[R3C5_d0e#GJf)FM.f%.72nGegS")G;t)#YTY.3\X=!AQ&%0a0mAH`b<5rn[b.
hU^Q_ee$]hhU^8t]qpBc;G'PJ8jZ/K6DskArs<JKS4Z[O;Gp[rrEB/0#A[gZ8i^'rHiB!#KF*TjN.ck*
CKanOqKi<cHZNuXs/Z/%F1';irN6%+%DB0_]uIb*`iW_o(b%393<1f13W:H/;O#c0hYu(+[?CRarrYlP
kMH+[!@]2j.K(t@3AENK&38=T[B6jMcHb"lhU^9'`kAd^]p)\m;Ys&g6:sR:rBe[,_Z'^9N9BC%;?9s!
rEB/0rbE?\.63W6@o?fHF*iRnN.ck*F(8BWF)u\Tre(<!K_p,rF8p%Us,I$\@uT:=riH:1XgPS:[JdcL
`kBC3cGj$[;E60C+X&Qpr&Fd4.K1Im3HN3sroX==kPO*<f%.72[K"nZ##_l's&(!Wr?21j+oNi$0e"h3
3AD?^cL:5bhTj-K[Jm!.Xf]"EcIVHt;Z98g;Ys&e6;%2Cs#KEFU]1O%[J0]B;G-mc!ErD">5_q=CL]@J
S?92qS:l6)%:`:68lAi&F+fdcXb;'#KEHRSH\D?E"`o$3F),9Zs6]gnA$u(2]re-5XgP;0[Jdf;`X7&b
@r#ji@nK'B.K1.h+X&9p8m6;+r9"1=kMGD#hYl"+cE5[tlMo93#=;qWs8TbU)#YT].3U,h0e*&U"?A1c
#b:n_"o%K[n+Z;HpB1HY>"\cl"%lH`;Z02g6;%,A!'0cQSGrgdCYo*kc;I:5;Z0c*@p3APCL_-i;A]L_
XgP;0[/mtKrOi6O^&H"P]o;c?!IKLsHiA'eCKdh>k5PTpF4UBkkP_L`[B9D8rOr0L!i8LmrbMIRrHeQu
Hi8U#N0NMgn,)8KhWOdmrmh+iSDjLQrrHourr3'e(a0ap+TX#8r@.Y!!XM]eqsO^_n+Z;Fn,)h[KLuGH
8lA8Z8lGU["%#UH9)V*U3<2C6s82fsCZk]s")CM,9)VWr>#JO-@p3APCL^it9)bpt[B6jE]sYP]rOi?R
]uJ'^q1JisKR8CNHi8!fCNEZhcMtoa!H[,srrKO(rN-+.Xo5[+]a`!$]i%a<CMS!,F)u\LrHnEp!7(E'
"5`4tkPa99f)O%qV3V&^0l-7WrrK5=r?2:m+XnQ`!\#iQr@nC7&/a!smfW=Qp[@qP!rr#.q,.Mk;G'hZ
;G'PJ9)V'Y3C5_d])UUd!_RP&rr3G@8lA8Z;Hct%;Hd76>5_q9CG@9.[B6j=rO)U;!QMhO`WiPuN.d.C
N;J8/H\D?E!HWVdErfcSn,K?d!b6T?rr3#UV>[M0[B6jE]sYPe`kBC3c>uTfCMS!,rH&!cs*O]t&<):E
kO7U&kO7U&kO7TshWOjorRM(rcF'1=s760j>2K5X"?@;9+W1/$!@]2j.K2%'+UFV8mfiISp[@kFqtC-S
>5D,!8lA8ZrCRGa8jZ-:69.@m3AE8Cs1SF5A)@1a"Ck%r;G-mc"^4f->%:b8@g5gJF02RPXo5X.]s[gP
%*$!#`k@%aKT(SCKT,k_!.+p'H\?`mF*mk,")D[^>*o6iCYo$i*j)98Xei/%[B6jE]sYPe`kBB^8m6"?
CMS!,F)u\LrHnKr#aFN@kO7U&kO8B4#N"Y#kMG(HhYl"-cHa+n`rFQg!Z4PLrVm#&+W)@>r?;+g!AQ&%
0`_PHrU0j_n+Z;HpB^fns*IpI>#JQ";?9BfrCRA_8jYj)69.%\1&V'DrrOoQ`r5o?]i%I#9)VZd=pSVA
@q0:a.7109Xo5X.]s[gP!QMhP`W28"MueTjqh,-"KR8&eHi8$bCB.PDs69Ob@q3OWrrV&ZV>[M*[B6jE
]sYPe`kBC3>#P<7rH%pa#D@GWKT(SCcM6i/kO8B4%Gp:)hU^Q7f$;jlcGlC;s0M_*V>U>n;Z7L6+W1/$
$Rm5J.5<8+0d-PBkP=QIp[@tQ"2.T1=p%Z+;Hirq!D68g9)V'W3C<[)!>$]Os8DrtV>U>nF8ec4;G-mc
$<g>2>%:`G@mV#sr2oq*!PPo>^&H"OXo=7ZK`6o4KT(SCrIb2uK`-8rEs6?#CL\e[e,RMh!1`ue"21P5
V>[Op[/mtKrOiSt6=XM@@r#k$CNFRqHNf(LKS5;\q!S7Hn,;DQhWNbPf&$DW!7q.p!le_[S,WM1p\k*l
hYnAj+Tj/:.3SdB.5<:N0`_9$r9jg`n+Z;Fn+ubdmpf7!;Hct%;Hct%rDEYg;Z02g6;%2C"Z\RS(lVA-
s5*bVHh[L=!9a>R$W9Sp;Hct%;Hd76>5i"C(jiruXgP:=[Cru][Cs8n^&H"P]p/MT!0mA>!JHF/K`-6(
F*htLCMP@JN+;M[WW*!Gn,<7gpSG!grN6%+$,*a[]uIb!8q_lrC]/;UHZON=H\?a!KT(lQrpL!an+Z;F
rU0dMn,;GJhYl"/cGj?lP_?(:o`"qicM[\BHi4c^+W1/$!@]2j.0VF;&GQ5!qsO^_n+Z;Fn,;tfS5NNg
>#JO%>#JQ&;?ofl8lA8R6;%2C#<=dU(s`/O9&Ta7s472N>0d'G!0mFS!E)Pg;Z0c,@p3A&.JNSf]re]E
rO)O9"3/$NK_UK,KT,k_!IKLuHi8!jCMPXRf)M7Drr8\l!Gf^QrrgWDV6-TmXU_b@[C*]U]tMF4;YTX^
K`5ccF8^IaKE0$imf<+ZmfDV?rTF.9rRM5!c>->7s."bLs6Tad0pMS8"Ygi;(a0ap+oNhn0e"h+#_`-U
"S_ZZp[@qP"5ZpZ;YjPt;Hirq"\MZb8jZ/K637u8`r>u=N'ch0\,QIqPl(Ia>"V[b;G-mcrE9A7>%:_Z
PlC[apYNpg[JdcA`kBC3^&ErlP`1h-N0O3u!JHF1K`-6%F*htL3@VuIrrJ'^T`5%&Pl(I_Xei.rrN-+.
Xo5X2]tMFn;PjBm!q3gerH%parIb0@rpL'cn+Z;Fn+ZeL"m>@;kMGD#hYl",F&LTgs8S&.s3:QF(g>eo
rrBJ)(]bcsr?2Cp+Xnip.2Woss8D[#n+ZSVp]#S<;Hct%;Z9i#;HirqrCR)W9)V'X(^RPJrrVY)3MQNT
0k9)<rrL,+rCR)g9)VWg>#GN->%:_r.Jj&Sn)r9I]tLhn`n'#8S;`."Mu]+>N;\D1H\D?E#'5-4F#bDW
rVlrfF'?E[ir9'iF5Hip!9a?X!Ni3sXT>i3rNua@]mEZRrs\)1Xdk?'H\@W[[Edt6mf`CRp[@kTmfDV?
rTF.9#1hY^eq?r@rVlrfH^+7(XoADVV>L8mA,R5S+W)@G.3U,`.4Hu#0aNa/s8N$"c;IR6=p7f-;Gp+b
qapuX66QW)qu6`K;B`1Bp\t7\V>L8mK`+O?;@$H(>$>E>@i1I!rrCpSN!>N*P`1icPl6OAKT,k_#^_5O
HZOO++f5)9!nLjZir?mq!FqYsrrg$3V6-TmXTc,7[C*]Urk/>)XmZ5fmfE1Orq?H^p\XFXkPa6?f%uWh
[JTt*epF6grrHWmr;Qlf+W)'q(]bcsr?21j+oWnl(_HH1rr@->;?9s!r`TD%>#JQ&;?9BfrCR8\8jYin
#^cCI!3OKFfDbkehYdBSpJUo]!E)Pg;Z0c$@lZ"4n,EEbK_p].Pl$C?KT,k_rHeZgHVu#?q>UGsUAk78
hYdBRp\UfcXU2D;[C*]U]nB;XrVuKh!Uo4Mmf`CRp[@kTmfDV?rTF.9"P2/#8t>_W!2[1)mJd2ASGW<d
Xo9.>+W)@>r?2Cp+Xnip.0t"`rrpD?>#JO%qH<nt>5M2'8lA8R6:s6L>58*upNu<-\GlRrSGW<d^&1J'
;G-mcrE9;5=s8RfrrLu0rJUcAMuo6&Pl$CCKT(S;H\D?E!c&rpq#:BhKV\VJ@fVbjrrD6]V#d]prN-+.
Xo5X0]tIU>mf*:MrU0sbn+Z;Fn+ZeL"m>@;kMGD#h?(AgN;3DRpOq3!c2Rf2[JTt*=r7hL(]bcsr?2@o
+Xni`!8d2E!+Yn(#$Oo.;Hct%qbmAb"@>^I&1IVRp\t9>;PjBo>/pI>!ddO+qapuh8lAPj"]AN-;@r$[
rreR>KT(TZMueTjrIb2uK`-6!F"p#TrrLDT`;eis!INDprs$05S>E'aV>[Ls[B9D8!i86Hn,EORn)s0&
p?r1Jn)rljkPa6=c=:Y`rrL,dq>[Vt!uO$IcMdbCp\Pd.+W1/$!@]2k.00uHnc&[js1SA/$<g>2;Hct%
;Hct%rDEYg;Z02i66R3/p&>&W3O&PYrrXuZ;VqBP!r#;RrCR)g9)VWg>#P?'!ARL@rrgW#KT(TXMueTj
qh4rq!^\@!p&>&W>35eLs4[JT>+D_`r;Z_l!Ni3sXT>i3rNu^?F*$gM!r)0HqsOmdn+Z;Fn*fH.kO8B4
rn[^0;Xa;Y!L/P@rrb>*(a5aTrrKM=q\T>W)#GHY.3S\]qZ$9h")CM,9)DKd>5;&&8lA8R6:sR!#c71n
!T$_bs6osf;Z98g[Jp1.`^39arCR)g9)DKg>#H36n,EBPre(B4KT(T`N!4lnKT(SCrIb2uK`6<"=r=C6
rrLtdmf0lu!-A.9!8d_T!U$!MV$3utXf]"5rj;g09""-f$1I'GkO7U&kO7m;mfDV?rT=4<kPj<>X\-;!
rrLu0W;cr:3?]4C+W,S+s'u!E"!JL))#YT^.3U,h(^Tm*rrLD;qbdW%;Hct%;Hirq!D68h8ch<b>4_aq
el"N^s3UcP.9]VA;G*2Rs+L8A!E)Pg;?g<&>$=69p[J1_hYr01N.d.CqMYN0N.d/gKEZ^UHZL?Grr;]l
!o@urWW*9.N3/qYXj6tH^&=c0Xei.rrN6(,!k"7bmf3:L!Uo4HmfVbAkO8B4"lAG!eln%(rrVr&N5bhX
rsLOu+W)@>9%G-s(_HQ]#U($.+XnQ`#\3?'#'3[7;G'hZp/1ub;G'jc8cg.Qn+?V^ej:fXqZ!c!!*]@o
#?"08hF^+,6Mj@\;G'hb>#JNIC[_9)S:l7fKEdBgN.d.CN;J8/H\D?E!^\X1o`#$VCKb5Ps7u[&V5:;j
Xf];*V4=BPrM9OsV>[M![B6iHN:6cYkNC^bkO7U&kO7U&kO7U&kO8B4rS@U/>5.[h"8BgCPi_qarrY8)
+W1/$!%Ia]"!JL))#YT[.3S])nG`^U8kMuR;G-RZ!D65o8lA8R3=q_Qrrpt6.5=.LWrE6+;G'PZ9)_]k
8kMEB8d.gZ;G'hZrDE`$;AdFCrrVYBHi8U)N.d.CN.d.CN.d/gKEcdVH[BNWV=ackhJ6;)CJrR[gA_8.
V6-TmXT5d*V#d]prN-72XgP8tcL:c6kMH1#(%:>SkO7U&kO7U&kO7TshWNbP]i)91rrDcr`kB'fN2usZ
&39\+#9ap-(`3f$&H*FJ+W)@>r?21Y&GcA#rs=WN8kMuR;G'hZr_`tn;G'hZ;G'jc8ch<r1%bJMc8d=.
.4ITrs7$$h.9c[B#uXAn8kMEB6:sTC8c_g^rDEY_+n,F2Xo<YJKR<TL!0$`,rHeTe3D/rD"4h6kA,][%
s1A:3>)`EVriH6uV4@FZ!Ni3sXTPu5N(WR="n1=2hWNbnk5jc7q<._5!nM^6o`#-a`kB'n]o9&m":-/2
(a0#!+W)@GpD<oS)#YTZ.0sGQrrDfk8cqs`;G-pd!)!5g"%lH`;Z',g3=*=krs>M^0ek+3.7,K'hZ)"'
$Rn)>8lA8Z8lAPZ6MX4S;G-mc!a7$gnG`[dH\?a!Hhi<pN;J8/H\DBF!b3CnrVu]n$+4PY@p3AGCJ)UL
rrlS9S>E?arN5ml!Ni3sXT>i3!jug&n,EOIkMGCYq<%bHqr\":kPj<>[7]$Crr_H(]uL&b!j.F$aoCK&
%5B"C(a0_>(a0G-&/YuU(]bcsr?21AV==KfX\(oP6Mj@X;G'hZ;Y`oe6:qeepAY0fC]6$h.5CfN!(-Ya
YlFSm#uXAn6:sR:6:sTC8c_g^rDEY5Xml>j^&*-WKR<QK"+,]JK_p)s.:`&N!0mIm!Es"3>-n8*rr@EF
V#d]priH<nV4=BPqkXP"V6-l-X\-:rrrDNbh>ufrqW@t;kMGD!h>q,>p&>-F`kBCj]`GO"kl9rJh>[Wa
3>`SV)#b]P(]bcsr#l(@n*p>Z@mWdSrCRDp8lA8Z8lA8Z8lGU["@>^0&Dm0]!kh2dr@nI)0e"P<+g1hN
.8ic1;G'hZ;Z02f6Mj@U;G-mc!_O$mq#C0i!0mJ0#D@GWH\?a!HhrBrH\D?E!`CK1p\t<?F)1Y_"'Sl<
9"k8qrrlSZXei.rriPsl"0JE%V>[LtS3lu>rrD6]h?2rtkMGpq!T*#<h?'3FkP+uWn':pP#JJ-j]sYPD
Pk+jerr>(W(^V?&(_@Mq(_@Mqq\TGZ(a0GFnG`LFr'CEV6MjCO8d7US6:sQUC\[o3hJ4i+r@n=%1&`U%
6EL1e>5_&#8lA8R6:sR:6:sTA8d&$a;E7)5rr_G*HZT(2#_[PXH\?a!H\D?E"ESp2.=:ji"6YnaC].`D
>%@P8!,LBidJj32rhU")V6-krS>DaPS>DbSV#d]priH3SA+9L#pX\3Pqq_VAhWNbYhWNbYrS@\.hUZ2$
qYpZts7bCK`Ws2s]tLhe[B6S2#T,95(a0_>(a8Si"sFg,(a1%6!+YNu#)kl88jZ-:nk''P8jY6<n,!%b
hL#5^!AQV50a0!\.4Hu<rr2u3qYpPleGn_3$SbOO8lA8Z8lA8R6N0RW6N'L];G'hZ;Go5jnG`QlHZT"0
#_[PXH\?a!H\D<D!a6c9qYpWcS9+XE"_2=X@p3CA=o`(3rrBb/rrAn,rrlnsV5:;jriPmj!Ni3sXT<3r
nG`RQf%'lYf)+;.kMGCYkMGCuh?'NGp\FghhYth!`W<cmrOi6>PlC[_^&%a/V8*'.rrEr[rYQ(f(a0_5
&/Yrq&/Yrq&H*FK+W)@&V==Kc8icc8$q`iY6:sR:6:sR:6;%2C!>&c<rrL,\rAam53W1Z5.5CcM!CA7"
s2Y-?0iJ!C%8oer8kMEB6:sR:6:sTC8d&$a;AcP*rr@EFEs6o3HZOOTp3Qj^HZK70.<GCd"4iuXF8]nQ
@f]bCrE9539!A6pA,W52Xei.rV4=BPV4=@^SGf8gXei.rX\-:rs8CLPhU^Q7hU_DW"kMP]emjsArrqlJ
cIU:drPelO`r3RQ[C)NheGn>(!%Ima"!JL)+nHNT+W)@>!.3;frrKenrB_5k6:sR:6:sR:6:sR:6:sR:
6:*+4hZ!NVhOILC6N&nF0ff4f!\l,Yr[@n8.<D`n!(-TU"&_``6N0RW6MX4X;G'hZ(mO4Zs8)`qf)0Rk
HZOOTp3R!bHZOO;+l<4u!p?t<rc8*UF8]nOA,]X5@nM]qs7-*oF/?"8Xei/%o;2Gg"/S?(p[\=bpWi`g
"5_Vcf(Rr)f&#!7V,HLTrrDNdee-3YcHaGT`l>^3]tLhe[B5Cip&D])!&=?f#pBis&/Yrq&/YuU(^V?&
(]ZQV8qb4QpAY8:3B9Ddpd,!J9)1d]3=oB_]o5i]6:*\!rAam53W1Z5.5C`L!&:\Wr(7Dj8l@uJ6:sR:
6:sR:6N'L_;G'7mCMS9nf(\n<"I*tCF)1_q$@?i@F*htTF*htTr,W&sC\QD^KR<Z="`&0pCL_/Y@f]bC
r)s(uhuD+(!/1<I$a$8-S>DaPS>DaPSGT,gXeh7KcHb"tp\"OhhTjEtcMQ/uhU^Q7hU^Q7hYbq/CP;`^
n(uq#ec=;"cMb`h]uIb![CruUXd$$h!'1#q![/C(oG@QOrYPYZ&-*:@3=%r36;i0#^"2BFrri'_3C5b%
63'XW63'XS630(Pr(7,Z8jYj)6N&nF0ff1e!@]c%.0Dmks1SF3!56e[k5PEbr^m5i8lGU[!(-ZW!(-KR
"]@?0CNF:jEs75n^!>g0rVm#pF),i4rGrBoF*htTF*htTF*htTrc8?T+a\QhH[Bg\rGr!TF8]nQ@f]bC
qcX""!58C3!55i@!0mJZ!j/<$oVDkrV6-SrKNcC@cMlAthWOA%p\Xslf$;hHcMQ0"hU^Q7hU^Q7hU^Q_
ecN6O`r4`pf&$AV"4#33cMb`j]uIb![CruUPa)3]rr2u3]`7p0!=1FY(_%W*(_@Mq(_@Mq(_@Mqq\]>E
rAamF3W28K8jZ-B@r#9G3<_`069.@mr^$TFr^$TFr^$iM65UP38jZ/K630)5rAam53W1]2.0C_B+[YJo
lMo`@"!LQ76MsF_6:sR:6:sR:6:sTA8d-q(CMS!,rGr!dF8^FePa%.+CBJWnF)1>f")Ds<1&ZG"F*mk,
!GccTC].`C=o`(2=ohN2Yl=`-Pl7EfXehkaV4=BPV4=BPV4@FZ!HW&TcMQ/mhYu@6kNC^ArQYMrcIU;5
ecX4KHZT/BrRM"pf)<nm`Wa&q]tLherj;`r^Amg)!=1FZ(]kit+n?HQ+W)@.)#cN#69.A!8jZ-:rCR&f
qDeXE3C5b"64#Y=3=%?;8kMEBrB^NF6N&nF0ff1e!@]c%.02.Po`)Z*!?kYE8cqs`8j`ML!(-ZW!(-QT
"]?d9CNF:iErgW/rHej(H\?HUCNF94C\VuHEs$2$>(lj$!HWVdEs6?#CMREqrF5k3A,KL19!SC#;O"#[
V6-ToXn/@lXei.0K`99qecFXYrS@_@hWN20`r40bf$;jlp=9Dmf#CUikPa6@f&#!/cIVs>rPf/W`kB'n
]sY8EN8OZarrEBSq\Tbc(`3f$&/Yrq&/Yrq&H*FN#U)2_3B9DdrB^f_6:sR:8i\Ud1&3g869.@m69.@m
6N/tG+UJ'>!CBEW630)5rAb*;3AE6;0e"jU.0:YA+gM%I+o4e?;F3uB8jZ-:8jZ-:8j`JK!?jf.CB\cp
F)u\LrHeX"HY[-gCCtW'F),i4F),i4F),i4F)+Akrd+`gHZOQ4F8]kT@r)$Q!Es"3=oqT*9$71trrH;f
qkXb(S>DaPS>DaPS>DaPSGf8l>)^bHcHb"df%/^/rS@S<hYkIic3W"Hf$;jlf$;kGc2j/-rn[n2hU^Q7
f$;kFcMbc]]`GOSrNu][s8TG*!=1.R(^)!!+W)Bn(]kid.K2=.695!2$VE`X6:sj:0f^sK1&X*46N/tR
69.@m69.@m69.%3.K)j>6;%2C!BELF3VtN3.5CcM"!K])[Jp1+[Jp1+[JKn'V8rW7rrF9@r^mDn8lA8Z
8kMGL8cV3W8cV3V8dA62;JU>hF)1_qrHeX"H[B8uCBnorF),i4F)1br#A\BrF"'_.K`-6$F*htLCNKAg
rF6.;@p3&6>#JQ(^&J$3^&J$3^&%a/hYdDprrH#frhTb"V6-SrntcSn8u9PQcIU;>f)=G,kMG(p`W=B)
rQYDorltr'cIU:lcIU:lcH]UX!T*#<hYl"/cIU:d`m4P&rOi6>^&GD@PlJ/jrrBJ+rrBJ'rrAn5rrEZS
r>5kb(a0_5&/Yrq&/Y`c(_@Mq(_@N$#V#X2$pls@6:sR:6:s6m0ff4f!BDn*3=@8A3D)V16:sR23C<[)
#;J4n3AE6;1&WO)+XnQ`3AK+bh>[R+8kMGH8e=<]6:sR:6:sR:6:sR:8f1J)CB8KlrGr!dF8gLlCL^ji
@r#RiA+sa=F8]kU;Aa3IHi8!dCNKGi!FopDA,TR7;Hct%>#M[+!Eu#lV%p,/XehkaV4=BPV4=BPV4=BP
V56edrQYGpcMc;phU_\_!7(J]!RA^Uc2sh7`r=fqf&$AVrQYSdcGml;`r3RO[CuOH!L/PZs7?6l#Upqp
(]kit+n6BM!&=I5"%#"73W28H8jZ-Br@nC70f^uY3WBrq8d@[T6:sR23C<U'r@n=%1&EC'+[RXXs1SF3
!4De*^Ae6`6;m_R!`DWgrCR&Vr^m/Wr^m/Wr^m2&A,^6EF)1_q!IJndHN7j\@fpLVCLd0Uq.g$u0nfLP
!HWVdErg&trG)FDC].c?=p7f69)nq)rr2u3])Mt<F/>_8V6'`oriP^e#!'B:cHb"drRM#+f)=G+`kD8h
"4"p3`r=6``qms_`d;dirS@_/hU^9'f)<nm`W<cmrOiNF]sY8MV2YHS^&J$3[HRY=rr>(U(_n22+V5J%
(_@Mq(_@Mq(_@N$!&6JgrAamF3W28J8jYin0e)uS'KIm.0f^sK0f^sK0f^sC#VeY<6;%2C!]`S-r](!6
3W1Z5.5CcM"X,<<+ZV!WrrH"aqaqK!8l@uJ6:sR:6:sR:6:sR:64a?2CL_-qF)1Yo"+,B9>5;Y3CL_-i
CLd?Z!+Z"D"(Pga>5`dKF*mk,!GccTC].`D>%@M7"]AN%;Hc]:s6'C_N1BdA's4=7S>DaPS>DaPS>DaP
S>E&B^!=Xrc2lMArRM&,f%0i6"3/$o^&,ePcGn/LcMkfdcGmk%V>]9LecF(IrQbA]!PQMO^&>>@XgO[X
Zi:%31&Vpm+W)@>+X-Cn!WY58rAamF3Vu,F8i\UTr\==*%ll@)0f^sK0f^sK0f^B_6N0RX6;%2C!BELF
3<:ipr@n=%1&WO)+XnQh+aa4g!58C3!58C3!4D\'!4C&NrVlmA;Ys&i;G'hb8j`ML!(-ZW!(-ZW"@>]l
CLd<YrGr3jF*htTCL^QH@gd'^CL_-iCL_-iCLd?Z"_2=?+`i>8Hi%jfCNF9,@r)$Q!Es"3=p7f-;Hc\W
rr2u3rr2u<rr2u<qYpQ/lMocA!EtH\V$3utXei/%ntcCJ`l@u&!S5Qped:3ahTigJ`kBC*q8NQ_`m2TL
rl,&cS5Rr;h>u3arRM"pf)<nm`WNoo]tFHS^&>>@Xf[PYrr2u3rr2u3rr2u+qYpQ'a8Z/p&Gm:S+W)@>
(_@Mq(_@Mq(_@P`&-)_01&X*5695$3r^$T>r[@k&.ISto&.hH#9)V'Y3C5_mrAb*;3AE6;0e"jU.K(Fi
.DYuTrrZ.c8j`DI'2hFp6:sR:6:sR:6:sR20c4D9A,U0DF)1_q!deuur`T>4>5)M0CL_-iC]7iD1&cM#
F*me*rG)FDC].`D>%@M7!E*,#;?0>^s1\L8PanS?rM:I8V6-SjS>DaPS>DaPS>Da?HTAdZ`m2TLcIU;>
ecXd[`jP]W"ie6q]uIba`r<s\]uJ'5F8k#(f&#!/cIU:lcHaGTrPnfL!O]W>[0*P=V2Vb\!>%!_(^)!!
+W)Bu(^^fc#RCD9&32I*1&X*5694s1r[@q(.5<:G0`X620a.P38kMEBrB^`L69.@m3AEPk0``^Xr@%sp
.3UE#>5u;8rrBIis4%&L.8p%8#?"/l8lA8R6N0Ra6:s6m+W(b60l(:tCB8KlrGr3jF*h)#>%:b3@fU<D
@fU<D@g[!]@i/^&HZOOTHi8!eCNF:jCB7p\rF5k3A,TR9;Hct%;KMlOrr2u3])Me7Pl%9XXel$!!1`n^
#E3_-69.YR`WF0*`r43]ecXd[hR30m"3/$o^%]MN]h5]hhU^Q\ed9XQcHaGT`l>^3rOi6>^&>>BXf[hX
s1SF3!4C8Tkl1Z<&Gm:V+W)@>+V5J%&-rOA!!j,Q.4P3M!BDn53<;H,r^$T>q^Dh+.5<8+.5<8+.K2%%
.K2%((^NH#rB^TH69.C23<:ipq_A$u#U(W?.3Ti`3WHGc"&_HX6Mj@g;G'hR8jYNe+V5J60g]&I@q0:a
qeH@VCNFQDC\q98@g#tF>%:b8@fT^/@g,1BF*htTrGr!TF8]kV@r#RirF>e0"&`<#>5hD">.4J0s8SVd
V#d]priH[#V4<3K;E6a8F-O)G`kD>jrQYGpcMlB!`jN4f[Cs!D]`?(O]aDcm`kBBV;V'^UhYl"+cIVs>
rPf)U`kB'n]sYQP[Jm9.PjA@krrH:Pq\T>W)#YTX)#aL:&.g#a.02.Pr@n=51&X*5695!2!&==!#;IY^
.5<8+.K2%%.K2%*.1d=g6;%,A!BELF3<:ipr@n=%1&WO/+XnQ`+XoE<s1SHGrr3,7s1SHGrr2u+rr2u+
aSu9V;Y`of;G'hZ6N.f,.61!u@p3AGrF>eA"*87!C]/;SA,9@2@p3AGraPq3qI9b60faT%HZOQ4Erg&t
qeH@FCL^jXA,BF2;Hcut=p+f<s1SF3"MOiKs1SF3!65$<!57^uhZ!V0Pl7E\Xei.rrN-<`8i]4JH^qMB
]`H-drPf#d`m2l\cMc;o`r<@J]sYP]q7R9X]uIb*]uIa,Hf!?1f&$AV"jY]EcGn0.`W<cmrk/BH[CuOH
#Hb+mPlJGs^&J$7^&PeG^&J$3[Jp1+[E8FPV/n(&(_HQ]![/C(rYP_\+XnT3.K(t'3AENKrAb0N3C4l<
+XnQ`+o*Pg0e"jV.0M@S.0)+$63B573C<[)"#2ej3W1]0.01S@r#l&#_>j0-!MtJK8cV3T8dSBf;G&r9
;Gp[rrE953>5_q3CLd<Y#BO[%CNEZ_;Z9i";YsVtA,]X?@p3AG@p3%Q>'#%3Hi8$_CB7p\rF5k3A,TR3
;Hiur!*]*r^]+J6N/X:'SGT,fXei.rKUfHPrNugB[Cs8n^&>qOcGoh."kLuM[C*.6[0=7O]sYP]rk/<>
rk/EA[7[RuecF(IrQYYfcGml;`kBCj^&>>>XgS/1!1^Cq!gGDgr>5YS+W)@>r?27l+XnT5.0D:R0e*&U
q`+sL3C5_T+XnQ`+o*Pe1&`U-0e"h+0d-fh9)CpU3C<U'#;J4n0e"h+1&WO%+Y!C6"=Z>ks0_k+!58C3
!4Dh+!58C3!4DJ!e,KN?8lA"Q8c_g^qbdGu;Z0c"@p8h@!Gc3DCC,&tF),i4>#JO%pKA&:>%:`G>%:`G
8g/8&F*mk,!GccTCBJ?f@r)$Q!Es"3=ohN)r_i`!!WTk4rrBb3rrBb3rrBb3rrBaPrrJX:qkXCsV6-Tm
XT>i3rNu[>[Jdf;`XC)3cGn/Tf$;jl[B9D8#JIOY[Cru][JIQ?[Cqesf&$;T"jY]EcGn0,`r3RO[CuOH
#HbD9Xdk@M[Jp1+^&J$3[Jp1+^&J$3[GV#Jrs"us.2WU5&H*FJ+W)@>r?27l+XnT5.02.Pr@n=51&Es2
1&`=&.3U,`.3U,`.3\F7rt,/r"$&\.6N&nH0f^sKr@n=%1&WO%+Y!72!'.Cc#,Pg-8jZ-:qaple9)VWm
>#JO%>$>E>qdTYBA,U0EF),Rj;?L*#>#GB);Y+)l1&>qlCNKGi!FopD@fonE>%@M7qGI;s\,ZF,#+U%1
V4=BPrM9OsV>[Ls[B9>6rOi6O^&>tJc2bl`XT>i3pU("7rj;pC[CrthC])`acIVs>!QNF``W<cmrOiHD
]sY8M[B6k9XT4mXs6BXArr]*N.3\R*"!JL))#YT[.3U,`r@%b%.K(t%3ALCk!CAgF+U9G>.3U,`.3\C6
!<=SG630)5q`+[33W1Z5.5CcM"!K*:.K1It.5<RW[K!Z7^&PeFrrBb3rrBIFrro6X8lA8JrCR/i8lA:[
;?L*#>#P<&#@gqI@r#RiA,U0DF)(etC].-9>#JO%>#JO%p0%J?;YtM;CNF94rG)FDC\qTF>%:`>;Hirq
$!L7,^&PeG^&PeFrrBb3rrBa[s7H<mV3Hr8V#d]prN-+.Xo5X.]s[gP!QMhO`W=B)rQYStcF'd^XnB(-
]sYP]]sYOOV>JgEcIVs>!QNF``Ws2s]tLhe[CuOH%B[%?Xdk@M[K!Z7^&PeFrrBb3rrBIErrS]g.JO_^
+W)@>r?21j+oNhj0e)uS!BDn43<1f0+UKS@.3U,`.3U,`$7R,I(]ZQ_3C5_mrAas73AEPm0`rjZ.5CcM
!?iog+TOO.rs#<0;F3uB8cV3V8cqs`;G-mc!ErD"=oi,:qdTYBA,U0DF'AB;!*]A"&6_t8;Hct%;Hc[0
@rlF,CNK;erF5q5@p3C@=ohN)qbdGe>2]G0rr\d<V4@FZ!Ni3qXT>i3rNu[>[Jdc>`kD>j!RA^ac2k>L
riH@3XgP:=Xo>^.XnoF1S3jp?cIU:lrQYG`cMb``]uL#a!O]W>[/mD;rN-*sS?r4uS=GNm.Jak^+W1)"
!@]2h.0)(&.K(t%3AL@j!%Idg(+CCU+XnQ`+XnQ`+XnQO#XUO<3C5_mq`+[33W1Z7.5<8+r@%gl.3U/>
+UBMO6N=In^&PeFrrBb3rrBads69OdS>DHB>5Chn;G'hZrDEZ";Z0c"@p8h@")DC^A,U0FF),i#q,.Z*
;Hct%;Hct%;HcsY.K"5fCNKAg!FopB@f]bCrE95">5_>$8lAhr"ol:9^&PeFrrBb3rrBaLs8JMhH`d4B
!Ni3sXTPu5[B9D8!PPo>]`H-drPerb`m2U'c3C\YXgP:=XT>i3osFgR>5m(ZcIU:lcHaGT`m4P&!PQMO
]`GOSrNu[.[Jd34S;dKUs1SHGrr2u3rr2u3`W,o:"e;*(+X%Eo(]tou+W1/$"">BB+oNhj0e)uS"$&(r
1&a07.3TQ"+U0A=+UB5O6MibF0f^sKr@nC'0e"jU.0C_B+Y!@5!uN1)3U?^drro6hKM#-/q+:Zc9)VWg
>#P6$!Fo=1@f^@Tr+c@3;G-FV"sH<KF),i4r+c=CC\qTB>%@M7"&`<#>5_>$8lAPjZMt)uS;`E'SGT,`
Xel$!riH@3XgPRM[JRW<`kD>j!RA^acM4LQ[B6j=[B6j=[B6i?K[//of)<kp`m4J$rOi<@]sYQP[JR',
V4?-:h#@MIS7<]crYP_\(a0an+TX#8q^DP#.Jkh%3AENKr&OBm!%Imj"=YJo.73hj"#2ej3VtN3.5CcM
!$MCm+Y!=4%Oj,)s0_m7s0_m7s0_m?^Ae82V/uE(!E)Pe;YsVu@p8h@"D_L_@r)!X!-@R+"rLNbCNF94
qeH4BC\qTB>%@G5!E*,";@cAt;Ifa?s1SHGs1SHGs1Q_Xnc&]]S:mF2V$!irXekuu"1>8=Xo5X.]s[gP
!QMhO`WON+cGok/!2]Xr!4Dg.(:C9PXgP:=XgP9'Xk(eKcIU:d`m2TLrPelO`r3RU[Cru][C*-EqlL6r
N;p<c[K!Z7[K!W8s1Q,G"e:fT+W(df(]bcsq]Pth+o<\h0e)uS%66.'0f^sK+X%[G(a0aq+TNAY+oWVc
(]aCm"#2ej3W1Z7.5<8+r@%gl.3U/=+U8i-(a1%Ws0]04"/VMt;?9BVqaple9)DKe>#P6$!Fo=1@f^@T
r+cL/;G'hZ;G-pd!)!5g#>.ll65XKRF8]kV@r#RiqdTY1A,TR5;Hct%rDEkm;G'hZ;ZFGjs3UcLS<SAs
V4@FZ!Ni3sXT>i3rNu[>[JRW<`kD8h"jY-5S?8XZXT=YQqTeuX!klUerk/EA]sYQP[/mD;rN-7"Xeh9^
[Boo4S-,!J.3\[-"!JL))#GHW.3\X=r@.Uu"$&(r1&O$7(a0_>)"o*R#S?el"#2ej3VtN3.5C]K!?ioh
+Uo8;.:`Ccs0_m7s0_m?fDk"5"f7`cS7>Iq8cqs`;G-ga!ErCu=oi,:qdTYBA,9sH8lA8Z8lA8Z9);Hc
.JITY@r(sO!Es"1=ohN)qbdJf;GmjKs1SHGs1SHGs1Q)FrL<k7r1sLtV6-TmXT>i3qmHC9"3/$o^&>qQ
cGn/LrltP7Xn/[pA,FOP`m4J$!PQMM]`GOSrNu[.[Jd3:V6,uHs0_m7s0_m7s1Q;Lq>UYhS<QVh+V=Mf
!?i<W+TX#8q^DP#.JY\:3AENK3>`nV+W)@>+W)@>+W)$r!$O?W3AEPi0`rjZ.5CcM"!K*:.Jk7l(a0_5
+XudXlMoW=#+VNS@o>ocqaple9)DKe>#P6$!Fo=1@g?dZCL_-iCI7tl$W9Sp8lA8Z8i[_*9)NH,@r#Ri
rF5q5@p3C@=p%Z+;Hj&t#Z=8m8lA8R;G+.m".YmGHhsQ@Xei.rrN-+.Xo5X.]s[aN!lhpnr5KT!`m0gN
V6-SrV6-SrV6-SI8j\cf`m2TLrPerQ`kBCj]`Y[U[CuOH!Nid,XTPE%V2W4inGiKX"-c\,+oW;\+W)@>
r?27l+XnT3.0D:R0e)uS"$&(r1&a0C(a0_>(a0_>(a0_%!#RHg3<_,t0f^sKq_8+#1&EC#+Y!:3%2^6*
.4KWD[K!r?^&PeFs1A:8V4=BP@nKYu8cqs`;G-mc"'ST+;YsVu@p8b>"`%U`@r#TRCC<I,8lA8Z8lA8Z
66QCA3Fhu&"_2=XCL_/W@f]bCqcX"u>5M2,8lA8Z8rWe`s1SHGs1PrBrgWtQ!ecf?rhT_!V6-TmXT>i3
qmH=7!QMhK`Wsf/cBPH-Xel$!%Ag1k;E8g3cGn/LcGn0,`W<cmqn3$<^&>>>XgS,0%Ag2'V2UrE[K!r?
^&Pe1s3L`ES-,!c+Y!=+"!JL))#GHW.3\R;"YhG\.5<:K0`j?i1&Mjs+W)%%!!k#.3AENK3VbB5.5<8+
.4GEL.3U,`.Jk7h(a8hp"">Dn[Jp1+[C#r=S=HFGF%T=sqaple9)DKe>#P6$!Fo=-@fpLV@m^#a$Rlo9
>%;>XCL_-iC\qTD>%:`GrE9;$>#JQ&;?KNh8lGU["&_bk^&J$3^!Zl@s8JMjP_>!trhT_!V6-TkXT>i3
rNu[>[JRW>`kBC*qSiN"rM9e%V4:^L;Q[saq8NNM`kBCj]`Y[U[CuOH!Nid,XTkW(V6-SQrrBJ+rrBI5
s8AGhF"o-C(]tou+W1/$"">BB+o<\l0e"h+0e*&U!'1$5!BDk90c2)5(]t<L#U01-"Yi"l3AEPi0`rjZ
.5C]K!?ioh+Uo83(a0_N0r=oXs0_m7^&Rm-#+V3[S:jL<r^m8j8lA:Y;?9s!qcX)3>%:b5@g?dZCL_-i
@m^,d"#1W99)`T+A,^6E@r)'R!,MIA!Es"1=ohN)qbdGe;Z98o>#ML&^&PeG^%23@s8AGmN-h\'Xei.r
qlKn,Xo5X.]s[[L"3/$o^&#_XPc^daV/nsqPg7:o`m4J$"hhph`kBCj]`Y[U[CuOH"0Ju5[Jd38V6-Sr
KWY9^s0_m7Z2Y*"P_;%?+W)%>";i:!+W1)"!@]2h.0VFT0e"h+pb;p`(_?ZI)#c5i3VP63.5<8+.5CcM
"!K*:.Jk7j(a0_>rYP\[+_0+'ec,]IS;dGFqaple9)DKe>#P6$"_1_G>%:b5@gm-_@mWdB(_A];CL_/Q
@fonE>%@M7"&`<#>5M1u8lGRZ!`DX3WrEHsPa$NbXehkrV6-TmXTPu5[B9D8"hh=W[Cs!F]a_up`kBC3
]p,@?8i_73qSi]P`kBC*`r!FO[Cru]rNua0[B6k8XTt])V6-SjPa'#ali6pR$'\pK.3TNO(a0ap+Tj/:
.3\L9"#25Z.J>J"#QPDj0ff4f!'0d."Xu/T0e"jS.01S@q]QUi+W)@>+Xnl?[K!Z7[K!Z7[K$98rsbfp
V4=&k8lAPZ;G'hZrDE`$;Hcuo=p&8<@p8\<$#=$S.2XdC@r#QUCL_/Z@fU<A@g-%G>%:`GqcX"u>5M20
8lA8Z8kMuRs1SHGs1SHGs0]97!<;te#()$*Xei.rqlKn,Xo#L.]sYP]rOi]\]uIb*]uIb*`jK;:CUNuX
#JJ-j`kBC*`r3RS[Cru][CuOH"0Ju5[Jd3<V6-SrV1elVs0_m7s0_m7lMns*%@iZQKL-h2(a0_>(a0an
+TX#8pF-8#.5<8+.K(t%.3\I@!%In%"">rR1&36u+Ta)9.Jk7l(a0_>(a8kq"tBS[s0_m7XT&L$S=GOA
8m;3d"&_`h9)_`f;?L*#>#P6$"_1_G>%:b5@f]b2oO@u,@p3C<=p%Z+;Hirq"%lH`;Z',k;ZF0)^&Pdm
s5!\_S<TP&H]5)'Xei.rrN-10XgP;.[0++M]s[aN!65#O%*#ugV8g3g]uIb*]uL&b!64iJ!O]W<[0*P=
XgS,0"/W,rXo5'ss0Vt/[K!Y8s8JMiP]JSY+T`K()#GHW.3\L9#Vdb_.5<8+.5C9G"Xu/T0e"jS.0UkD
+XnQ`q]QIe+W)@>+W)XWSH$"s[K!YIs7-*sV4=BPHV-n.;G'hZqbdGu;YaK"@p3AG@p85/!*]A3"'T2<
A,BF3;Hct%qbdqs;G'hZ;G(+ZV>n7/^&Pe9s6BX5s8JMjP`0CJpoOY+XgP;0[0++M]s[[L'ZRi+]uIb*
]uIb*]uIb*]uIb*]uKr_!O]W<[0<\?XgP:=rN-O*Xei.rXa@2M[K!Z7[B'<:SH#+DP[c-c.2X3F+W1)"
"t:]E+XnQ`r$`=7.5<8+.5<8+.5<8+.5<8+.5<8+r[@h%q'cCh.3U/=+U8i-(a0_>(a8kq"<meds0]ZB
kPkRZs8JMoF$`K&8lA8Z9)DKi>#JO%>#P6$(h6`Z>%:`G>%:`G>%:`G>%:`G>%:`G>%@A3"&`<#>5M2"
8lA8Zr(7)is+LEcp&D>t$_76ePam)9S@,2qV>I@s[B6j=qm?U@[Cru][I_*,]`Y[U[CuCD"0Ju5[Jd30
V6-SrrhTb"s-3PkX8i(sr1!ePA,[nX+W1"u"">BB+o*Q(0e"h+0e"h+0e"h+0e"h+0e"h+0e"h+1&EC'
+XnQ`+Y!:3%i?H,+W)@>+X(Y$[K!Z7[H%;,rsPZnV4=BHF%T>6;G-ga"^4f-;Hcuo=r:aQ@p3AG@p3AG
@p3AG@p3AG@p3AG@p3C<=oqT*;?0nt;@cAt8lA8Z8lA9.s0_m?s1PB2r1!nSKQEZkr2g+([B6j=rNumD
[Cru][Cs!@]`?(H]`kgW[Cru]qm?U0[B6j=[JR'6V6-SrPa)3Us0_m7cMuPs$^?mGP`0*,+XnQX)#GH]
.3U,`.3U,`odKkqnL4\d.3U,`.3U/=+U8i-(a0_>(a8kq#:Ug3s/l=/s.fVmS-P:"8jZ]Z;G-a_"'ST+
;YXGn=p/>=@p3C8=p7f-;Hct%qbdMg;G'j`8d80cHiLMR[C6,&rs4jRS<T7kF,[O'XTPu5[B9>6$,*a[
[Cru][Cs!I]`>J>]a;*[[Cru][Cru]q6^=,[B6k6XTPE%V60`n#-EiKs/l=/li4Ho!M'2hS-=jm3?]h+
qB5qi+XnT).0)+%.0)*s.0(Oj.0UkD+XnQ`q]QCc+W)@>+X&9`HiL5J[@mO,V>mB^V3HX*6;h"`;?L*#
>#P#s!+Z"3"CkVF>%@P8!+Yb,"]AN%>#JQ$;@Q5r8lA8Z8m4Q?s0_m?ec3kn!M'2hS->.9CO<1kriH:1
XgP;,[0OCQ]sYP]]s[jQ!4Dg>$+7IS]sYP]]sYQQ[/do;[0<\?XgP:=qlKjp#d'r2KUi(Es0\Et#+Y^`
Pam(mr@.Rd#9b6>+XnQ`+oWnj+oWnj+o3Vf+oWnq+XnQ`+XnQ`q&p=e+W)@>+W)@>(a1@.N;p$[XhXnm
rrJYirgX.N>!bhZ>51u!>#JO%>#Ocl#?"`'>#JO%>5;%u8lA8Zqaq)k9)k.U[K!Z,s/H#*SH#+DS;_N)
S>EXkXTc,7[B6j=pU("7rj;g@[C$%C^%Jc8XgP:=q5k+&Xei.rV6-9fSH#_kXfDElrrJXSrgX(TP\X1r
.0)+%+U9G>.3U,`.3\%,$R$rB.3U,`.3U,`.Jk7t(a0_>+XnQ`A#6<8s0^_`^&JM;S>DaPS=FY18kN8j
r_`u);Hct%;Hcu`=p7f-;Hct%qbmAj%8'Mj;G(+j8oq,B[K!Y'rrJXSrgWtQ%?uNmH^(Y?XgP:=XgP;,
[/do>[0XIR]sYP]]sYQQ[/do;[0<\?XgP:=qlL=(Xei.r[AAP8Xf]#2[E8Hprs5.pS<TP.KPNpR.0;4Q
.K1J-.3U,`.3U,`.3U,`.3U,`.3U,`.3U,`.J4hh(a0_>(a0_>r[@tRs/l='qu<,b!hB:ergX.NF':n&
;Z9kr;?9s!&mA1:;Hct%;Hct%;Hct%;Hct%ohkla;G'jd8dJ<m8j[=n[K!Y>s5a1fSH#+DS<T7kF*!SB
rj<$6[B6j=[B6j=o!JJ"rj;j1[B6k9XT5d+XUV,/V6-SrXdj`ks/l='k5X`H_uC+7Pamu.P`0B]3AD]V
.30Q\+XnQ`+XnQ`+XnQ`+XnQ`+XnQ`+XnQ`+XnQ`p*'Da"X,mAPlIifXf_W*P5bodS>DaPS<SA1;G'R\
=rC4A;Hct%;Hct%;Hct%;Hct%;Hct%;Hct%r_``"qbdhp;G'hZ>$=fr;L=r6rj;e,[CcIkrtCoeS<TP.
P_=C1KTrUH[B6j=[B8l)#HbD9[B6j=[J6j/[C)iiH]4g$riH5$Xml@`rsP@sS<TP.P^@1D3?e5JrZM7j
rZM7jrZUnW"W/C"+W)C$.0h"Vs*OdJs/i!plMgpUs/#[a#)%>5;F3uRr`T>#>4tho>4kc*8lA8Z8lAPj
;GohZs,?u[s/jlP[JpN&s.#=DPa%,[rd+[1V>R_7XgP:=XgP:=XgP:=XgP:=XgP:=q5jaqXf\u;Xeg](
s-3Pcs/h7[r;R1qPamu.Pam\cCKa=jr$_h).5<8#+Y!C6!%Iaf!@]2j.1S'].3U,h6=Y\=Xei0"[D;g_
ru@l*V4=BPV3HpcCKaV&;G'hj@p3AG>#JO%>#JQ#;?L*#>#P?'s&/hg#[2;6V7!G-s0_P"P5c&_Pamu.
Pamu&KS4DnH^'`pV>dk&^&,2GXgP:=XgP:=XgP:=Xo>^;Xeh8@H\@'BS?8Wis0\p-fDcDPs.#=DPa%,[
F)+rO3B8N;rZMFo+XnQ`+oWqg+V#qM0f_j0F8qc#V>mClV;;0Grskn*S=HFGS<T7bHYZe_;Z',i;G'hb
>5V:u9)V?j;Gp\6K`@mFXoGO'XcreOrsG:rS<TP.S<T7kK`$0(N/X!cS=HFGXei0!V%T;gP`1QSKQDKn
PlISMV>mClV9&\Frr\ekS<X#C!0mGP"dG71H[Bi5CCXNX;Hct%>%;>`F*i7mN;B@Os/l.tK)Z5YV>mB^
V4=BPV4=C]S-,"7N.h1W")DsfF8fq_F)u\TKT).[V5:;jriH5$Xg%iKrr\ekS<X#C!0mDO%$[!8P`1QS
N.ck2KR<ZN"cSD)Pan!7V#gUujo:>?$Cq-dPaqcDPamu.!h>e\rgXGtS=HGUS=HGUV>mClV3_/5rt2+-
S=HGUV4=BPV4=C^V4=C^rhTr$V5:<oV>m[tXipa=rs>4qS<TQDS<TP.rgWugrgXJuS=HGUS=HGUV>mCl
V>l/In,EBXrr34ns.'+Zs.',gS,iTfS.)6aV>mB^V>mClV>mC"s1841V>gK"SH#GcV>mClrhTVpqkX=q
s8Jhus/l='s/##\L&V4Es8NB)SH#,ZSH#,ZrgWugrL=:mS>H7^S>H7^s/#alT`9WDlMlJ9K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&lMlJ9K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&lMlJ9K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&!<7Q~>

%%EndBinary
grestore
np
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 4298 43 <000100a40000052205ba000b00d8b9000dffc0401a13153404031e090aa0
0ad00a020a0502020b0808050820070706b8ffeeb40f0f025506b8fff240
0b0d0d025506100c0c025506b8ffe040180b0b065506010c0c0655065d80
0d010d020b200120000100b8ffc0400a13153400201010025500b8fff6b4
0f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500080b0b065500
b8fff7b40c0c065500b8fff840160d0d0655005d0c200d01200d500d600d
700d043b59182b5d7110f62b2b2b2b2b2b2b2b5d3cfd3c105df62b2b2b2b
2b3c10fd3c003f3c3f3c395d2f3cfd3c3130012b33113311211133112311
2111a4c202fac2c2fd0605bafda6025afa4602b3fd4d>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/H 43 def
end
PBAAAA+ArialMT /Encoding get
dup 72 /H put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 28{/.notdef}rp /C /D /E 
2{/.notdef}rp /H 6{/.notdef}rp /O 3{/.notdef}rp /S 3{/.notdef}rp /W 
9{/.notdef}rp /a /b /c /.notdef /e /f 2{/.notdef}rp 
/i 3{/.notdef}rp /m /n /o /p /.notdef /r 
/s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
379.56 642.745 mo
(Human )
[-10.6478 -8.19769 -12.2861 -8.19769 -8.19769 0 ]ysh
397.257 650.125 mo
(annotator)
[-8.16077 -8.23462 -8.23462 -8.16077 -4.13135 -8.16077 -4.13135 -8.16083 0 ]ysh
207.42 683.605 mo
206.16 685.585 203.4 686.185 201.3 684.985 cv
200.22 684.385 199.44 683.365 199.26 682.165 cv
196.38 683.845 192.66 682.945 190.92 680.305 cv
190.26 679.225 189.96 678.025 190.08 676.825 cv
186.3 677.665 182.58 675.505 181.68 671.965 cv
181.26 670.465 181.44 668.905 182.16 667.585 cv
179.76 668.545 177 667.525 175.92 665.305 cv
174.9 663.145 175.86 660.565 178.08 659.545 cv
175.26 659.185 173.22 656.725 173.58 654.085 cv
173.76 652.825 174.36 651.685 175.38 650.905 cv
171 647.605 170.28 641.665 173.7 637.465 cv
172.02 637.105 171 635.545 171.36 633.985 cv
171.66 632.905 172.56 632.065 173.76 631.825 cv
172.14 631.705 171.06 630.265 171.3 628.585 cv
171.54 627.325 172.44 626.245 173.64 625.825 cv
172.86 624.805 172.92 622.945 173.76 621.745 cv
174.18 621.085 174.78 620.665 175.38 620.665 cv
173.46 619.705 172.8 616.585 173.82 613.765 cv
174.66 611.545 176.4 610.045 178.14 610.165 cv
176.88 608.785 176.58 606.985 177.48 606.085 cv
178.2 605.365 179.58 605.485 180.78 606.445 cv
178.62 604.105 178.86 600.625 181.32 598.585 cv
182.94 597.265 185.16 596.905 187.14 597.505 cv
188.28 594.745 190.62 593.245 192.66 593.965 cv
192.72 589.645 195.24 586.345 198.3 586.585 cv
199.62 586.705 200.82 587.425 201.78 588.625 cv
202.5 586.345 204.42 585.265 206.04 586.285 cv
206.58 586.645 207.12 587.245 207.42 587.965 cv
206.88 586.825 207.42 585.505 208.68 584.965 cv
209.88 584.485 211.32 584.965 211.86 586.165 cv
212.16 586.885 212.1 587.665 211.62 588.325 cv
213.78 586.585 217.02 586.765 218.94 588.745 cv
219.66 589.525 220.14 590.485 220.2 591.505 cv
220.68 589.825 222.24 588.985 223.68 589.585 cv
225.06 590.125 225.84 591.985 225.36 593.665 cv
225.24 594.085 225.06 594.445 224.82 594.805 cv
228.54 593.965 232.32 596.125 233.22 599.605 cv
233.58 601.105 233.4 602.665 232.68 604.045 cv
234.54 602.965 236.64 604.285 237.36 606.865 cv
237.84 608.665 237.6 610.645 236.76 612.085 cv
239.1 611.665 241.38 613.105 241.8 615.325 cv
242.22 617.245 241.08 619.165 239.1 619.825 cv
240.96 619.225 242.82 620.485 243.24 622.765 cv
243.66 624.925 242.58 627.205 240.78 627.925 cv
242.28 628.105 243.48 630.085 243.3 632.305 cv
243.18 633.985 242.34 635.365 241.2 635.785 cv
243.06 636.865 243.9 639.865 243.18 642.505 cv
242.7 644.065 241.68 645.205 240.48 645.565 cv
241.74 647.125 241.62 650.005 240.24 651.985 cv
239.34 653.245 238.14 653.905 237 653.725 cv
238.32 653.905 239.1 655.825 238.74 658.045 cv
238.38 660.205 237 661.885 235.62 661.705 cv
235.14 661.645 234.72 661.405 234.42 660.925 cv
235.68 663.325 234.66 666.145 232.08 667.345 cv
231 667.825 229.74 667.945 228.54 667.645 cv
230.46 670.045 230.46 673.285 228.54 675.625 cv
226.44 679.105 223.2 680.845 220.2 680.065 cv
220.92 682.465 219.48 684.925 216.9 685.645 cv
215.1 686.125 213.12 685.525 211.92 684.205 cv
210.36 685.765 208.38 685.585 207.48 683.725 cv
207.48 683.665 207.48 683.665 207.42 683.605 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.733 .549 .867 colr
ef
.295 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
207.42 683.605 mo
206.16 685.585 203.4 686.185 201.3 684.985 cv
200.22 684.385 199.44 683.365 199.26 682.165 cv
196.38 683.845 192.66 682.945 190.92 680.305 cv
190.26 679.225 189.96 678.025 190.08 676.825 cv
186.3 677.665 182.58 675.505 181.68 671.965 cv
181.26 670.465 181.44 668.905 182.16 667.585 cv
179.76 668.545 177 667.525 175.92 665.305 cv
174.9 663.145 175.86 660.565 178.08 659.545 cv
175.26 659.185 173.22 656.725 173.58 654.085 cv
173.76 652.825 174.36 651.685 175.38 650.905 cv
171 647.605 170.28 641.665 173.7 637.465 cv
172.02 637.105 171 635.545 171.36 633.985 cv
171.66 632.905 172.56 632.065 173.76 631.825 cv
172.14 631.705 171.06 630.265 171.3 628.585 cv
171.54 627.325 172.44 626.245 173.64 625.825 cv
172.86 624.805 172.92 622.945 173.76 621.745 cv
174.18 621.085 174.78 620.665 175.38 620.665 cv
173.46 619.705 172.8 616.585 173.82 613.765 cv
174.66 611.545 176.4 610.045 178.14 610.165 cv
176.88 608.785 176.58 606.985 177.48 606.085 cv
178.2 605.365 179.58 605.485 180.78 606.445 cv
178.62 604.105 178.86 600.625 181.32 598.585 cv
182.94 597.265 185.16 596.905 187.14 597.505 cv
188.28 594.745 190.62 593.245 192.66 593.965 cv
192.72 589.645 195.24 586.345 198.3 586.585 cv
199.62 586.705 200.82 587.425 201.78 588.625 cv
202.5 586.345 204.42 585.265 206.04 586.285 cv
206.58 586.645 207.12 587.245 207.42 587.965 cv
206.88 586.825 207.42 585.505 208.68 584.965 cv
209.88 584.485 211.32 584.965 211.86 586.165 cv
212.16 586.885 212.1 587.665 211.62 588.325 cv
213.78 586.585 217.02 586.765 218.94 588.745 cv
219.66 589.525 220.14 590.485 220.2 591.505 cv
220.68 589.825 222.24 588.985 223.68 589.585 cv
225.06 590.125 225.84 591.985 225.36 593.665 cv
225.24 594.085 225.06 594.445 224.82 594.805 cv
228.54 593.965 232.32 596.125 233.22 599.605 cv
233.58 601.105 233.4 602.665 232.68 604.045 cv
234.54 602.965 236.64 604.285 237.36 606.865 cv
237.84 608.665 237.6 610.645 236.76 612.085 cv
239.1 611.665 241.38 613.105 241.8 615.325 cv
242.22 617.245 241.08 619.165 239.1 619.825 cv
240.96 619.225 242.82 620.485 243.24 622.765 cv
243.66 624.925 242.58 627.205 240.78 627.925 cv
242.28 628.105 243.48 630.085 243.3 632.305 cv
243.18 633.985 242.34 635.365 241.2 635.785 cv
243.06 636.865 243.9 639.865 243.18 642.505 cv
242.7 644.065 241.68 645.205 240.48 645.565 cv
241.74 647.125 241.62 650.005 240.24 651.985 cv
239.34 653.245 238.14 653.905 237 653.725 cv
238.32 653.905 239.1 655.825 238.74 658.045 cv
238.38 660.205 237 661.885 235.62 661.705 cv
235.14 661.645 234.72 661.405 234.42 660.925 cv
235.68 663.325 234.66 666.145 232.08 667.345 cv
231 667.825 229.74 667.945 228.54 667.645 cv
230.46 670.045 230.46 673.285 228.54 675.625 cv
226.44 679.105 223.2 680.845 220.2 680.065 cv
220.92 682.465 219.48 684.925 216.9 685.645 cv
215.1 686.125 213.12 685.525 211.92 684.205 cv
210.36 685.765 208.38 685.585 207.48 683.725 cv
207.48 683.665 207.48 683.665 207.42 683.605 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
211.74 650.485 mo
(Web)
[-13.9335 -8.20654 0 ]ysh
gsave
211.32 524.065 mo
207.66 517.825 li
221.4 493.825 li
202.62 461.065 li
206.28 454.825 li
228.84 493.825 li
211.32 524.065 li
cp
203.94 524.365 mo
181.26 484.945 li
198.84 454.825 li
221.4 493.825 li
203.94 524.365 li
eclp
181.2 524.416 mo
228.84 524.416 li
228.84 454.816 li
181.2 454.816 li
cp
gsave
grestore
/139219196.0 
<<
/ID /139219196.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
32 0 li
32 128 li
0 128 li
cp
clp
0 128 mo
32 128 li
32 0 li
0 0 li
cp
false sop
gsave
/1 /CSD get_res idxcs
clp
[0 -1 -1 0 835.977 257.892 ]ct
[0 -32 128 0 129.892 835.977 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,fQl+;bXs"p9GX+J;gj)@d"*![/\R:b!4gL'&TlfPikm&&=j"BLF<f%Z!NIO_D[J3?F8QTWiZ7/fP=W
`8\%Hb\fKaOML"!=gXoE/"TD3o,8=+CF>WEVfLJ__Lj)%8Z)'He?XESTM2?8W\mD^8ul'p1g5l^P?"j9
D063I,,ntI<[a;,4\iabX3g,(]Bu3KH,3W8[qkr>ja4jIXnRb`NnJQi=tVb8*L>N*^fn#]lt1#FQG-n:
)!pB80o!haZadZn+"MERkOH*q:1"Bmd,XhGrW]]UWSM9sqE:^nK<=$G[sEJBPA@G^CUa/Rk+d!ogMFK-
/m!t+amf"OrXQt9OmM9$qu)#*H`bTRIC[!smoT5N3f[^,!'+p9[ctT2)pn;m:V6E&^s=7RpHEN5qZ/tN
/(F=-O3@J&_%/@_$UPD'i=A9ePSj?e&C`-65`la2#Ji&u3t&nZ>O)g;0Us']`%]tZ(s#R-K,;T@FFP(H
d:@S=a,s>F'ZX'=EtcS+1iF#Hd3NK>`fZLF,tZOLXY!2p'U'ld19@f7bVCa$-q]Z@\M-R;7%$).o%^u'
aRWT..F5=ojZUtS7,pF,F$/DDcr2dY4A[gbh)iss,hkCVo,QFEcdPl+7oGT%5snM6Pqc'1PZ8l";jA(:
8^fNp$UrK#]fS7%1jplKe20=$<S*K^CKB';2/cRK'h*1GfMtpq;:_"DHW&GFFam?A'nq9>f2\*4EEkD]
bA^W$7DEKkG4hDM7Yh<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/139219196.0 /Pattern get_res
[-1.54384 0 0 .557814 229.086 455.251 ]make_pattern set_pattern
f
2 vmreclaim
grestore
.461 lw
211.32 524.065 mo
207.66 517.825 li
221.4 493.825 li
202.62 461.065 li
206.28 454.825 li
228.84 493.825 li
211.32 524.065 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
203.94 524.365 mo
181.26 484.945 li
198.84 454.825 li
221.4 493.825 li
203.94 524.365 li
cp
@
gsave
187.2 461.545 mo
173.52 484.945 li
196.2 524.065 li
213.66 493.825 li
196.68 464.485 li
187.2 461.545 li
eclp
173.46 524.116 mo
213.66 524.116 li
213.66 461.536 li
173.46 461.536 li
cp
gsave
grestore
/139218996.0 
<<
/ID /139218996.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
32 0 li
32 128 li
0 128 li
cp
clp
-1e-6 128 mo
32 128 li
32 0 li
-1e-6 0 li
cp
false sop
gsave
/2 /CSD get_res idxcs
clp
[0 -1 -1 0 835.977 257.892 ]ct
[0 -32 128 0 129.892 835.977 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,fQl+;bXs"p9GX+J;gj)@d"*![/\R:b!4gL'&TlfPikm&&=j"BLF<f%Z!NIO_D[J3?F8QTWiZ7/fP=W
`8\%Hb\fKaOML"!=gXoE/"TD3o,8=+CF>WEVfLJ__Lj)%8Z)'He?XESTM2?8W\mD^8ul'p1g5l^P?"j9
D063I,,ntI<[a;,4\iabX3g,(]Bu3KH,3W8[qkr>ja4jIXnRb`NnJQi=tVb8*L>N*^fn#]lt1#FQG-n:
)!pB80o!haZadZn+"MERkOH*q:1"Bmd,XhGrW]]UWSM9sqE:^nK<=$G[sEJBPA@G^CUa/Rk+d!ogMFK-
/m!t+amf"OrXQt9OmM9$qu)#*H`bTRIC[!smoT5N3f[^,!'+p9[ctT2)pn;m:V6E&^s=7RpHEN5qZ/tN
/(F=-O3@J&_%/@_$UPD'i=A9ePSj?e&C`-65`la2#Ji&u3t&nZ>O)g;0Us']`%]tZ(s#R-K,;T@FFP(H
d:@S=a,s>F'ZX'=EtcS+1iF#Hd3NK>`fZLF,tZOLXY!2p'U'ld19@f7bVCa$-q]Z@\M-R;7%$).o%^u'
aRWT..F5=ojZUtS7,pF,F$/DDcr2dY4A[gbh)iss,hkCVo,QFEcdPl+7oGT%5snM6Pqc'1PZ8l";jA(:
8^fNp$UrK#]fS7%1jplKe20=$<S*K^CKB';2/cRK'h*1GfMtpq;:_"DHW&GFFam?A'nq9>f2\*4EEkD]
bA^W$7DEKkG4hDM7Yh<~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/139218996.0 /Pattern get_res
[-1.31179 0 0 .503022 213.96 462.046 ]make_pattern set_pattern
f
2 vmreclaim
grestore
187.2 461.545 mo
173.52 484.945 li
196.2 524.065 li
213.66 493.825 li
196.68 464.485 li
187.2 461.545 li
cp
@
192.6 471.265 mo
196.5 464.725 li
197.28 466.165 li
193.56 472.525 li
192.6 471.265 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.659 .871 .925 colr
ef
gsave
187.2 461.605 mo
187.44 462.085 li
187.5 462.145 li
187.761 462.679 188.079 463.172 188.34 463.705 cv
188.4 463.765 li
188.64 464.245 li
188.7 464.305 li
188.94 464.785 li
189 464.845 li
189.24 465.325 li
189.3 465.385 li
189.54 465.865 li
189.6 465.925 li
189.84 466.405 li
189.9 466.465 li
190.682 467.933 191.52 469.377 192.3 470.845 cv
192.36 470.905 li
192.54 471.265 li
192.6 471.145 li
192.66 471.085 li
192.78 470.845 li
192.84 470.785 li
192.96 470.545 li
193.02 470.485 li
193.08 470.365 li
193.14 470.305 li
193.26 470.065 li
193.32 470.005 li
193.44 469.765 li
193.5 469.705 li
193.62 469.465 li
193.68 469.405 li
193.934 468.969 194.221 468.529 194.46 468.085 cv
194.52 468.025 li
194.58 467.905 li
194.64 467.845 li
194.76 467.605 li
194.82 467.545 li
194.94 467.305 li
195 467.245 li
195.12 467.005 li
195.18 466.945 li
195.24 466.825 li
195.3 466.765 li
195.42 466.525 li
195.48 466.465 li
195.6 466.225 li
195.66 466.165 li
195.89 465.706 196.21 465.305 196.44 464.845 cv
196.5 464.785 li
196.62 464.545 li
196.68 464.485 li
196.62 464.485 li
193.518 463.536 190.423 462.551 187.32 461.605 cv
187.2 461.545 li
eclp
196.68 471.265 mo
196.68 461.185 li
187.2 461.185 li
187.2 471.265 li
cp
gsave
/0 /CSD get_res idxcs
clp
[0 -1 -1 0 835.977 257.892 ]ct
[10.08 0 0 9.47999 -213.373 639.297 ]ct
snap_to_device
<<
/T 1
/W 21 
/H 20 
/M[21 0 0 -20 0 20 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!!*-'"9eu7#RLhG$k3[W&.oNg'EJ49!sAc3#7(VC$OdIS%hK<c',1K_!WrQ/"pYD?$4@7O%M'*_&ebrp
(Dmqk"U52;#mq%K%1Wm[&J>`k";r*q)[-EN#RLhG$k3[W&.oNg'HA,6*$$%(#7(VC$OdIS%hK<c',2K/
+!)LF*X;rW$4@7O%M'*_&ebs%+<_jM+<Vd4#mq%K%1Wm[&J>`k+sJ3T+sJ3T+peSa$k3[W&.oNg'I+hI
,U4NY,U4N@$OdIS%hK<c',2`=,pjob-71&c-4:4k%M'*_&ebs,-RU8h-RU8h-RU8M%1Wm[&J>`k-n-So
.4H\p-n$Mm.1Hat&.oNg'IkR^.k3&".Olqu.k3&#%hK<c',3#M/M/P+/M/P+/M/P+/IrC)&ebs3/hSb/
/hSb//hSb//hSdg&J>`k0JG180JP:90JP790JG490JX7S'JhR&1c.$G1c$pE1G^jE1c.$H',3>_2E!HO
2E!HO2E!HO2E!HO2E!KR3&ioX3B9)[3&ilX3B9)Z3B/u4~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
196.68 464.485 mo
192.6 471.265 li
187.2 461.545 li
196.68 464.485 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
205.86 491.245 mo
193.8 512.125 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.149 .341 .482 colr
@
202.86 485.665 mo
190.68 506.725 li
@
199.44 480.025 mo
187.32 500.905 li
@
196.08 474.265 mo
183.96 495.145 li
@
189.24 475.645 mo
180.84 490.165 li
@
.885 lw
202.62 461.065 mo
198.84 454.825 li
193.74 463.525 li
187.2 461.545 li
173.52 484.945 li
196.2 524.065 li
199.98 517.645 li
203.94 524.365 li
207.66 517.825 li
211.32 524.065 li
228.84 493.825 li
206.28 454.825 li
202.62 461.065 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 7030 55 <00010030000004ba05ba00070089400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
ffe8400b1010025500080f0f025500b8fff2b40c0c025500b8ffe2b40d0d
025500b8fffcb40c0c065500b8fffeb40d0d065500b80273b308b699182b
10f62b2b2b2b2b2b5d3c10f45d3c10fde45de6103c103c003f3f3cfd3c31
3021112135211521110213fe1d048afe1b050dadadfaf300>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/T 55 def
end
PBAAAA+ArialMT /Encoding get
dup 84 /T put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 28{/.notdef}rp /C /D /E 
2{/.notdef}rp /H 6{/.notdef}rp /O 3{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /.notdef /e /f 
2{/.notdef}rp /i 3{/.notdef}rp /m /n /o /p /.notdef 
/r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
254.16 507.626 mo
(Texts)
[-9.01236 -8.20062 -7.37411 -4.09738 0 ]ysh
3.834 lw
210.24 334.345 mo
201.06 350.485 li
219.3 350.485 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.753 0 0 colr
@
201.06 350.485 mo
220.32 373.345 li
@
182.4 361.945 mo
174.66 375.445 li
@
173.22 378.025 mo
191.4 378.025 li
@
198.42 351.805 mo
183.9 359.365 li
@
173.22 378.025 mo
192.48 400.945 li
@
173.22 380.965 mo
171.6 380.965 170.22 379.645 170.22 378.025 cv
170.22 376.345 171.6 375.025 173.22 375.025 cv
174.84 375.025 176.16 376.345 176.16 378.025 cv
176.16 379.645 174.84 380.965 173.22 380.965 cv
ef
173.22 380.965 mo
171.6 380.965 170.22 379.645 170.22 378.025 cv
170.22 376.345 171.6 375.025 173.22 375.025 cv
174.84 375.025 176.16 376.345 176.16 378.025 cv
176.16 379.645 174.84 380.965 173.22 380.965 cv
cp
@
201.06 353.425 mo
199.44 353.425 198.12 352.105 198.12 350.485 cv
198.12 348.805 199.44 347.485 201.06 347.485 cv
202.68 347.485 204 348.805 204 350.485 cv
204 352.105 202.68 353.425 201.06 353.425 cv
ef
201.06 353.425 mo
199.44 353.425 198.12 352.105 198.12 350.485 cv
198.12 348.805 199.44 347.485 201.06 347.485 cv
202.68 347.485 204 348.805 204 350.485 cv
204 352.105 202.68 353.425 201.06 353.425 cv
cp
@
183.9 362.305 mo
182.22 362.305 180.9 360.985 180.9 359.365 cv
180.9 357.685 182.22 356.365 183.9 356.365 cv
185.52 356.365 186.84 357.685 186.84 359.365 cv
186.84 360.985 185.52 362.305 183.9 362.305 cv
ef
183.9 362.305 mo
182.22 362.305 180.9 360.985 180.9 359.365 cv
180.9 357.685 182.22 356.365 183.9 356.365 cv
185.52 356.365 186.84 357.685 186.84 359.365 cv
186.84 360.985 185.52 362.305 183.9 362.305 cv
cp
@
194.4 380.965 mo
192.78 380.965 191.4 379.645 191.4 378.025 cv
191.4 376.345 192.78 375.025 194.4 375.025 cv
196.02 375.025 197.34 376.345 197.34 378.025 cv
197.34 379.645 196.02 380.965 194.4 380.965 cv
ef
194.4 380.965 mo
192.78 380.965 191.4 379.645 191.4 378.025 cv
191.4 376.345 192.78 375.025 194.4 375.025 cv
196.02 375.025 197.34 376.345 197.34 378.025 cv
197.34 379.645 196.02 380.965 194.4 380.965 cv
cp
@
194.4 406.165 mo
192.78 406.165 191.4 404.845 191.4 403.165 cv
191.4 401.545 192.78 400.225 194.4 400.225 cv
196.02 400.225 197.34 401.545 197.34 403.165 cv
197.34 404.845 196.02 406.165 194.4 406.165 cv
ef
194.4 406.165 mo
192.78 406.165 191.4 404.845 191.4 403.165 cv
191.4 401.545 192.78 400.225 194.4 400.225 cv
196.02 400.225 197.34 401.545 197.34 403.165 cv
197.34 404.845 196.02 406.165 194.4 406.165 cv
cp
@
226.26 324.265 mo
211.74 331.765 li
@
228.9 325.885 mo
227.28 325.885 225.96 324.565 225.96 322.885 cv
225.96 321.265 227.28 319.945 228.9 319.945 cv
230.52 319.945 231.84 321.265 231.84 322.885 cv
231.84 324.565 230.52 325.885 228.9 325.885 cv
ef
228.9 325.885 mo
227.28 325.885 225.96 324.565 225.96 322.885 cv
225.96 321.265 227.28 319.945 228.9 319.945 cv
230.52 319.945 231.84 321.265 231.84 322.885 cv
231.84 324.565 230.52 325.885 228.9 325.885 cv
cp
@
211.74 334.765 mo
210.06 334.765 208.74 333.445 208.74 331.765 cv
208.74 330.145 210.06 328.825 211.74 328.825 cv
213.36 328.825 214.68 330.145 214.68 331.765 cv
214.68 333.445 213.36 334.765 211.74 334.765 cv
ef
211.74 334.765 mo
210.06 334.765 208.74 333.445 208.74 331.765 cv
208.74 330.145 210.06 328.825 211.74 328.825 cv
213.36 328.825 214.68 330.145 214.68 331.765 cv
214.68 333.445 213.36 334.765 211.74 334.765 cv
cp
@
222.24 353.425 mo
220.62 353.425 219.3 352.105 219.3 350.485 cv
219.3 348.805 220.62 347.485 222.24 347.485 cv
223.86 347.485 225.18 348.805 225.18 350.485 cv
225.18 352.105 223.86 353.425 222.24 353.425 cv
ef
222.24 353.425 mo
220.62 353.425 219.3 352.105 219.3 350.485 cv
219.3 348.805 220.62 347.485 222.24 347.485 cv
223.86 347.485 225.18 348.805 225.18 350.485 cv
225.18 352.105 223.86 353.425 222.24 353.425 cv
cp
@
222.24 378.625 mo
220.62 378.625 219.3 377.245 219.3 375.625 cv
219.3 374.005 220.62 372.685 222.24 372.685 cv
223.86 372.685 225.18 374.005 225.18 375.625 cv
225.18 377.245 223.86 378.625 222.24 378.625 cv
ef
222.24 378.625 mo
220.62 378.625 219.3 377.245 219.3 375.625 cv
219.3 374.005 220.62 372.685 222.24 372.685 cv
223.86 372.685 225.18 374.005 225.18 375.625 cv
225.18 377.245 223.86 378.625 222.24 378.625 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 5020 47 <000100960000042a05ba0005006d400c010204031e05000820040104b802
a7400f070203200120000100201010025500b8fff6b40f0f025500b8fff6
b40d0d025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a0d
0d0655005d063b5c182b10f62b2b2b2b2b2b5d3cfd3c10e65d003f3cfd3c
3f313033113311211596c202d205bafaf3ad>PBAAAA+ArialMT AddT42Char 
1 11300 74 <00020042fe5103ea043e001e002a016f40600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d403205
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
2c400b0c02552c400d0d025517121010025517b8fff440110f0f02551706
0e0e025517160d0d025517b8ffea400b0b0b065517121010065517b8ffee
b40c0c065517b8fffc404a0d0d065517740f012500221f24bf0fcf0fdf0f
ff0f041f0f3f0f4f0f030f200b0b02550f1a0c0c02550f220d0d02550f1c
0b0b06550f0c0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b
2b2b2b2b2b5d714dedf4ed10fd2b2b2b2b2b2b2b2b2b2b5d713c10fde4f6
3c003fede43fedfd5de43fede43f3c3130015d71005d7117171617163332
363736270623220235341236333217353311140606232226131416333236
35342623220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0
beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880
fc6af8cf78ab032ad1c0bfccc3c6c300>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/L 47 def
/g 74 def
end
PBAAAA+ArialMT /Encoding get
dup 76 /L put
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 28{/.notdef}rp /C /D /E 
2{/.notdef}rp /H 3{/.notdef}rp /L 2{/.notdef}rp /O 3{/.notdef}rp /S 
/T 2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /.notdef 
/e /f /g /.notdef /i 3{/.notdef}rp /m /n 
/o /p /.notdef /r /s /t /u 2{/.notdef}rp 
/x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
252.48 393.506 mo
(Linguistic)
[-8.20361 -3.27377 -8.20358 -8.20361 -8.20361 -3.27377 -7.37704 -4.10031 -3.27377 0 ]ysh
270.177 379.174 mo
(trees)
[-4.1077 -4.9194 -8.211 -8.21097 0 ]ysh
165.48 281.725 mo
243.84 281.725 li
251.04 281.725 256.92 258.385 256.92 229.525 cv
256.92 200.665 251.04 177.265 243.84 177.265 cv
165.48 177.265 li
158.28 177.265 152.4 200.665 152.4 229.525 cv
152.4 258.385 158.28 281.725 165.48 281.725 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 .624 colr
ef
.885 lw
165.48 281.725 mo
243.84 281.725 li
251.04 281.725 256.92 258.385 256.92 229.525 cv
256.92 200.665 251.04 177.265 243.84 177.265 cv
165.48 177.265 li
158.28 177.265 152.4 200.665 152.4 229.525 cv
152.4 258.385 158.28 281.725 165.48 281.725 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
165.48 281.725 mo
172.68 281.725 178.56 258.385 178.56 229.525 cv
178.56 200.665 172.68 177.265 165.48 177.265 cv
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 4560 44 <000100bf0000018105ba000300ccb5010200080205b8ffc0b3383d3405b8
ffc0b333343405b8ffc0b32d303405b8ffc0b328293405b8ffc0b3232534
05b8ffc0b31d1e3405b8ffc0b3181a3405b8ffc0402a0d103420059005af
050303200100008f00a000b000042f0040005000df00f000051220008f00
90000305b8ffc0400b0d0d025500181010025500b8ffecb40f0f025500b8
ffeeb40d0d025500b8fff640100c0c025500200b0b065500a204d659182b
10f62b2b2b2b2b2b5d435c58b2800001015d5971723cfd5d2b2b2b2b2b2b
2b2b3c003f3f313033113311bfc205bafa46>PBAAAA+ArialMT AddT42Char 
1 5466 51 <0002009e000004fd05ba000d001800b2402c65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226080a0d0d025508100b0b06
5508b8fff4401b0c0c0655081a201a01201a011a180d2001200001002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
55000c0b0b065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b
5c182b10f62b2b2b2b2b2b2b5d3cfd3c4e10715df62b2b2b4ded003f3f3c
fd3c12392f3cfd3c3130015d005d33112132171e02151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>PBAAAA+ArialMT AddT42Char 
1 10078 71 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>PBAAAA+ArialMT AddT42Char 
1 12740 78 <00010088000003f805ba000b0261401b060c0d0d0655070656065a09030f
0df305f60603090c1010025506b8fff4b40c0c02550ab8fff4b40c0c0255
09b8fff4b40c0c025503b8ffe840100d0d06555503770a02120620132134
08b8fff0b312273409b8fff0b41227341205b8fff0b312213409b8fff040
84122734060404050406370947040525062d0a580a7703750ada03e30607
a60601230626072508390638093f0d4f0d59045906580759097d04790599
09c606d204d606e406e907f706f90815120a0a0503030402060607090908
0a0a050908082507061407070603040425050a1405050a0a090603040801
02000405060708080b0b000a04b8010f400905040c0c0655052208b8010f
402120073f070207100c0c0655071a900d010d0b2500022501019000013f
004f000200b8fffe40310e0e025500100d0d025500100c0c0255000a0b0b
025500120b0b065500120c0c065500080d0d065500190c0de1214766182b
2b4ef42b2b2b2b2b2b2b5d713c4d10ed10ed4e1071f62b5d4dedf42bed00
3f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e7d10c4
0710083c083c0310083c083cb10602435458400d4b09011f098403020918
0d1134002b5d7159313001435c58400a092c1d3909081d1d3c06b8ffdeb2
1d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d00715d0171002b
2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffdeb2103906b8ffde
b2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b59012b2b2b435c
584012dd040108141639090814143c090814143c06b8fff6b2183906b8ff
ecb11b392b2b2b2b2b015d59005d2b2b2b2b2b015d712b33113311013301
012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f
7afe5b00>PBAAAA+ArialMT AddT42Char 
1 13404 79 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>PBAAAA+ArialMT AddT42Char 
2 2446 90 <00010006000005b704260012041db10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f5358b40d200c2002bcffe0
0001ffe0000effd0b400300f2012b8ffe0013838383838383838594bb034
5358b90008ffd0b10730013838594bb021534bb033515a58b90008ffe0b1
0720013838594bb012534bb01e515a58b9000effd0b60f200d200c2008b8
ffd0b2073012b8ffe0b2003802baffe00001ffe001383838383838383838
38594bb012534bb017515a58b90011ffe0b30a2004200038383859593130
01435c58b9000effd4b61239002c123900b8ffd4b113392b2b2b592b2b2b
2b2b5d71722b2b2b002b2b2b715d015d5921013313173637133313173713
330123032703014bfebbbaa93f0433a9b99f353db6affeb4bba929d70426
fd9be411ca026efd98cbcd0266fbda027cb5fccf>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/I 44 def
/P 51 def
/d 71 def
/k 78 def
/l 79 def
/w 90 def
end
PBAAAA+ArialMT /Encoding get
dup 73 /I put
dup 80 /P put
dup 100 /d put
dup 107 /k put
dup 108 /l put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 28{/.notdef}rp /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L 2{/.notdef}rp /O /P 
2{/.notdef}rp /S /T 2{/.notdef}rp /W 9{/.notdef}rp /a /b 
/c /d /e /f /g /.notdef /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /.notdef /w /x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
197.88 240.626 mo
(ILP)
[-4.14313 -8.15784 0 ]ysh
215.577 268.05 mo
(background)
[-8.19476 -8.19473 -7.36819 -7.36816 -8.19476 -4.9032 -8.1947 -8.19476 -8.19476 0 ]ysh
233.274 264.802 mo
(knowledge)
[-7.37851 -8.20511 -8.20508 -10.6552 -3.27527 -8.20508 -8.20508 -8.20508 0 ]ysh
350.94 342.325 mo
326.94 342.325 307.44 322.825 307.44 298.765 cv
307.44 274.705 326.94 255.265 350.94 255.265 cv
375 255.265 394.5 274.705 394.5 298.765 cv
394.5 322.825 375 342.325 350.94 342.325 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.573 .816 .314 colr
ef
.295 lw
350.94 342.325 mo
326.94 342.325 307.44 322.825 307.44 298.765 cv
307.44 274.705 326.94 255.265 350.94 255.265 cv
375 255.265 394.5 274.705 394.5 298.765 cv
394.5 322.825 375 342.325 350.94 342.325 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
346.5 309.866 mo
(ILP)
[-4.09885 -8.20212 0 ]ysh
364.197 325.039 mo
(learning)
[-3.27524 -8.20508 -8.20508 -4.91351 -8.20508 -3.27524 -8.20508 0 ]ysh
211.62 105.866 mo
187.56 105.866 168.12 86.366 168.12 62.306 cv
168.12 38.246 187.56 18.806 211.62 18.806 cv
235.68 18.806 255.18 38.246 255.18 62.306 cv
255.18 86.366 235.68 105.866 211.62 105.866 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.573 .816 .314 colr
ef
211.62 105.866 mo
187.56 105.866 168.12 86.366 168.12 62.306 cv
168.12 38.246 187.56 18.806 211.62 18.806 cv
235.68 18.806 255.18 38.246 255.18 62.306 cv
255.18 86.366 235.68 105.866 211.62 105.866 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
207.18 95.1255 mo
(Extraction)
[-9.84058 -7.37561 -4.09882 -4.91058 -8.20209 -7.37561 -4.09882 -3.27234 -8.20209 0 ]ysh
224.877 88.1736 mo
(process)
[-8.20361 -4.91199 -8.20361 -7.37708 -8.20361 -7.37701 0 ]ysh
291.72 483.505 mo
355.5 483.505 li
355.5 377.305 li
291.72 377.305 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.792 .933 1 colr
f
291.72 483.505 mo
355.5 483.505 li
355.5 377.305 li
291.72 377.305 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
355.5 483.505 mo
cp
@
313.86 505.645 mo
377.64 505.645 li
377.64 399.385 li
313.86 399.385 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.792 .933 1 colr
f
313.86 505.645 mo
377.64 505.645 li
377.64 399.385 li
313.86 399.385 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
377.64 505.645 mo
cp
@
336 527.725 mo
399.72 527.725 li
399.72 421.525 li
336 421.525 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.792 .933 1 colr
f
336 527.725 mo
399.72 527.725 li
399.72 421.525 li
336 421.525 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
399.72 527.725 mo
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 532 14 <0001007200ed043a04b6000b0038401f006e0902f908036e050706096e0a
040af905016e3f024f020202190c575a182b4e10f45d4df43ced3c10e43c
3c002ff43cfd3cf431302511213521113311211521110201fe71018faa01
8ffe71ed0192a8018ffe71a8fe6e>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/plus 14 def
end
PBAAAA+ArialMT /Encoding get
dup 43 /plus put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand 4{/.notdef}rp /plus 23{/.notdef}rp /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 2{/.notdef}rp 
/O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 9{/.notdef}rp 
/a /b /c /d /e /f /g /.notdef 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /.notdef /w /x 
135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
354.54 503.366 mo
(Learning )
[-8.20508 -8.20508 -8.20508 -4.91351 -8.20508 -3.27524 -8.20508 -8.20508 0 ]ysh
372.237 506.244 mo
(examples)
[-8.19473 -7.36819 -8.19476 -12.2832 -8.19473 -3.26492 -8.19473 0 ]ysh
389.934 515.424 mo
(+ Semantics)
[-8.59473 -4.14313 -9.81992 -8.18149 -12.2699 -8.18146 -8.18149 -4.13721 -3.25165 -7.35489 0 ]ysh
1.08 lw
0 lc
0 lj
2 ml
391.56 502.705 mo
391.56 433.885 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
356.1 432.445 mo
346.98 432.445 li
346.98 441.685 li
340.68 441.685 li
340.68 432.445 li
331.5 432.445 li
331.5 426.325 li
340.68 426.325 li
340.68 417.085 li
346.98 417.085 li
346.98 426.325 li
356.1 426.325 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.753 0 0 colr
f
260.34 529.105 mo
302.94 571.705 li
313.32 582.085 330.24 582.085 340.68 571.705 cv
345 567.325 347.76 561.565 348.36 555.445 cv
348.9 549.745 li
358.26 550.705 li
340.5 539.485 li
320.94 546.985 li
330.24 547.885 li
329.7 553.585 li
329.28 557.965 325.38 561.145 321 560.725 cv
319.14 560.545 317.46 559.765 316.14 558.445 cv
273.6 515.845 li
260.34 529.105 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
.295 lw
1 lc
1 lj
10 ml
260.34 529.105 mo
302.94 571.705 li
313.32 582.085 330.24 582.085 340.68 571.705 cv
345 567.325 347.76 561.565 348.36 555.445 cv
348.9 549.745 li
358.26 550.705 li
340.5 539.485 li
320.94 546.985 li
330.24 547.885 li
329.7 553.585 li
329.28 557.965 325.38 561.145 321 560.725 cv
319.14 560.545 317.46 559.765 316.14 558.445 cv
273.6 515.845 li
260.34 529.105 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
314.4 125.005 mo
387.54 125.005 li
387.54 3.08502 li
314.4 3.08502 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.004 .722 1 colr
f
314.4 125.005 mo
387.54 125.005 li
387.54 3.08501 li
314.4 3.08501 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
387.54 125.005 mo
cp
@
387.54 114.565 mo
314.4 114.565 li
@
387.54 13.525 mo
314.4 13.525 li
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
337.68 95.2455 mo
(Extracted)
[-9.8421 -7.37701 -4.10034 -4.91199 -8.20361 -7.37708 -4.10034 -8.20355 0 ]ysh
355.377 94.8175 mo
(Semantic)
[-9.84503 -8.20654 -12.295 -8.20654 -8.20654 -4.10333 -3.27667 0 ]ysh
1.08 lw
0 lc
0 lj
2 ml
356.94 94.765 mo
356.94 33.325 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
373.08 78.4455 mo
(data)
[-8.20801 -8.20807 -4.10474 0 ]ysh
201.18 541.225 mo
183.78 551.425 li
195.24 551.425 li
195.24 563.905 li
207.12 563.905 li
207.12 551.425 li
218.58 551.425 li
201.18 541.225 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
.295 lw
1 lc
1 lj
10 ml
201.18 541.225 mo
183.78 551.425 li
195.24 551.425 li
195.24 563.905 li
207.12 563.905 li
207.12 551.425 li
218.58 551.425 li
201.18 541.225 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
201.18 417.625 mo
183.78 427.765 li
195.24 427.765 li
195.24 440.245 li
207.12 440.245 li
207.12 427.765 li
218.58 427.765 li
201.18 417.625 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
201.18 417.625 mo
183.78 427.765 li
195.24 427.765 li
195.24 440.245 li
207.12 440.245 li
207.12 427.765 li
218.58 427.765 li
201.18 417.625 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
201.18 290.485 mo
183.78 300.625 li
195.24 300.625 li
195.24 313.105 li
207.12 313.105 li
207.12 300.625 li
218.58 300.625 li
201.18 290.485 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
201.18 290.485 mo
183.78 300.625 li
195.24 300.625 li
195.24 313.105 li
207.12 313.105 li
207.12 300.625 li
218.58 300.625 li
201.18 290.485 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
200.46 118.705 mo
183.06 136.105 li
194.58 136.105 li
194.58 163.465 li
206.4 163.465 li
206.4 136.105 li
217.92 136.105 li
200.46 118.705 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
200.46 118.705 mo
183.06 136.105 li
194.58 136.105 li
194.58 163.465 li
206.4 163.465 li
206.4 136.105 li
217.92 136.105 li
200.46 118.705 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
350.94 347.905 mo
333.54 358.105 li
345.06 358.105 li
345.06 370.525 li
356.88 370.525 li
356.88 358.105 li
368.4 358.105 li
350.94 347.905 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
350.94 347.905 mo
333.54 358.105 li
345.06 358.105 li
345.06 370.525 li
356.88 370.525 li
356.88 358.105 li
368.4 358.105 li
350.94 347.905 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
329.82 162.926 mo
329.82 153.326 322.02 145.526 312.42 145.526 cv
289.8 145.526 li
280.14 145.526 272.34 153.326 272.34 162.926 cv
272.34 204.746 li
272.34 214.346 280.14 222.146 289.8 222.146 cv
312.42 222.146 li
322.02 222.146 329.82 214.346 329.82 204.746 cv
329.82 162.926 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .753 0 colr
ef
329.82 162.926 mo
329.82 153.326 322.02 145.526 312.42 145.526 cv
289.8 145.526 li
280.14 145.526 272.34 153.326 272.34 162.926 cv
272.34 204.746 li
272.34 214.346 280.14 222.146 289.8 222.146 cv
312.42 222.146 li
322.02 222.146 329.82 214.346 329.82 204.746 cv
329.82 162.926 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
PLOIPD+ArialMT*1 [0 -14.76 -14.76 0 0 0 ]msf
296.64 216.626 mo
(Extraction)
[-9.84058 -7.37561 -4.09882 -4.91058 -8.20209 -7.37561 -4.09882 -3.27234 -8.20209 0 ]ysh
314.337 199.829 mo
(rules)
[-4.91205 -8.20355 -3.2738 -8.20361 0 ]ysh
303.9 62.845 mo
287.88 32.2451 li
287.58 52.285 li
267.48 51.985 li
267.24 72.6251 li
287.34 72.925 li
287.04 92.965 li
303.9 62.845 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
303.9 62.845 mo
287.88 32.245 li
287.58 52.285 li
267.48 51.985 li
267.24 72.625 li
287.34 72.925 li
287.04 92.965 li
303.9 62.845 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
247.98 107.546 mo
244.14 131.846 li
253.44 125.126 li
266.04 142.406 li
275.64 135.446 li
263.04 118.166 li
272.34 111.386 li
247.98 107.546 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
247.98 107.546 mo
244.14 131.846 li
253.44 125.126 li
266.04 142.406 li
275.64 135.446 li
263.04 118.166 li
272.34 111.386 li
247.98 107.546 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
323.52 227.725 mo
315.3 246.805 li
324.84 240.385 li
332.52 251.905 li
342.36 245.365 li
334.68 233.845 li
344.28 227.485 li
323.52 227.725 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
323.52 227.725 mo
315.3 246.805 li
324.84 240.385 li
332.52 251.905 li
342.36 245.365 li
334.68 233.845 li
344.28 227.485 li
323.52 227.725 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
302.22 288.745 mo
292.56 266.065 li
288.3 276.685 li
264.18 266.965 li
259.74 277.945 li
283.86 287.665 li
279.54 298.345 li
302.22 288.745 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.722 .757 .584 colr
ef
302.22 288.745 mo
292.56 266.065 li
288.3 276.685 li
264.18 266.965 li
259.74 277.945 li
283.86 287.665 li
279.54 298.345 li
302.22 288.745 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.004 0 0 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
2 5266 135 <0001006d01d0026803cb000b001fb900030153400e0906cc200030000200
750c57a7182b10f65ded002fed31301334363332161514062322266d9568
69959569689502ce6994946969959500>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/bullet 135 def
end
PBAAAA+ArialMT /Encoding get
dup 33 /bullet put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus 23{/.notdef}rp 
/C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L 
2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 
9{/.notdef}rp /a /b /c /d /e /f /g 
/.notdef /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
/x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
452.1 668.906 mo
(!)sh
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 3898 42 <0001006dffe705b905d300250113401a1b141b15026027015e0813011203
2424002112170225001e0201b8ffc040200c0c0655010106171e0e03211e
06090101262725242003032002202760020302b8ffe4b40f0f025502b8ff
f2b40d0d025502b8ffdab40c0c025502b8fff4401b0c0c06550272802701
271d26200a010a100c0c06550a1926635b182b4e10f42b5d4ded4d105df6
2b2b2b2b5d3c4d10fd3c1112392f003fed3fed12392f2b3cfd3c11123911
123901111239123931304379404404231b1c1a1c191c03060c2610251526
1f26082504262325180d1d2100160f1321011112141320071d2100220525
21011c0b17210114111721011e092121002403212100002b2b2b2b012b2b
103c103c2b2b2b2b2b2b2b2b2b2a81015d005d0135251106042322240235
3412243332041617072e02232206060706151412043332363711034c026d
8ffed0a0d8fe9fb4b30150db9f01019226af2162b66f85c2772138870102
917ef03e023fac01fde07273b9015ed8d60173b467b8943070804d51844f
889fc4fef88061370111>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/G 42 def
end
PBAAAA+ArialMT /Encoding get
dup 71 /G put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus 23{/.notdef}rp 
/C /D /E /.notdef /G /H /I 2{/.notdef}rp 
/L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w /x 135{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
452.1 641.913 mo
(Get semantics form )
[-15.5284 -11.0929 -5.53845 -5.55243 -9.97406 -11.0928 -16.6273 -11.0928 -11.0929 -5.53845 -4.41962 -9.974 
-9.974 -5.55243 -5.53845 -11.0929 -6.63721 -16.6272 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
2 4124 92 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/y 92 def
end
PBAAAA+ArialMT /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus 23{/.notdef}rp 
/C /D /E /.notdef /G /H /I 2{/.notdef}rp 
/L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w /x /y 134{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
452.1 463.414 mo
(Web of today)
[-18.8491 -11.0969 -11.0969 -5.55243 -11.0969 -5.54245 -5.55243 -5.54248 -11.0969 -11.0969 -11.0969 0 
]ysh
0 gry
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
478.434 668.906 mo
(!)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 11796 75 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>PBAAAA+ArialMT AddT42Char 
2 4724 93 <00010028000003d40426000e01af400d12b802c9080212013212173408b8
ffce4009121734013e1e213408b8ffc2404a1e2134290228092f10390139
0a49014602460849094f105c01540254085a0950106c01630263086a097b
0174087b098b0185088909f901f4021b1908260129082b093908a508d701
0710b8ffc0b7101534022c123909b8ffd44023123901023a090a02080a0a
25010214010102010d0e08060261052b0706060a610d000db8fff440090b
0b06550d2b0e0a02b8010fb40808070506bb025b00000007fff440160b0b
065507220da00e01000e400e600e800ef00e050eb8fff440240b0b06550e
74000a7e0101af00014f006f00ff000300180b0b065500190f1074217cc4
182b2b4ef42b5d713c4d10ed10fd2b5d713ce42b10f43c103c10fd003fed
2b3c10e53f3cfde5113911123987052e2b877dc4100ec42b3130012b2b2b
715d002b2b2b2b435c58b5290126080201b8ffce40091217340832121734
01b8ffc2b71e2134083e1e2134002b2b2b2b017159015d435c58b90008ff
deb20f3909b8ffdeb20f3909b8ffe8b71b390908161b3d09b8fff0b21739
09b8fff8400a163902141639021a16392b2b2b2b2b2b2b2b593335010623
213521150107363321152802a47358fe4f0364fdc16f796a01eb92030806
9277fd5e7b099b00>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/h 75 def
/z 93 def
end
PBAAAA+ArialMT /Encoding get
dup 104 /h put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus 23{/.notdef}rp 
/C /D /E /.notdef /G /H /I 2{/.notdef}rp 
/L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w /x /y /z 133{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
478.434 641.913 mo
(Czech)
[-14.4156 -10.0799 -11.0989 -9.98004 0 ]ysh
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 636 15 <000100aafede018300cd000a004eb50a030007ab06b80150402601033c02
02010a013c000a020301033c000638073a4f005f006f007f00a0000500a0
0ba198182b10f45df4e410ed3c103c003fed3c103c10ed10fded01111239
31303335331514060727363637b6cd505732393603cdcd718b264d19615b
>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/comma 15 def
end
PBAAAA+ArialMT /Encoding get
dup 44 /comma put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus /comma 
22{/.notdef}rp /C /D /E /.notdef /G /H /I 
2{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 
2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/.notdef /w /x /y /z 133{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
478.434 579.555 mo
(pages, Czech texts)
[-11.1008 -11.1009 -11.1009 -11.1009 -9.98199 -5.54645 -5.55243 -14.4176 -9.98199 -11.1009 -9.98203 -11.1009 
-5.55243 -5.54645 -11.1009 -9.98203 -5.54642 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.004 0 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
504.827 668.886 mo
(!)sh
0 gry
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
504.827 641.893 mo
(Czech linguistic )
[-14.4416 -10.0859 -11.1249 -10.006 -11.1248 -5.58246 -4.45154 -4.45154 -11.1249 -11.1248 -11.1249 -4.45154 
-10.006 -5.57043 -4.45154 -10.006 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
504.827 497.237 mo
(tools)
[-5.54047 -11.0949 -11.0949 -4.42157 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.004 0 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
450.941 317.298 mo
(!)sh
0 gry
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
450.941 290.305 mo
(Domain of)
[-14.4515 -11.1349 -16.6692 -11.1348 -4.46155 -11.1349 -5.5824 -11.0349 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
450.941 193.641 mo
(traffic accidents)
[-5.55042 -6.64923 -11.1049 -5.55048 -5.55042 -4.43158 -9.98596 -5.58246 -11.1049 -9.98602 -9.98596 -4.43158 
-11.1049 -11.1049 -11.1049 -5.55048 0 ]ysh
0 gry
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
479.732 317.298 mo
(!)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
479.732 290.305 mo
(Semantics)
[-13.3408 -11.1229 -16.6572 -11.1229 -11.1229 -5.56842 -4.44952 -10.004 0 ]ysh
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
2 1904 89 <0001001a000003e80426000a01eab1020243545840170508000a08060106
0a0005090805010205240f0f0255052f2bddcd10ddcd113333003f3f3f12
3931301bb7350501002211390ab8ffde400d11390916121c340816121c34
02b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400281e2134
0ab8ffe8400922253400162225340ab8ffda407e282e340020282e340f0c
29002809260a3900350a4800470a56015602590858096601660269086909
78007701770279087809770a870187028603890788088a099d009809910a
ac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a2c0a0005
0a1800160a2800260a370a4f00400a09054012163405400b0d34b1060243
5458400905010008060106000ab8fff4400f0d0d06550a000c0d0d065500
050908b8fff440120d0d0655080501020c0d0d06550205050c0b1112392f
dd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a0708082509
0a1409090a0003020225010014010100050a0a000a09080802020106070a
09030001052f0c010c22084040400980090209b8011bb5400580050205b8
011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ede45d1112
3939123939003f3c103c103c3f3c113987052e2b877dc4872e182b877dc4
593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59210133131617
363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288fb
da00>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/v 89 def
end
PBAAAA+ArialMT /Encoding get
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/PLOIPD+ArialMT*1 
[32{/.notdef}rp /space /bullet 4{/.notdef}rp /ampersand 4{/.notdef}rp /plus /comma 
22{/.notdef}rp /C /D /E /.notdef /G /H /I 
2{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T 
2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
PLOIPD+ArialMT nf
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
479.732 191.364 mo
(given by human)
[-11.1049 -4.43158 -9.98602 -11.1049 -11.1049 -5.58246 -11.1049 -9.98602 -5.5824 -11.1049 -11.1049 -16.6392 
-11.1049 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.004 0 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
508.464 317.298 mo
(!)sh
0 gry
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
508.464 290.305 mo
(Generalized & extracted by )
[-15.5364 -11.1009 -11.1009 -11.1009 -6.6452 -11.1008 -4.42761 -4.42755 -10.0819 -11.1009 -11.1009 -5.56244 
-13.3188 -5.56244 -11.1009 -9.98199 -5.54645 -6.6452 -11.1009 -9.98199 -5.54645 -11.1009 -11.1009 -5.56244 
-11.1009 -9.98199 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 colr
PLOIPD+ArialMT*1 [0 -19.98 -19.98 0 0 0 ]msf
508.464 43.7714 mo
(ILP)
[-5.56244 -11.1169 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
[/Pattern [/139219196.0 /139218996.0 ]]
] del_res
true set_gvm
/PLOIPD+ArialMT*1 uf
/PLOIPD+ArialMT uf
/PBAAAA+ArialMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
