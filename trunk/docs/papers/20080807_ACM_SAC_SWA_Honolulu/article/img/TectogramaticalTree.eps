%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: DedVoj_tecto_tree.pdf
%%Creator: Adobe Acrobat 8.0
%%For: dedek
%%CreationDate: 25.2.2008, 14:26:45
%%BoundingBox: 0 0 426 544
%%HiResBoundingBox: 0 0 425.5892 543.5934
%%CropBox: 0 0 425.5892 543.5934
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1726 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="PDF::API2 0.57 (fix-3328 / 2007-01-04) [linux]"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -543.593 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543.593 li
425.589 543.593 li
425.589 0 li
cp
clp
[1 0 0 1 -88.94 0 ]ct
1.94314 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
114.028 144.278 mo
221.872 76.2682 li
false sop
/0 
[/DeviceGray] /CSA add_res
.494118 gry
@
123.743 212.288 mo
202.441 144.278 li
@
202.441 144.278 mo
221.872 76.2682 li
@
212.156 212.288 mo
202.441 144.278 li
@
.97157 lw
[1.94314 3.88628 ] 0 dsh
221.872 76.2682 mo
104.312 8.25824 li
@
1.94314 lw
[] 0 dsh
231.588 280.298 mo
276.28 212.288 li
@
2.91471 lw
276.28 212.288 mo
281.138 178.283 li
@
.97157 lw
281.138 178.283 mo
285.996 144.278 li
.623529 gry
@
285.996 144.278 mo
253.934 110.273 li
@
2.91471 lw
253.934 110.273 mo
221.872 76.2682 li
.494118 gry
@
1.94314 lw
295.711 348.308 mo
308.342 280.298 li
@
2.91471 lw
308.342 280.298 mo
316.6 246.293 li
@
.97157 lw
316.6 246.293 mo
324.858 212.288 li
.623529 gry
@
324.858 212.288 mo
285.996 144.278 li
@
1.94314 lw
353.034 348.308 mo
362.75 280.298 li
.494118 gry
@
2.91471 lw
362.75 280.298 mo
343.804 246.293 li
@
.97157 lw
343.804 246.293 mo
324.858 212.288 li
.623529 gry
@
1.94314 lw
372.465 484.328 mo
382.181 416.318 li
.494118 gry
@
382.181 416.318 mo
410.357 348.308 li
@
410.357 348.308 mo
362.75 280.298 li
@
453.106 416.318 mo
410.357 348.308 li
@
108.198 8.25836 mo
108.198 8.70526 108.11 9.1424 107.94 9.56024 cv
107.769 9.96832 107.518 10.3472 107.202 10.658 cv
106.887 10.9787 106.512 11.2313 106.099 11.3964 cv
105.687 11.5714 105.245 11.6589 104.798 11.6589 cv
104.351 11.6589 103.909 11.5714 103.497 11.3964 cv
103.084 11.2313 102.709 10.9787 102.393 10.658 cv
102.077 10.3472 101.827 9.96832 101.656 9.56024 cv
101.486 9.1424 101.397 8.70526 101.397 8.25836 cv
101.397 7.81134 101.486 7.37421 101.656 6.95636 cv
101.827 6.5484 102.077 6.16937 102.393 5.85858 cv
102.709 5.5379 103.084 5.28534 103.497 5.12018 cv
103.909 4.94525 104.351 4.85785 104.798 4.85785 cv
105.245 4.85785 105.687 4.94525 106.099 5.12018 cv
106.512 5.28534 106.887 5.5379 107.202 5.85858 cv
107.518 6.16937 107.769 6.5484 107.94 6.95636 cv
108.11 7.37421 108.198 7.81134 108.198 8.25836 cv
cp
.74902 gry
f
.97157 lw
0 lj
108.198 8.25824 mo
108.198 8.7052 108.11 9.14233 107.94 9.56018 cv
107.769 9.96826 107.518 10.3472 107.202 10.658 cv
106.887 10.9786 106.512 11.2313 106.099 11.3964 cv
105.687 11.5713 105.245 11.6588 104.798 11.6588 cv
104.351 11.6588 103.909 11.5713 103.497 11.3964 cv
103.084 11.2313 102.709 10.9786 102.393 10.658 cv
102.077 10.3472 101.827 9.96826 101.656 9.56018 cv
101.486 9.14233 101.397 8.7052 101.397 8.25824 cv
101.397 7.81134 101.486 7.37415 101.656 6.9563 cv
101.827 6.54828 102.077 6.16937 102.393 5.85852 cv
102.709 5.5379 103.084 5.28528 103.497 5.12012 cv
103.909 4.94525 104.351 4.85779 104.798 4.85779 cv
105.245 4.85779 105.687 4.94525 106.099 5.12012 cv
106.512 5.28528 106.887 5.5379 107.202 5.85852 cv
107.518 6.16937 107.769 6.54828 107.94 6.9563 cv
108.11 7.37415 108.198 7.81134 108.198 8.25824 cv
cp
0 gry
@
101.397 24.775 mo
281.798 24.775 li
281.798 37.4055 li
101.397 37.4055 li
cp
1 gry
f
101.397 24.775 mo
281.798 24.775 li
281.798 37.4053 li
101.397 37.4053 li
cp
@
101.397 37.4055 mo
122.445 37.4055 li
122.445 50.0358 li
101.397 50.0358 li
cp
f
101.397 37.4053 mo
122.445 37.4053 li
122.445 50.0358 li
101.397 50.0358 li
cp
@
111.113 140.878 mo
117.914 140.878 li
117.914 147.679 li
111.113 147.679 li
cp
.74902 gry
f
111.113 140.878 mo
117.914 140.878 li
117.914 147.679 li
111.113 147.679 li
cp
0 gry
@
111.113 160.795 mo
167.138 160.795 li
167.138 173.425 li
111.113 173.425 li
cp
1 gry
f
111.113 160.795 mo
167.138 160.795 li
167.138 173.425 li
111.113 173.425 li
cp
@
111.113 173.425 mo
135.379 173.425 li
135.379 186.056 li
111.113 186.056 li
cp
f
111.113 173.425 mo
135.379 173.425 li
135.379 186.056 li
111.113 186.056 li
cp
@
111.113 186.056 mo
190.455 186.056 li
190.455 198.686 li
111.113 198.686 li
cp
f
111.113 186.056 mo
190.455 186.056 li
190.455 198.686 li
111.113 198.686 li
cp
@
127.63 212.288 mo
127.63 212.735 127.541 213.172 127.371 213.59 cv
127.2 213.998 126.95 214.377 126.634 214.688 cv
126.318 215.008 125.943 215.261 125.53 215.426 cv
125.118 215.601 124.676 215.689 124.229 215.689 cv
123.782 215.689 123.34 215.601 122.928 215.426 cv
122.515 215.261 122.14 215.008 121.825 214.688 cv
121.509 214.377 121.258 213.998 121.087 213.59 cv
120.917 213.172 120.829 212.735 120.829 212.288 cv
120.829 211.841 120.917 211.404 121.087 210.986 cv
121.258 210.578 121.509 210.199 121.825 209.888 cv
122.14 209.568 122.515 209.315 122.928 209.15 cv
123.34 208.975 123.782 208.888 124.229 208.888 cv
124.676 208.888 125.118 208.975 125.53 209.15 cv
125.943 209.315 126.318 209.568 126.634 209.888 cv
126.95 210.199 127.2 210.578 127.371 210.986 cv
127.541 211.404 127.63 211.841 127.63 212.288 cv
cp
.74902 gry
f
127.63 212.288 mo
127.63 212.735 127.541 213.172 127.371 213.59 cv
127.2 213.998 126.95 214.377 126.634 214.688 cv
126.318 215.008 125.943 215.261 125.53 215.426 cv
125.118 215.601 124.676 215.688 124.229 215.688 cv
123.782 215.688 123.34 215.601 122.928 215.426 cv
122.515 215.261 122.14 215.008 121.825 214.688 cv
121.509 214.377 121.258 213.998 121.087 213.59 cv
120.917 213.172 120.829 212.735 120.829 212.288 cv
120.829 211.841 120.917 211.404 121.087 210.986 cv
121.258 210.578 121.509 210.199 121.825 209.888 cv
122.14 209.568 122.515 209.315 122.928 209.15 cv
123.34 208.975 123.782 208.887 124.229 208.887 cv
124.676 208.887 125.118 208.975 125.53 209.15 cv
125.943 209.315 126.318 209.568 126.634 209.888 cv
126.95 210.199 127.2 210.578 127.371 210.986 cv
127.541 211.404 127.63 211.841 127.63 212.288 cv
cp
0 gry
@
120.829 228.805 mo
190.482 228.805 li
190.482 241.435 li
120.829 241.435 li
cp
1 gry
f
120.829 228.805 mo
190.482 228.805 li
190.482 241.435 li
120.829 241.435 li
cp
@
120.829 241.435 mo
153.512 241.435 li
153.512 254.066 li
120.829 254.066 li
cp
f
120.829 241.435 mo
153.512 241.435 li
153.512 254.065 li
120.829 254.065 li
cp
@
120.829 254.066 mo
169.741 254.066 li
169.741 266.696 li
120.829 266.696 li
cp
f
120.829 254.065 mo
169.741 254.065 li
169.741 266.696 li
120.829 266.696 li
cp
@
205.996 144.278 mo
205.996 144.725 205.909 145.162 205.744 145.58 cv
205.569 145.988 205.316 146.367 205.005 146.678 cv
204.685 146.998 204.316 147.251 203.898 147.416 cv
203.49 147.591 203.043 147.679 202.596 147.679 cv
202.149 147.679 201.712 147.591 201.294 147.416 cv
200.886 147.251 200.507 146.998 200.196 146.678 cv
199.876 146.367 199.633 145.988 199.458 145.58 cv
199.283 145.162 199.195 144.725 199.195 144.278 cv
199.195 143.831 199.283 143.394 199.458 142.976 cv
199.633 142.568 199.876 142.189 200.196 141.878 cv
200.507 141.558 200.886 141.305 201.294 141.14 cv
201.712 140.965 202.149 140.878 202.596 140.878 cv
203.043 140.878 203.49 140.965 203.898 141.14 cv
204.316 141.305 204.685 141.558 205.005 141.878 cv
205.316 142.189 205.569 142.568 205.744 142.976 cv
205.909 143.394 205.996 143.831 205.996 144.278 cv
cp
.74902 gry
f
205.996 144.278 mo
205.996 144.725 205.909 145.162 205.744 145.58 cv
205.569 145.988 205.316 146.367 205.005 146.678 cv
204.685 146.998 204.316 147.251 203.898 147.416 cv
203.49 147.591 203.043 147.679 202.596 147.679 cv
202.149 147.679 201.712 147.591 201.294 147.416 cv
200.886 147.251 200.507 146.998 200.196 146.678 cv
199.876 146.367 199.633 145.988 199.458 145.58 cv
199.283 145.162 199.195 144.725 199.195 144.278 cv
199.195 143.831 199.283 143.394 199.458 142.976 cv
199.633 142.568 199.876 142.189 200.196 141.878 cv
200.507 141.558 200.886 141.305 201.294 141.14 cv
201.712 140.965 202.149 140.878 202.596 140.878 cv
203.043 140.878 203.49 140.965 203.898 141.14 cv
204.316 141.305 204.685 141.558 205.005 141.878 cv
205.316 142.189 205.569 142.568 205.744 142.976 cv
205.909 143.394 205.996 143.831 205.996 144.278 cv
cp
0 gry
@
199.195 160.795 mo
240.32 160.795 li
240.32 173.425 li
199.195 173.425 li
cp
1 gry
f
199.195 160.795 mo
240.32 160.795 li
240.32 173.425 li
199.195 173.425 li
cp
@
199.195 173.425 mo
254.567 173.425 li
254.567 186.056 li
199.195 186.056 li
cp
f
199.195 173.425 mo
254.567 173.425 li
254.567 186.056 li
199.195 186.056 li
cp
@
199.195 186.056 mo
239.038 186.056 li
239.038 198.686 li
199.195 198.686 li
cp
f
199.195 186.056 mo
239.038 186.056 li
239.038 198.686 li
199.195 198.686 li
cp
@
215.712 212.288 mo
215.712 212.735 215.625 213.172 215.46 213.59 cv
215.285 213.998 215.032 214.377 214.721 214.688 cv
214.401 215.008 214.031 215.261 213.614 215.426 cv
213.206 215.601 212.759 215.689 212.312 215.689 cv
211.865 215.689 211.428 215.601 211.01 215.426 cv
210.602 215.261 210.223 215.008 209.912 214.688 cv
209.591 214.377 209.348 213.998 209.174 213.59 cv
208.999 213.172 208.911 212.735 208.911 212.288 cv
208.911 211.841 208.999 211.404 209.174 210.986 cv
209.348 210.578 209.591 210.199 209.912 209.888 cv
210.223 209.568 210.602 209.315 211.01 209.15 cv
211.428 208.975 211.865 208.888 212.312 208.888 cv
212.759 208.888 213.206 208.975 213.614 209.15 cv
214.031 209.315 214.401 209.568 214.721 209.888 cv
215.032 210.199 215.285 210.578 215.46 210.986 cv
215.625 211.404 215.712 211.841 215.712 212.288 cv
cp
.74902 gry
f
215.712 212.288 mo
215.712 212.735 215.625 213.172 215.46 213.59 cv
215.285 213.998 215.032 214.377 214.721 214.688 cv
214.401 215.008 214.031 215.261 213.614 215.426 cv
213.206 215.601 212.759 215.688 212.312 215.688 cv
211.865 215.688 211.428 215.601 211.01 215.426 cv
210.602 215.261 210.223 215.008 209.912 214.688 cv
209.591 214.377 209.348 213.998 209.173 213.59 cv
208.999 213.172 208.911 212.735 208.911 212.288 cv
208.911 211.841 208.999 211.404 209.173 210.986 cv
209.348 210.578 209.591 210.199 209.912 209.888 cv
210.223 209.568 210.602 209.315 211.01 209.15 cv
211.428 208.975 211.865 208.887 212.312 208.887 cv
212.759 208.887 213.206 208.975 213.614 209.15 cv
214.031 209.315 214.401 209.568 214.721 209.888 cv
215.032 210.199 215.285 210.578 215.46 210.986 cv
215.625 211.404 215.712 211.841 215.712 212.288 cv
cp
0 gry
@
208.911 228.805 mo
238.365 228.805 li
238.365 241.435 li
208.911 241.435 li
cp
1 gry
f
208.911 228.805 mo
238.365 228.805 li
238.365 241.435 li
208.911 241.435 li
cp
@
208.911 241.435 mo
264.283 241.435 li
264.283 254.066 li
208.911 254.066 li
cp
f
208.911 241.435 mo
264.283 241.435 li
264.283 254.065 li
208.911 254.065 li
cp
@
208.911 254.066 mo
248.753 254.066 li
248.753 266.696 li
208.911 266.696 li
cp
f
208.911 254.065 mo
248.753 254.065 li
248.753 266.696 li
208.911 266.696 li
cp
@
225.428 76.2682 mo
225.428 76.7151 225.34 77.1523 225.175 77.5701 cv
225 77.9782 224.748 78.3571 224.437 78.668 cv
224.116 78.9886 223.747 79.2412 223.329 79.4064 cv
222.921 79.5812 222.474 79.6687 222.027 79.6687 cv
221.58 79.6687 221.143 79.5812 220.725 79.4064 cv
220.317 79.2412 219.939 78.9886 219.628 78.668 cv
219.307 78.3571 219.064 77.9782 218.889 77.5701 cv
218.714 77.1523 218.627 76.7151 218.627 76.2682 cv
218.627 75.8214 218.714 75.3841 218.889 74.9663 cv
219.064 74.5583 219.307 74.1794 219.628 73.8685 cv
219.939 73.5479 220.317 73.2952 220.725 73.1301 cv
221.143 72.9551 221.58 72.8677 222.027 72.8677 cv
222.474 72.8677 222.921 72.9551 223.329 73.1301 cv
223.747 73.2952 224.116 73.5479 224.437 73.8685 cv
224.748 74.1794 225 74.5583 225.175 74.9663 cv
225.34 75.3841 225.428 75.8214 225.428 76.2682 cv
cp
.74902 gry
f
225.428 76.2682 mo
225.428 76.7151 225.34 77.1523 225.175 77.5701 cv
225 77.9781 224.748 78.3571 224.437 78.668 cv
224.116 78.9886 223.747 79.2412 223.329 79.4064 cv
222.921 79.5812 222.474 79.6687 222.027 79.6687 cv
221.58 79.6687 221.143 79.5812 220.725 79.4064 cv
220.317 79.2412 219.938 78.9886 219.628 78.668 cv
219.307 78.3571 219.064 77.9781 218.889 77.5701 cv
218.714 77.1523 218.627 76.7151 218.627 76.2682 cv
218.627 75.8213 218.714 75.384 218.889 74.9663 cv
219.064 74.5582 219.307 74.1793 219.628 73.8684 cv
219.938 73.5478 220.317 73.2952 220.725 73.13 cv
221.143 72.9551 221.58 72.8677 222.027 72.8677 cv
222.474 72.8677 222.921 72.9551 223.329 73.13 cv
223.747 73.2952 224.116 73.5478 224.437 73.8684 cv
224.748 74.1793 225 74.5582 225.175 74.9663 cv
225.34 75.384 225.428 75.8213 225.428 76.2682 cv
cp
0 gry
@
218.627 92.7849 mo
251.963 92.7849 li
251.963 105.415 li
218.627 105.415 li
cp
1 gry
f
218.627 92.7849 mo
251.963 92.7849 li
251.963 105.415 li
218.627 105.415 li
cp
@
218.627 105.415 mo
251.963 105.415 li
251.963 118.046 li
218.627 118.046 li
cp
f
218.627 105.415 mo
251.963 105.415 li
251.963 118.046 li
218.627 118.046 li
cp
@
218.627 118.046 mo
225.428 118.046 li
225.428 130.676 li
218.627 130.676 li
cp
f
218.627 118.046 mo
225.428 118.046 li
225.428 130.676 li
218.627 130.676 li
cp
@
235.144 280.298 mo
235.144 280.745 235.056 281.182 234.891 281.6 cv
234.716 282.008 234.463 282.387 234.153 282.698 cv
233.832 283.018 233.463 283.271 233.045 283.436 cv
232.637 283.611 232.19 283.698 231.743 283.698 cv
231.296 283.698 230.859 283.611 230.441 283.436 cv
230.033 283.271 229.654 283.018 229.343 282.698 cv
229.023 282.387 228.78 282.008 228.605 281.6 cv
228.43 281.182 228.343 280.745 228.343 280.298 cv
228.343 279.851 228.43 279.414 228.605 278.996 cv
228.78 278.588 229.023 278.209 229.343 277.898 cv
229.654 277.578 230.033 277.325 230.441 277.16 cv
230.859 276.985 231.296 276.897 231.743 276.897 cv
232.19 276.897 232.637 276.985 233.045 277.16 cv
233.463 277.325 233.832 277.578 234.153 277.898 cv
234.463 278.209 234.716 278.588 234.891 278.996 cv
235.056 279.414 235.144 279.851 235.144 280.298 cv
cp
.74902 gry
f
235.144 280.298 mo
235.144 280.745 235.056 281.182 234.891 281.6 cv
234.716 282.008 234.463 282.387 234.153 282.698 cv
233.832 283.018 233.463 283.271 233.045 283.436 cv
232.637 283.611 232.19 283.698 231.743 283.698 cv
231.296 283.698 230.859 283.611 230.441 283.436 cv
230.033 283.271 229.654 283.018 229.343 282.698 cv
229.023 282.387 228.78 282.008 228.605 281.6 cv
228.43 281.182 228.343 280.745 228.343 280.298 cv
228.343 279.851 228.43 279.414 228.605 278.996 cv
228.78 278.588 229.023 278.209 229.343 277.898 cv
229.654 277.577 230.033 277.325 230.441 277.16 cv
230.859 276.985 231.296 276.897 231.743 276.897 cv
232.19 276.897 232.637 276.985 233.045 277.16 cv
233.463 277.325 233.832 277.577 234.153 277.898 cv
234.463 278.209 234.716 278.588 234.891 278.996 cv
235.056 279.414 235.144 279.851 235.144 280.298 cv
cp
0 gry
@
228.343 296.815 mo
248.108 296.815 li
248.108 309.445 li
228.343 309.445 li
cp
1 gry
f
228.343 296.815 mo
248.108 296.815 li
248.108 309.445 li
228.343 309.445 li
cp
@
228.343 309.445 mo
261.026 309.445 li
261.026 322.075 li
228.343 322.075 li
cp
f
228.343 309.445 mo
261.026 309.445 li
261.026 322.075 li
228.343 322.075 li
cp
@
228.343 322.075 mo
296.679 322.075 li
296.679 334.706 li
228.343 334.706 li
cp
f
228.343 322.075 mo
296.679 322.075 li
296.679 334.706 li
228.343 334.706 li
cp
@
279.836 212.288 mo
279.836 212.735 279.748 213.172 279.573 213.59 cv
279.399 213.998 279.156 214.377 278.835 214.688 cv
278.524 215.008 278.145 215.261 277.737 215.426 cv
277.319 215.601 276.882 215.689 276.435 215.689 cv
275.988 215.689 275.541 215.601 275.133 215.426 cv
274.716 215.261 274.346 215.008 274.026 214.688 cv
273.715 214.377 273.462 213.998 273.287 213.59 cv
273.122 213.172 273.035 212.735 273.035 212.288 cv
273.035 211.841 273.122 211.404 273.287 210.986 cv
273.462 210.578 273.715 210.199 274.026 209.888 cv
274.346 209.568 274.716 209.315 275.133 209.15 cv
275.541 208.975 275.988 208.888 276.435 208.888 cv
276.882 208.888 277.319 208.975 277.737 209.15 cv
278.145 209.315 278.524 209.568 278.835 209.888 cv
279.156 210.199 279.399 210.578 279.573 210.986 cv
279.748 211.404 279.836 211.841 279.836 212.288 cv
cp
.74902 gry
f
279.836 212.288 mo
279.836 212.735 279.748 213.172 279.573 213.59 cv
279.399 213.998 279.156 214.377 278.835 214.688 cv
278.524 215.008 278.145 215.261 277.737 215.426 cv
277.319 215.601 276.882 215.688 276.435 215.688 cv
275.988 215.688 275.541 215.601 275.133 215.426 cv
274.716 215.261 274.346 215.008 274.026 214.688 cv
273.715 214.377 273.462 213.998 273.287 213.59 cv
273.122 213.172 273.035 212.735 273.035 212.288 cv
273.035 211.841 273.122 211.404 273.287 210.986 cv
273.462 210.578 273.715 210.199 274.026 209.888 cv
274.346 209.568 274.716 209.315 275.133 209.15 cv
275.541 208.975 275.988 208.887 276.435 208.887 cv
276.882 208.887 277.319 208.975 277.737 209.15 cv
278.145 209.315 278.524 209.568 278.835 209.888 cv
279.156 210.199 279.399 210.578 279.573 210.986 cv
279.748 211.404 279.836 211.841 279.836 212.288 cv
cp
0 gry
@
273.035 228.805 mo
296.03 228.805 li
296.03 241.435 li
273.035 241.435 li
cp
1 gry
f
273.035 228.805 mo
296.03 228.805 li
296.03 241.435 li
273.035 241.435 li
cp
@
273.035 241.435 mo
297.301 241.435 li
297.301 254.066 li
273.035 254.066 li
cp
f
273.035 241.435 mo
297.301 241.435 li
297.301 254.065 li
273.035 254.065 li
cp
@
273.035 254.066 mo
312.877 254.066 li
312.877 266.696 li
273.035 266.696 li
cp
f
273.035 254.065 mo
312.877 254.065 li
312.877 266.696 li
273.035 266.696 li
cp
@
289.552 144.278 mo
289.552 144.725 289.464 145.162 289.289 145.58 cv
289.114 145.988 288.871 146.367 288.551 146.678 cv
288.24 146.998 287.861 147.251 287.453 147.416 cv
287.035 147.591 286.598 147.679 286.151 147.679 cv
285.704 147.679 285.257 147.591 284.849 147.416 cv
284.431 147.251 284.062 146.998 283.742 146.678 cv
283.431 146.367 283.178 145.988 283.003 145.58 cv
282.838 145.162 282.751 144.725 282.751 144.278 cv
282.751 143.831 282.838 143.394 283.003 142.976 cv
283.178 142.568 283.431 142.189 283.742 141.878 cv
284.062 141.558 284.431 141.305 284.849 141.14 cv
285.257 140.965 285.704 140.878 286.151 140.878 cv
286.598 140.878 287.035 140.965 287.453 141.14 cv
287.861 141.305 288.24 141.558 288.551 141.878 cv
288.871 142.189 289.114 142.568 289.289 142.976 cv
289.464 143.394 289.552 143.831 289.552 144.278 cv
cp
.74902 gry
f
289.551 144.278 mo
289.551 144.725 289.464 145.162 289.289 145.58 cv
289.114 145.988 288.871 146.367 288.551 146.678 cv
288.24 146.998 287.861 147.251 287.453 147.416 cv
287.035 147.591 286.598 147.679 286.151 147.679 cv
285.704 147.679 285.257 147.591 284.849 147.416 cv
284.431 147.251 284.062 146.998 283.741 146.678 cv
283.431 146.367 283.178 145.988 283.003 145.58 cv
282.838 145.162 282.75 144.725 282.75 144.278 cv
282.75 143.831 282.838 143.394 283.003 142.976 cv
283.178 142.568 283.431 142.189 283.741 141.878 cv
284.062 141.558 284.431 141.305 284.849 141.14 cv
285.257 140.965 285.704 140.878 286.151 140.878 cv
286.598 140.878 287.035 140.965 287.453 141.14 cv
287.861 141.305 288.24 141.558 288.551 141.878 cv
288.871 142.189 289.114 142.568 289.289 142.976 cv
289.464 143.394 289.551 143.831 289.551 144.278 cv
cp
0 gry
@
282.751 160.795 mo
317.416 160.795 li
317.416 173.425 li
282.751 173.425 li
cp
1 gry
f
282.75 160.795 mo
317.416 160.795 li
317.416 173.425 li
282.75 173.425 li
cp
@
282.751 173.425 mo
314.781 173.425 li
314.781 186.056 li
282.751 186.056 li
cp
f
282.75 173.425 mo
314.781 173.425 li
314.781 186.056 li
282.75 186.056 li
cp
@
282.751 186.056 mo
308.998 186.056 li
308.998 198.686 li
282.751 198.686 li
cp
f
282.75 186.056 mo
308.998 186.056 li
308.998 198.686 li
282.75 198.686 li
cp
@
299.267 348.308 mo
299.267 348.755 299.18 349.192 299.005 349.61 cv
298.83 350.018 298.587 350.397 298.266 350.708 cv
297.956 351.028 297.577 351.281 297.169 351.446 cv
296.751 351.621 296.314 351.708 295.867 351.708 cv
295.42 351.708 294.973 351.621 294.565 351.446 cv
294.147 351.281 293.778 351.028 293.457 350.708 cv
293.146 350.397 292.894 350.018 292.719 349.61 cv
292.554 349.192 292.466 348.755 292.466 348.308 cv
292.466 347.861 292.554 347.424 292.719 347.006 cv
292.894 346.598 293.146 346.219 293.457 345.908 cv
293.778 345.587 294.147 345.335 294.565 345.17 cv
294.973 344.995 295.42 344.907 295.867 344.907 cv
296.314 344.907 296.751 344.995 297.169 345.17 cv
297.577 345.335 297.956 345.587 298.266 345.908 cv
298.587 346.219 298.83 346.598 299.005 347.006 cv
299.18 347.424 299.267 347.861 299.267 348.308 cv
cp
.74902 gry
f
299.267 348.308 mo
299.267 348.755 299.18 349.192 299.005 349.61 cv
298.83 350.018 298.587 350.397 298.266 350.708 cv
297.956 351.028 297.577 351.281 297.169 351.446 cv
296.751 351.621 296.314 351.708 295.867 351.708 cv
295.42 351.708 294.973 351.621 294.565 351.446 cv
294.147 351.281 293.778 351.028 293.457 350.708 cv
293.146 350.397 292.894 350.018 292.719 349.61 cv
292.554 349.192 292.466 348.755 292.466 348.308 cv
292.466 347.861 292.554 347.424 292.719 347.006 cv
292.894 346.598 293.146 346.219 293.457 345.908 cv
293.778 345.587 294.147 345.335 294.565 345.17 cv
294.973 344.995 295.42 344.907 295.867 344.907 cv
296.314 344.907 296.751 344.995 297.169 345.17 cv
297.577 345.335 297.956 345.587 298.266 345.908 cv
298.587 346.219 298.83 346.598 299.005 347.006 cv
299.18 347.424 299.267 347.861 299.267 348.308 cv
cp
0 gry
@
292.466 364.825 mo
324.532 364.825 li
324.532 377.455 li
292.466 377.455 li
cp
1 gry
f
292.466 364.824 mo
324.532 364.824 li
324.532 377.455 li
292.466 377.455 li
cp
@
292.466 377.455 mo
325.15 377.455 li
325.15 390.085 li
292.466 390.085 li
cp
f
292.466 377.455 mo
325.15 377.455 li
325.15 390.085 li
292.466 390.085 li
cp
@
292.466 390.085 mo
341.379 390.085 li
341.379 402.716 li
292.466 402.716 li
cp
f
292.466 390.085 mo
341.379 390.085 li
341.379 402.716 li
292.466 402.716 li
cp
@
312.228 280.298 mo
312.228 280.745 312.141 281.182 311.966 281.6 cv
311.8 282.008 311.548 282.387 311.227 282.698 cv
310.916 283.018 310.537 283.271 310.129 283.436 cv
309.712 283.611 309.274 283.698 308.827 283.698 cv
308.381 283.698 307.943 283.611 307.526 283.436 cv
307.117 283.271 306.739 283.018 306.428 282.698 cv
306.107 282.387 305.854 282.008 305.689 281.6 cv
305.514 281.182 305.427 280.745 305.427 280.298 cv
305.427 279.851 305.514 279.414 305.689 278.996 cv
305.854 278.588 306.107 278.209 306.428 277.898 cv
306.739 277.578 307.117 277.325 307.526 277.16 cv
307.943 276.985 308.381 276.897 308.827 276.897 cv
309.274 276.897 309.712 276.985 310.129 277.16 cv
310.537 277.325 310.916 277.578 311.227 277.898 cv
311.548 278.209 311.8 278.588 311.966 278.996 cv
312.141 279.414 312.228 279.851 312.228 280.298 cv
cp
.74902 gry
f
312.228 280.298 mo
312.228 280.745 312.141 281.182 311.966 281.6 cv
311.8 282.008 311.548 282.387 311.227 282.698 cv
310.916 283.018 310.537 283.271 310.129 283.436 cv
309.712 283.611 309.274 283.698 308.827 283.698 cv
308.38 283.698 307.943 283.611 307.526 283.436 cv
307.117 283.271 306.739 283.018 306.428 282.698 cv
306.107 282.387 305.854 282.008 305.689 281.6 cv
305.514 281.182 305.427 280.745 305.427 280.298 cv
305.427 279.851 305.514 279.414 305.689 278.996 cv
305.854 278.588 306.107 278.209 306.428 277.898 cv
306.739 277.577 307.117 277.325 307.526 277.16 cv
307.943 276.985 308.38 276.897 308.827 276.897 cv
309.274 276.897 309.712 276.985 310.129 277.16 cv
310.537 277.325 310.916 277.577 311.227 277.898 cv
311.548 278.209 311.8 278.588 311.966 278.996 cv
312.141 279.414 312.228 279.851 312.228 280.298 cv
cp
0 gry
@
305.427 296.815 mo
338.146 296.815 li
338.146 309.445 li
305.427 309.445 li
cp
1 gry
f
305.427 296.815 mo
338.146 296.815 li
338.146 309.445 li
305.427 309.445 li
cp
@
305.427 309.445 mo
349.769 309.445 li
349.769 322.075 li
305.427 322.075 li
cp
f
305.427 309.445 mo
349.769 309.445 li
349.769 322.075 li
305.427 322.075 li
cp
@
305.427 322.075 mo
345.269 322.075 li
345.269 334.706 li
305.427 334.706 li
cp
f
305.427 322.075 mo
345.269 322.075 li
345.269 334.706 li
305.427 334.706 li
cp
@
328.414 212.288 mo
328.414 212.735 328.327 213.172 328.162 213.59 cv
327.987 213.998 327.734 214.377 327.423 214.688 cv
327.103 215.008 326.733 215.261 326.316 215.426 cv
325.908 215.601 325.461 215.689 325.014 215.689 cv
324.567 215.689 324.13 215.601 323.712 215.426 cv
323.304 215.261 322.925 215.008 322.614 214.688 cv
322.293 214.377 322.051 213.998 321.876 213.59 cv
321.701 213.172 321.613 212.735 321.613 212.288 cv
321.613 211.841 321.701 211.404 321.876 210.986 cv
322.051 210.578 322.293 210.199 322.614 209.888 cv
322.925 209.568 323.304 209.315 323.712 209.15 cv
324.13 208.975 324.567 208.888 325.014 208.888 cv
325.461 208.888 325.908 208.975 326.316 209.15 cv
326.733 209.315 327.103 209.568 327.423 209.888 cv
327.734 210.199 327.987 210.578 328.162 210.986 cv
328.327 211.404 328.414 211.841 328.414 212.288 cv
cp
.74902 gry
f
328.414 212.288 mo
328.414 212.735 328.327 213.172 328.162 213.59 cv
327.987 213.998 327.734 214.377 327.423 214.688 cv
327.103 215.008 326.733 215.261 326.316 215.426 cv
325.908 215.601 325.461 215.688 325.014 215.688 cv
324.567 215.688 324.13 215.601 323.712 215.426 cv
323.304 215.261 322.925 215.008 322.614 214.688 cv
322.293 214.377 322.051 213.998 321.876 213.59 cv
321.701 213.172 321.613 212.735 321.613 212.288 cv
321.613 211.841 321.701 211.404 321.876 210.986 cv
322.051 210.578 322.293 210.199 322.614 209.888 cv
322.925 209.568 323.304 209.315 323.712 209.15 cv
324.13 208.975 324.567 208.887 325.014 208.887 cv
325.461 208.887 325.908 208.975 326.316 209.15 cv
326.733 209.315 327.103 209.568 327.423 209.888 cv
327.734 210.199 327.987 210.578 328.162 210.986 cv
328.327 211.404 328.414 211.841 328.414 212.288 cv
cp
0 gry
@
321.613 228.805 mo
329.067 228.805 li
329.067 241.435 li
321.613 241.435 li
cp
1 gry
f
321.613 228.805 mo
329.067 228.805 li
329.067 241.435 li
321.613 241.435 li
cp
@
321.613 241.435 mo
354.309 241.435 li
354.309 254.066 li
321.613 254.066 li
cp
f
321.613 241.435 mo
354.309 241.435 li
354.309 254.065 li
321.613 254.065 li
cp
@
321.613 254.066 mo
347.861 254.066 li
347.861 266.696 li
321.613 266.696 li
cp
f
321.613 254.065 mo
347.861 254.065 li
347.861 266.696 li
321.613 266.696 li
cp
@
356.92 348.308 mo
356.92 348.755 356.833 349.192 356.658 349.61 cv
356.493 350.018 356.24 350.397 355.919 350.708 cv
355.609 351.028 355.23 351.281 354.822 351.446 cv
354.404 351.621 353.967 351.708 353.52 351.708 cv
353.073 351.708 352.636 351.621 352.218 351.446 cv
351.81 351.281 351.431 351.028 351.12 350.708 cv
350.799 350.397 350.547 350.018 350.382 349.61 cv
350.207 349.192 350.119 348.755 350.119 348.308 cv
350.119 347.861 350.207 347.424 350.382 347.006 cv
350.547 346.598 350.799 346.219 351.12 345.908 cv
351.431 345.587 351.81 345.335 352.218 345.17 cv
352.636 344.995 353.073 344.907 353.52 344.907 cv
353.967 344.907 354.404 344.995 354.822 345.17 cv
355.23 345.335 355.609 345.587 355.919 345.908 cv
356.24 346.219 356.493 346.598 356.658 347.006 cv
356.833 347.424 356.92 347.861 356.92 348.308 cv
cp
.74902 gry
f
356.92 348.308 mo
356.92 348.755 356.833 349.192 356.658 349.61 cv
356.493 350.018 356.24 350.397 355.919 350.708 cv
355.609 351.028 355.23 351.281 354.822 351.446 cv
354.404 351.621 353.967 351.708 353.52 351.708 cv
353.073 351.708 352.636 351.621 352.218 351.446 cv
351.81 351.281 351.431 351.028 351.12 350.708 cv
350.799 350.397 350.547 350.018 350.381 349.61 cv
350.207 349.192 350.119 348.755 350.119 348.308 cv
350.119 347.861 350.207 347.424 350.381 347.006 cv
350.547 346.598 350.799 346.219 351.12 345.908 cv
351.431 345.587 351.81 345.335 352.218 345.17 cv
352.636 344.995 353.073 344.907 353.52 344.907 cv
353.967 344.907 354.404 344.995 354.822 345.17 cv
355.23 345.335 355.609 345.587 355.919 345.908 cv
356.24 346.219 356.493 346.598 356.658 347.006 cv
356.833 347.424 356.92 347.861 356.92 348.308 cv
cp
0 gry
@
350.119 364.825 mo
375.703 364.825 li
375.703 377.455 li
350.119 377.455 li
cp
1 gry
f
350.119 364.824 mo
375.703 364.824 li
375.703 377.455 li
350.119 377.455 li
cp
@
350.119 377.455 mo
382.803 377.455 li
382.803 390.085 li
350.119 390.085 li
cp
f
350.119 377.455 mo
382.803 377.455 li
382.803 390.085 li
350.119 390.085 li
cp
@
350.119 390.085 mo
399.032 390.085 li
399.032 402.716 li
350.119 402.716 li
cp
f
350.119 390.085 mo
399.032 390.085 li
399.032 402.716 li
350.119 402.716 li
cp
@
366.636 280.298 mo
366.636 280.745 366.548 281.182 366.374 281.6 cv
366.208 282.008 365.956 282.387 365.635 282.698 cv
365.324 283.018 364.945 283.271 364.537 283.436 cv
364.12 283.611 363.682 283.698 363.235 283.698 cv
362.788 283.698 362.351 283.611 361.933 283.436 cv
361.525 283.271 361.147 283.018 360.836 282.698 cv
360.515 282.387 360.262 282.008 360.097 281.6 cv
359.922 281.182 359.835 280.745 359.835 280.298 cv
359.835 279.851 359.922 279.414 360.097 278.996 cv
360.262 278.588 360.515 278.209 360.836 277.898 cv
361.147 277.578 361.525 277.325 361.933 277.16 cv
362.351 276.985 362.788 276.897 363.235 276.897 cv
363.682 276.897 364.12 276.985 364.537 277.16 cv
364.945 277.325 365.324 277.578 365.635 277.898 cv
365.956 278.209 366.208 278.588 366.374 278.996 cv
366.548 279.414 366.636 279.851 366.636 280.298 cv
cp
.74902 gry
f
366.636 280.298 mo
366.636 280.745 366.548 281.182 366.374 281.6 cv
366.208 282.008 365.956 282.387 365.635 282.698 cv
365.324 283.018 364.945 283.271 364.537 283.436 cv
364.119 283.611 363.682 283.698 363.235 283.698 cv
362.788 283.698 362.351 283.611 361.933 283.436 cv
361.525 283.271 361.146 283.018 360.836 282.698 cv
360.515 282.387 360.262 282.008 360.097 281.6 cv
359.922 281.182 359.835 280.745 359.835 280.298 cv
359.835 279.851 359.922 279.414 360.097 278.996 cv
360.262 278.588 360.515 278.209 360.836 277.898 cv
361.146 277.577 361.525 277.325 361.933 277.16 cv
362.351 276.985 362.788 276.897 363.235 276.897 cv
363.682 276.897 364.119 276.985 364.537 277.16 cv
364.945 277.325 365.324 277.577 365.635 277.898 cv
365.956 278.209 366.208 278.588 366.374 278.996 cv
366.548 279.414 366.636 279.851 366.636 280.298 cv
cp
0 gry
@
359.835 296.815 mo
382.83 296.815 li
382.83 309.445 li
359.835 309.445 li
cp
1 gry
f
359.835 296.815 mo
382.83 296.815 li
382.83 309.445 li
359.835 309.445 li
cp
@
359.835 309.445 mo
404.177 309.445 li
404.177 322.075 li
359.835 322.075 li
cp
f
359.835 309.445 mo
404.177 309.445 li
404.177 322.075 li
359.835 322.075 li
cp
@
359.835 322.075 mo
399.677 322.075 li
399.677 334.706 li
359.835 334.706 li
cp
f
359.835 322.075 mo
399.677 322.075 li
399.677 334.706 li
359.835 334.706 li
cp
@
376.352 484.328 mo
376.352 484.775 376.264 485.217 376.089 485.629 cv
375.924 486.041 375.671 486.417 375.351 486.732 cv
375.04 487.048 374.661 487.299 374.253 487.47 cv
373.835 487.64 373.398 487.728 372.951 487.728 cv
372.504 487.728 372.067 487.64 371.649 487.47 cv
371.241 487.299 370.862 487.048 370.551 486.732 cv
370.231 486.417 369.978 486.041 369.813 485.629 cv
369.638 485.217 369.551 484.775 369.551 484.328 cv
369.551 483.881 369.638 483.439 369.813 483.027 cv
369.978 482.614 370.231 482.239 370.551 481.923 cv
370.862 481.607 371.241 481.357 371.649 481.186 cv
372.067 481.016 372.504 480.927 372.951 480.927 cv
373.398 480.927 373.835 481.016 374.253 481.186 cv
374.661 481.357 375.04 481.607 375.351 481.923 cv
375.671 482.239 375.924 482.614 376.089 483.027 cv
376.264 483.439 376.352 483.881 376.352 484.328 cv
cp
.74902 gry
f
376.352 484.328 mo
376.352 484.775 376.264 485.217 376.089 485.629 cv
375.924 486.041 375.671 486.416 375.351 486.732 cv
375.04 487.048 374.661 487.299 374.253 487.47 cv
373.835 487.64 373.398 487.728 372.951 487.728 cv
372.504 487.728 372.067 487.64 371.649 487.47 cv
371.241 487.299 370.862 487.048 370.551 486.732 cv
370.231 486.416 369.978 486.041 369.813 485.629 cv
369.638 485.217 369.551 484.775 369.551 484.328 cv
369.551 483.881 369.638 483.439 369.813 483.027 cv
369.978 482.614 370.231 482.239 370.551 481.923 cv
370.862 481.607 371.241 481.357 371.649 481.186 cv
372.067 481.016 372.504 480.927 372.951 480.927 cv
373.398 480.927 373.835 481.016 374.253 481.186 cv
374.661 481.357 375.04 481.607 375.351 481.923 cv
375.671 482.239 375.924 482.614 376.089 483.027 cv
376.264 483.439 376.352 483.881 376.352 484.328 cv
cp
0 gry
@
369.551 500.844 mo
395.775 500.844 li
395.775 513.475 li
369.551 513.475 li
cp
1 gry
f
369.551 500.844 mo
395.775 500.844 li
395.775 513.475 li
369.551 513.475 li
cp
@
369.551 513.475 mo
393.817 513.475 li
393.817 526.105 li
369.551 526.105 li
cp
f
369.551 513.475 mo
393.816 513.475 li
393.816 526.105 li
369.551 526.105 li
cp
@
369.551 526.105 mo
432.057 526.105 li
432.057 538.736 li
369.551 538.736 li
cp
f
369.551 526.105 mo
432.057 526.105 li
432.057 538.735 li
369.551 538.735 li
cp
@
386.067 416.318 mo
386.067 416.765 385.98 417.202 385.805 417.62 cv
385.64 418.028 385.387 418.407 385.067 418.717 cv
384.756 419.038 384.377 419.291 383.969 419.456 cv
383.551 419.631 383.114 419.718 382.667 419.718 cv
382.22 419.718 381.783 419.631 381.365 419.456 cv
380.957 419.291 380.578 419.038 380.267 418.717 cv
379.946 418.407 379.694 418.028 379.529 417.62 cv
379.354 417.202 379.266 416.765 379.266 416.318 cv
379.266 415.871 379.354 415.434 379.529 415.016 cv
379.694 414.608 379.946 414.229 380.267 413.918 cv
380.578 413.597 380.957 413.345 381.365 413.18 cv
381.783 413.005 382.22 412.917 382.667 412.917 cv
383.114 412.917 383.551 413.005 383.969 413.18 cv
384.377 413.345 384.756 413.597 385.067 413.918 cv
385.387 414.229 385.64 414.608 385.805 415.016 cv
385.98 415.434 386.067 415.871 386.067 416.318 cv
cp
.74902 gry
f
386.067 416.318 mo
386.067 416.765 385.98 417.202 385.805 417.62 cv
385.64 418.028 385.387 418.407 385.067 418.717 cv
384.756 419.038 384.377 419.291 383.969 419.456 cv
383.551 419.631 383.114 419.718 382.667 419.718 cv
382.22 419.718 381.783 419.631 381.365 419.456 cv
380.957 419.291 380.578 419.038 380.267 418.717 cv
379.946 418.407 379.694 418.028 379.529 417.62 cv
379.354 417.202 379.266 416.765 379.266 416.318 cv
379.266 415.871 379.354 415.434 379.529 415.016 cv
379.694 414.608 379.946 414.229 380.267 413.918 cv
380.578 413.597 380.957 413.345 381.365 413.18 cv
381.783 413.005 382.22 412.917 382.667 412.917 cv
383.114 412.917 383.551 413.005 383.969 413.18 cv
384.377 413.345 384.756 413.597 385.067 413.918 cv
385.387 414.229 385.64 414.608 385.805 415.016 cv
385.98 415.434 386.067 415.871 386.067 416.318 cv
cp
0 gry
@
379.266 432.834 mo
427.514 432.834 li
427.514 445.465 li
379.266 445.465 li
cp
1 gry
f
379.266 432.834 mo
427.514 432.834 li
427.514 445.465 li
379.266 445.465 li
cp
@
379.266 445.465 mo
403.532 445.465 li
403.532 458.095 li
379.266 458.095 li
cp
f
379.266 445.465 mo
403.532 445.465 li
403.532 458.095 li
379.266 458.095 li
cp
@
379.266 458.095 mo
441.785 458.095 li
441.785 470.726 li
379.266 470.726 li
cp
f
379.266 458.095 mo
441.785 458.095 li
441.785 470.726 li
379.266 470.726 li
cp
@
414.573 348.308 mo
414.573 348.755 414.486 349.192 414.32 349.61 cv
414.146 350.018 413.893 350.397 413.582 350.708 cv
413.262 351.028 412.892 351.281 412.475 351.446 cv
412.066 351.621 411.62 351.708 411.173 351.708 cv
410.726 351.708 410.289 351.621 409.871 351.446 cv
409.463 351.281 409.084 351.028 408.773 350.708 cv
408.452 350.397 408.209 350.018 408.034 349.61 cv
407.86 349.192 407.772 348.755 407.772 348.308 cv
407.772 347.861 407.86 347.424 408.034 347.006 cv
408.209 346.598 408.452 346.219 408.773 345.908 cv
409.084 345.587 409.463 345.335 409.871 345.17 cv
410.289 344.995 410.726 344.907 411.173 344.907 cv
411.62 344.907 412.066 344.995 412.475 345.17 cv
412.892 345.335 413.262 345.587 413.582 345.908 cv
413.893 346.219 414.146 346.598 414.32 347.006 cv
414.486 347.424 414.573 347.861 414.573 348.308 cv
cp
.74902 gry
f
414.573 348.308 mo
414.573 348.755 414.486 349.192 414.32 349.61 cv
414.146 350.018 413.893 350.397 413.582 350.708 cv
413.261 351.028 412.892 351.281 412.475 351.446 cv
412.066 351.621 411.62 351.708 411.173 351.708 cv
410.726 351.708 410.288 351.621 409.871 351.446 cv
409.463 351.281 409.084 351.028 408.773 350.708 cv
408.452 350.397 408.209 350.018 408.034 349.61 cv
407.86 349.192 407.772 348.755 407.772 348.308 cv
407.772 347.861 407.86 347.424 408.034 347.006 cv
408.209 346.598 408.452 346.219 408.773 345.908 cv
409.084 345.587 409.463 345.335 409.871 345.17 cv
410.288 344.995 410.726 344.907 411.173 344.907 cv
411.62 344.907 412.066 344.995 412.475 345.17 cv
412.892 345.335 413.261 345.587 413.582 345.908 cv
413.893 346.219 414.146 346.598 414.32 347.006 cv
414.486 347.424 414.573 347.861 414.573 348.308 cv
cp
0 gry
@
407.772 364.825 mo
451.975 364.825 li
451.975 377.455 li
407.772 377.455 li
cp
1 gry
f
407.772 364.824 mo
451.975 364.824 li
451.975 377.455 li
407.772 377.455 li
cp
@
407.772 377.455 mo
440.456 377.455 li
440.456 390.085 li
407.772 390.085 li
cp
f
407.772 377.455 mo
440.456 377.455 li
440.456 390.085 li
407.772 390.085 li
cp
@
407.772 390.085 mo
414.573 390.085 li
414.573 402.716 li
407.772 402.716 li
cp
f
407.772 390.085 mo
414.573 390.085 li
414.573 402.716 li
407.772 402.716 li
cp
@
457.332 416.318 mo
457.332 416.765 457.245 417.202 457.07 417.62 cv
456.904 418.028 456.652 418.407 456.331 418.717 cv
456.02 419.038 455.641 419.291 455.233 419.456 cv
454.816 419.631 454.378 419.718 453.931 419.718 cv
453.485 419.718 453.038 419.631 452.63 419.456 cv
452.212 419.291 451.843 419.038 451.522 418.717 cv
451.211 418.407 450.958 418.028 450.784 417.62 cv
450.618 417.202 450.531 416.765 450.531 416.318 cv
450.531 415.871 450.618 415.434 450.784 415.016 cv
450.958 414.608 451.211 414.229 451.522 413.918 cv
451.843 413.597 452.212 413.345 452.63 413.18 cv
453.038 413.005 453.485 412.917 453.931 412.917 cv
454.378 412.917 454.816 413.005 455.233 413.18 cv
455.641 413.345 456.02 413.597 456.331 413.918 cv
456.652 414.229 456.904 414.608 457.07 415.016 cv
457.245 415.434 457.332 415.871 457.332 416.318 cv
cp
.74902 gry
f
457.332 416.318 mo
457.332 416.765 457.244 417.202 457.07 417.62 cv
456.904 418.028 456.652 418.407 456.331 418.717 cv
456.02 419.038 455.641 419.291 455.233 419.456 cv
454.816 419.631 454.378 419.718 453.931 419.718 cv
453.484 419.718 453.038 419.631 452.63 419.456 cv
452.212 419.291 451.843 419.038 451.522 418.717 cv
451.211 418.407 450.958 418.028 450.784 417.62 cv
450.618 417.202 450.531 416.765 450.531 416.318 cv
450.531 415.871 450.618 415.434 450.784 415.016 cv
450.958 414.608 451.211 414.229 451.522 413.918 cv
451.843 413.597 452.212 413.345 452.63 413.18 cv
453.038 413.005 453.484 412.917 453.931 412.917 cv
454.378 412.917 454.816 413.005 455.233 413.18 cv
455.641 413.345 456.02 413.597 456.331 413.918 cv
456.652 414.229 456.904 414.608 457.07 415.016 cv
457.244 415.434 457.332 415.871 457.332 416.318 cv
cp
0 gry
@
450.531 432.834 mo
493.603 432.834 li
493.603 445.465 li
450.531 445.465 li
cp
1 gry
f
450.531 432.834 mo
493.603 432.834 li
493.603 445.465 li
450.531 445.465 li
cp
@
450.531 445.465 mo
474.797 445.465 li
474.797 458.095 li
450.531 458.095 li
cp
f
450.531 445.465 mo
474.797 445.465 li
474.797 458.095 li
450.531 458.095 li
cp
@
450.531 458.095 mo
490.373 458.095 li
490.373 470.726 li
450.531 470.726 li
cp
f
450.531 458.095 mo
490.373 458.095 li
490.373 470.726 li
450.531 470.726 li
cp
@
.341176 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 Initial
ct_T42Dict begin
-0.664 -0.324 2.027 1.035
 256 array 0 1 255 {1 index exch /.notdef put} for  /TDJBAA+CBC+Arial~1203945399
Type42DictBegin
[<00010000000a000a000a000a637674209670d276000000ac000006306670
676d7727a9f5000006dc000005b0676c79660a5812bc000036fc00003a66
68656164ca39f68f00000c8c0000003668686561126d11aa00000cc40000
0024686d7478caa2734000000ce8000014a06c6f6361405a31d300002188
00000a526d61787009ce0c9300002bdc0000002070726570ebad71e20000
2bfc00000afd6764697200000000000000000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0046003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b404141403f3e3d3c3b3a39383735
34333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817
161514131211100f0e0d0c0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b09051582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
2323701020b802234520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558b00325b00325b8
ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043
b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959
212121212d2c462346608a8a462320468a608a61b8ff8062232010238ab9
02c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d000100000002d1ec7079823c5f0f3cf5081b080000000000a2e3272a
00000000b53db2c8faaffd67103a084c0000000900010000000000000001
0000073efe4e00431000faaffe33103a0001000000000000000000000000
0000052806000100000000000239000002390000023900b002d7005e0473
001504730049071d0077055600580187005a02aa007c02aa007c031d0040
04ac0072023900aa02aa0041023900ba0239000004730055047300df0473
003c047300560473001a047300550473004d047300610473005304730055
023900b9023900aa04ac007004ac007204ac00700473005a081f006f0556
fffd0556009605c7006605c7009e055600a204e300a80639006d05c700a4
023900bf04000037055600960473009606aa009805c7009c063900630556
009e0639005805c700a10556005c04e3003005c700a105560009078d0019
055600090556000604e300290239008b023900000239002703c100360473
ffe102aa00590473004a0473008604000050047300460473004b02390013
047300420473008701c7008801c7ffa20400008801c7008306aa00870473
008704730044047300870473004802aa00850400003f0239002404730083
0400001a05c700060400000f040000210400002802ac0039021400bc02ac
002f04ac00570556fffd0556fffd05c70068055600a205c7009c06390063
05c700a10473004a0473004a0473004a0473004a0473004a0473004a0400
00500473004b0473004b0473004b0473004b023900bd023900230239ffe5
023900090473008704730044047300440473004404730044047300440473
008304730083047300830473008304730049033300800473006b0473001b
0473005102cd006d044c000104e3009905e5000305e50003080000e102aa
00de02aa003d0464004e080000010639005305b4009a0464004e0464004d
0464004d0473fffd049c00a003f4003805b4007a069600a1046400000231
000002f6002f02ec002d0625007f071d004404e3008104e3009e02aa00e8
04ac0072046400540473002e0464003304e5001a047300860473008c0800
00ef0556fffd0556fffd0639006308000081078d00520473fffc08000000
02aa005302aa004701c7008001c7006c0464004e03f4002f040000210556
00060156fe390473ffe402aa005c02aa005c040000170400001704730049
023900b901c7006c02aa0047080000250556fffd055600a20556fffd0556
00a2055600a20239008d0239ffe002390004023900150639006306390063
0639006305c700a105c700a105c700a1023900c602aa001902aa000602aa
001d02aa002e02aa00e502aa00a202aa006b02aa003a02aa00b702aa0028
0473000001c700030556005c0400003f04e3002904000028021400bc05c7
fffd0473004905560006040000210556009e0473008704ac007204ac00a1
02aa006b02aa001902aa002106ac006b06ac006b06ac0021047300000639
006d04730042023900b10556005c0400003f05c700660400005005c70066
0400005004730046046bffe102aa01f10556fffd0473004a0556fffd0473
004a05c7009e04eb004705c7fffd055600a20473004b055600a20473004b
0473009601c7004204730096025500880473009a02ac008305c7009c0473
008705c7009c04730087063900630473004405c700a102aa008505c700a1
02aa003c0556005c0400003f04e300300239002404e300300300002305c7
00a10473008305c700a10473008304e300290400002804e3002904000028
046800a4063900600662005504a00048047400480391006204f000440329
002e05300048046bffe1040000b002eb005208c000330800004f04000099
0800004f040000990800004f040000980400009807d5016a05c0009e04ab
007204d5009d04ac007104d5022204d5010505abffe9050001c905ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005505e100bf038d008904d5
ffd90180008002d50086071500610296000f04d5009202d6008302d60083
04d500b202d600700556fffd0473004a05c700660400005005c700660400
0050055600a20473004b055600a20473004b055600a20473004b0639006d
047300420639006d047300420639006d0473004205c700a40473008705c7
001f047300060239ffce0239ffce0239ffe40239ffe40239fff60239fff5
023900a301c700660400003701c7ffa20556009604000088040000860473
009601c7fffa05c7009c0473008705c900a50473008b0639006304730044
063900630473004405c700a102aa006b0556005c0400003f04e300300239
000c05c700a10473008305c700a10473008305c700a10473008305c700a1
04730083078d001905c70006055600060400002101c700890556fffd0473
004a08000001071d00440639005304e30081023900b9078d001905c70006
078d001905c70006078d001905c70006055600060400002101c7008a02aa
ffe10473001b04cd005a06ac006b06ac002206ac002206ac004a02aa00e2
02aa006b02aa00de02aaffea0557ffff0646ffa706b4ffa80312ffa80632
ffa706d8ffa70605ffa701c7ff780556fffd055600960558fffe055600a2
04e3002905c700a4023900bf055600960558000b06aa009805c7009c0533
006d0639006305c700a40556009e04f2009404e300300556000605560009
06af007f05fb0061023900040556000604a00048039100620473008b01c7
006b04600088049a008c04000019038700480473008b0473005c01c70089
0400008604000018049c00a00400001a0395005c04730044048d008303db
0056046000880433001105b4007a063f005701c7ffc90460008804730048
04600088063f0057055700a206eb0032045500a105c000640556005c0239
00bf02390004040000370875000d081500a406d5003104a900a10515000a
05c000a00556fffd054000a705560096045500a1056b0000055600a20763
000704d5004e05c000a105c000a104a900a10540001206aa009805c700a4
0639006305c000a00556009e05c7006604e300300515000a061500520556
000905eb009f05550057075500a1078000a106550000071500a8054000a5
05c00055081500a405c7001a0473004a0495005b0440008802eb008804ab
00000473004b055afffb03ab003204780087047800870380008604ab0018
0580008c046b00880473004404550088047300870400005003aa00260400
00210695004b0400000f0495008a042b0045066b008d0695008d05000028
05c0008b042b008404150030060000890455001f0473004b0473000002eb
00890415004b0400003f01c700880239000901c7ffa20740001306800083
047300000380008604000021046b008803e900a1034a0088080000410895
00a00585002d02aa010102aa001e02aa003102aa003102aa010102aa007e
02aa007e02aa008c02aa008c02aa010102aa001002aa010102aa01210310
007d02aa008c023300d202aa030b02aaff04023900b90481006904560032
033100190411002d04d1009601f9009b030f005f04ca009b04b8008c01f9
009b0413002803b0005003b4003c04ca009b04cf005001f9009b02d2003c
0498005a043c00190488006e045f007303b1001903d4000a046600960413
0028058e00640524002803f2009b03f2009b03f2009b01e3005a0356005a
0686009b01f9ffac041300280413002803b4ff5703b4ff570448002d058e
0064058e0064058e0064058e006404810069048100690481006904560032
033100190411002d04d10096024b0000034a000004b8008c024b00000413
002803b0005003b4003c04cf005002d2003c0498005a0488006e045f0073
03d4000a0466009604130028058e00640524002801f9009b0456003203b0
0050045f0073049b003c0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da0043034d007901a80000019c004601e50046019c0046019c
004601ad0048019c004601b10046015100460435017c0435012e043500b7
043500810435012c043500be043500af043500810435009a043500db0435
0085028d00c1043500b3060001000600010002420036060001000435009e
04350098043500cb060001000600010006000100060001000600010001b1
004606000100060001000600010006000100060001000600010006000100
06000100051b000006000100060001000600010005b5008005b5008001f4
fffd01f4fffd060001000600010006000100060001000481003604350036
043d0000043d000003e9009003e90090067f005a0776005a03270000041e
0000067f005a0776005a03270000041e0000051b003204b5006a06000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
01cf003001b1004601b1004601b1004001b1004606000100060001000000
ffdc0000fe510000ff160000ff160000ff160000ff160000ff160000ff16
0000ff160000ff160000ff160000ffdc0000ff160000ffdc0000ff200000
ffdc0473004a080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028d007f028d005d0600010004ee0015034d007901a8000e01d60022
01a8005601d60056037500780375007801a8002d01d60059051b003204b5
006a01f4000001f4000001a8009301d6005905b5008005b5008001f40000
01f40000024200000300003d05b5008005b5008001f4000001f4000005b5
008005b5008001f4000001f400000481003604350036043d0000043d0000
0481003604350036043d0000043d00000481003604350036043d0000043d
000002b300a502b300a502b300a502b300a503e9009003e9009003e90090
03e900900692008406920084043f0000043f00000692008406920084043f
0000043f000008c9008408c9008406c5000006c5000008c9008408c90084
06c5000006c5000004a7000004a7000004a7000004a7000004a7000004a7
000004a7000004a70000045a002a039a00360435000003270000045a002a
039a00360435000003270000064f006d064f006d02240000021a000004a7
008c04a7008c02240000021a000004cf007304cf00730327000003270000
040d008d040d008d01a8000001a8000002b4006902b40069032700000327
00000435008b0435008b01f4000001f40000024200360300003d039a0000
032700000375007803750078051b003204b5006a051b003204b5006a01f4
000001f40000045a004004ce0040045a002604ce0030045a005304ce0041
045a005304ce00410600010006000100019c0046019c0046060001000600
0100060001000151004601b10046060001000600010001ad004801e50046
06000100060001000600010001b1004601b1004601b1004601b1004601b1
004001cf003006000100019c0046019c0046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010001000000080000001000000006dc0063053f
004406d500a1055b00830000fddc0000fc2f0000fca60000fe540000fcd7
0000fd730000fe290000fe0d0000fd110000fc670000fd9d0000fbf50000
fc720000fed50000fed50000ff02041b00a006ac006b06ac00190000feb6
0000fd730000fe080000fca60000fe530000fd110000fbc80000faf40000
faaf0000fc720000fbaa0000fb6a0000fcf10000fc7d0000fbdd0000fcc1
0000fb980000fdea0000fe840000fdc20000fcf10000fd5f0000fe760000
febc0000fceb0000fd6c0000fd580000fc900000fd150000fc2c0000fc13
0000fc120000fb960000fb9601c700880556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a055600a20473004b
055600a20473004b055600a20473004b055600a20473004b055600a20473
004b055600a20473004b055600a20473004b055600a20473004b02390063
01c7001f023900ba01c7007c063900630473004406390063047300440639
006304730044063900630473004406390063047300440639006304730044
063900630473004406dc0063053f004406dc0063053f004406dc0063053f
004406dc0063053f004406dc0063053f004405c700a10473008305c700a1
0473008306d500a1055b008306d500a1055b008306d500a1055b008306d5
00a1055b008306d500a1055b008305560006040000210556000604000021
05560006040000210556fffd0473004a0239ffe201c7ffb0063900630473
004405c700a10473008305c700a10473008305c700a10473008305c700a1
0473008305c700a1047300830000fefe0000fefe0000fefe0000fefe0455
fffd02eb000c07630007055afffb04a900a10380008604a900a103800086
05c700a4046b00880473fffd040000140473fffd04000014055600090400
000f05550057042b0045055500a1042b0088060500630473005506390060
04730044000000000000000000000000000000d100d100d100d100d100d1
00d100d100d100d100f40112011201a001f002950295032c032c03c903c9
04820524052405240524052405240524052405d405d4066306d7071c071c
071c071c071c07620762078a086808f3096809be09be0a9c0b660ba00ba0
0ba00ba00ba00ba00ba00ba00ba00ba00ba00ba00ba00c820d1d0db00e4a
0eef0f6c1024109e10f0115e125f12b1134813d2145e14f6158515e5171b
1781180718d018d019b01aa41b841b841b841b841b841b841b841b841b84
1b841b841b841b841b841b841b841b841b841b841b841b841b841b841ba6
1ba61ba61ba61ba61ba61ba61ba61ba61ba61ba61ba61ba61ba61ba61ba6
1ba61ba61ba61ba61ba61ba61ba61ba61ba61be71be71be71be71be71be7
1be71be71be71be71be71be71be71be71be71be71be71be71be71be71be7
1be71be71be71be71be71be71be71be71be71be71be71be71be71be71be7
1be71be71be71be71be71be71be71be71be71be71be71be71be71be71be7
1be71be71be71be71be71be71be71be71be71be71be71be71be71be71be7
1be71be71be71be71be71be71c061c061c061c061c061c061c061c061c06
1c061c3c1c3c1c3c1c3c1c561c561c701c701c701c701c701c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d1c8d
1c8d1c8d1ca81ca81ca81ca81ca81ca81d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d331d331d331d331d331d331d331d331d331d331d331d331d33
1d331d331d3300000001000005280100003f0063000500020010002f0042
0000040c0afd000300024123000f031700ef031700ff03170003001f0317
002f0317004f0317005f0317008f0317009f03170006000f0317005f0317
006f0317007f031700bf031700f00317000600400317b2923340b80317b2
8b3340b80317b36a6c3240b80317b2613340b80317b35c5d3240b80317b3
57593240b80317b34d513240b80317b344493240b80317b23a3340b80317
b331343240b80317b32e423240b80317b3272c3240b80317b312253280b8
0317b30a0d32c04116031600d00316000200700316000102c4000f010100
1f00a0031500b0031500020306000f0101001f00400312b32426329fbf03
040001030203010064001fffc00301b20d1132410a02ff02ef0012001f02
ee02ed0064001fffc002edb30e11329f414a02e200af02e200bf02e20003
02e202e202e102e1007f02e00001000f02e0003f02e0009f02e000bf02e0
00cf02e000ef02e0000602e002e002df02df02de02de000f02dd002f02dd
003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc
0001000002dc0001001002dc003f02dc000202dc02dc001002db000102db
02db000f02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9
ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2
f9291fb802e3b3202b1fa0413002d400b002d40002000002d4001002d400
2002d4005002d4006002d4007002d40006006002d6007002d6008002d600
9002d600a002d600b002d60006000002d6001002d6002002ca002002cc00
2002d6003002d6004002d6005002d6000802d0b2202b1fb802cfb226421f
411602ce02c70017001f02cd02c80017001f02cc02c60017001f02cb02c5
0017001f02c902c5001e001f02ca02c6b21e1f00410b02c6000002c70010
02c6001002c7002f02c5000502c1b324121fff411102bf0001001f02bf00
2f02bf003f02bf004f02bf005f02bf008f02bf000602bf0222b2641f1241
0b02bb00ca0800001f02b200e90800001f02a600a20800406a1f40264349
32402043493240263a3d3240203a3d329f209f2602402696993240209699
3240268e923240208e92324026848c324020848c3240267a813240207a81
3240266c763240206c76324026646a324020646a3240265a5f3240205a5f
3240264f543240204f5432b8029eb724271f374f6b0120410f0277003002
770040027700500277000402770277027700f90400001f029bb22a2a1fb8
029a402b292a1f80ba0180bc0180520180a201806501807e01808101803c
01805e01802b01801c01801e0180400180bb0138000100800140b4018040
0180bb013800010080013940180180ca0180ad0180730180260180250180
24018020013740b80221b2493340b80221b2453340b80221b341423240b8
0221b33d3e320f410f0221003f0221007f0221000300bf022100cf022100
ff0221000300400221b320223240b80221b3191e3240b80222b32a3f3240
b80221b32e3a326f414802c3007f02c3008f02c300df02c30004002f02c3
006002c300cf02c30003000f02c3003f02c3005f02c300c002c300ef02c3
00ff02c3000600df02220001008f02220001000f0222002f0222003f0222
005f0222007f022200ef0222000600bf022100ef02210002006f0221007f
022100af02210003002f0221003f0221004f0221000302c302c302220222
02210221401d101c102b1048038f1c010f1e014f1eff1e02370016160000
0012110811b8010db6f70df8f70d00094109028e028f001d001f0290028f
001d001f028fb2f91d1fb80198b226bb1f41150197001e0401001f013900
260125001f013800730401001f0135001c0801001f0134001c02ab001f01
32b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201
b61fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b2
1fbc26b80101b21fba20b80201b61fb91c381fadcab80401b21f8126b801
9ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73
b80401400f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c
26b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291c
b80101b21f231eb80401b21f5537b80168402c07960758074f0736073207
2c0721071f071d071b071408120810080e080c080a080808060804080208
000814b8ffe0402b00000100140610000001000604000001000410000001
001002000001000200000001000002010802004a00b013034b024b534201
4bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b5442b0
382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b80100
5458b801ffb101018e851bb0124358b900010111858d1bb900010128858d
5959001816763f183f123e113946443e113946443e113946443e11394644
3e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b
2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353
205c58b901f201f04544b901f101f045445958b9033e01f2455258b901f2
033e4459594bb8015653205c58b9002001f14544b9002601f145445958b9
081e0020455258b90020081e4459594bb8019a53205c58b9002501f24544
b9002401f245445958b909090025455258b9002509094459594bb8040153
205c58b173244544b1242445445958b917200073455258b9007317204459
594bb8040153205c58b1ca254544b1252545445958b9168000ca455258b9
00ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a00
1c455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c454459
58b90189001c455258b9001c01894459594bb8030153205c58b11c1c4544
b11c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b65422b2b01b33b59635c456523456023456560234560b08b7668
18b080622020b163594565234520b003266062636820b003266165b05923
6544b063234420b13b5c4565234520b003266062636820b003266165b05c
236544b03b2344b1005c455458b15c406544b23b403b4523614459b34750
3437456523456023456560234560b089766818b080622020b13450456523
4520b003266062636820b003266165b050236544b034234420b147374565
234520b003266062636820b003266165b037236544b0472344b100374554
58b137406544b24740474523614459004b5342014b5058b108004259435c
58b108004259b3020b0a124358601b2159421610703eb0124358b93b2118
7e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba
04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a804
00000b2b59b0102342b0112342002b747573750018456944456944456944
7373737374757374752b2b2b2b74752b2b2b2b2b73737373737373737373
7373737373737373737373737373732b2b2b45b0406144737400004bb02a
534bb03f515a58b1070745b040604459004bb03a534bb03f515a58b10b0b
45b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004bb0
2e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e01740073
5903b01e4b5402b0124b545ab012435c5a58ba009f02220001007359002b
7473012b01732b2b2b2b2b2b2b2b737373732b002b2b2b2b2b2b00456944
734569447345694473747545694473456944456944456944737445694445
6944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b
73747500000000>
[14951 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 488 17 <000100ba0000018700cd000300254018023c000a023c5f006f007f00af00
04a0000100a004a198182b10f65d5ded003fed313033353315bacdcdcd00
>TDJBAA+CBC+Arial~1203945399 AddT42Char 

1 0 0 <> TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/period 17 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 46 /period put
pop
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399 /TDJBAA+CBC+Arial~1203945399 findfont ct_VMDictPut
/JGHSNU+CBC+Arial~1203945399*1 
[46{/.notdef}rp /period 209{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
223.154 183.976 mo
(.)sh
232.87 251.986 mo
(.)sh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 418 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 548 19 <00020055ffe7041105c00010001d00b5b4062019101cb8fff0b202200bbe
ffe00016ffe00012ffe0000fffe0406204068702880b880fc90e0509070b
180245134c154a19431b54135c155c19521b6b076b0b63136c156b19601b
79027706760b7a0f870698079610c918da02d606d60bdb0f1a1a1e040514
1e0d0d17730940212334300901000910090209901f117300b8ffc0400e21
2334200040000200901ec78b182b10f65d2bed10f65d712bed003fed3fed
3130015d71005d0038383838380138383813101236333216161215100206
2322272613101633323611102623220706556bd3a076b274426ad3a1d479
91b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b7
019dfe97eff00168016aee698600>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 832 20 <000100df000002fb05c0000a0073402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0401221233430000120
0001001a0c05400d0f3405b8ffc0400e212334300501200540050205190b
ba013c018500182b4e10e45d712b2b10f65d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 1322 23 <0002001a0000041005ba000a000d00f4403612580c680c9a0ca90cc90c05
4c034c0d94040312010208000c060307050a0b0307000c0c0d0dca030414
030304030d00020c0d040703bb02bb0008000201a0400a000404000c0c00
ca0a04b80266b705050a401d1f340ab80137400d07402223340780213507
900f02b8ffc0400d0d14340002100220020302b50eb8018cb18b182b10ec
5d2b10f62b2bf42b3c10e610fd3c003f3f10f43cf63c1139390111123939
872e2b047d10c40f0f0f313001435c58b9000dffdeb212390db8ffd4400b
333903222d3903041d1d3c2b2b2b2b595d005d435c5840140c400b390c80
50390c4026390c221c390c402d392b2b2b2b2b5921112135013311331523
110311010296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295
fd6b>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 1624 25 <0002004dffe7041505c0001d002a00b240276b190144074015441944205a
1254206b03640764086a1264207408751c8508861cd608d4161107b8ffe0
b42720232021b8ffe04011281e400d500d020d0d141b01d35f000100b802
684009051e1b05221e140d01b80138401500b52573104021233430100100
1010100210902c0aba0138001e0139400a3f175f176f177f170417b80224
b32bc78b182b10f65deded10f65d712bedf4ed003fed3fedfd5de4111239
2f5ded31300138383838015d005d01072627262322070606073636333212
15140606232200111037363332160114161633323635342623220603fbb3
182c496b564155620241bc67b4fd77d084e1fee49d89e8adddfd374f8e4e
72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed7e014b017c01a9
c1a8c2fcdd5daa59b89e98afaf00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 2308 28 <00020055ffe7041905c0001e002a00be40343a1a4c1640235b1657236603
6c166d1a67237a1a7d1e8c1a8b1e9a16a91abc1aea16e620f620133d169e
16ad16033a2964060227baffe00023ffe0401821200620281e4f0e5f0e02
0e0e1c221e140501d350000100b80268b4041e1c0d1fba0139000b013840
111840212334301801001810180218902c01b80138b400b5257311b8ffc0
400e212334201140110211902bc78b182b10f65d2bedf4ed10f65d712bed
ed003fedfd5de43fed12392f5ded31300138383838005d71015d13371616
333236363635342706062322023534003332161211100206232226013426
23220615141633323670ad167c61537d50360136bb6db6fc0107c68fed7b
7af1a2acda02cba57478b2a97c7da10153107a6e4c7fd8700c18566b0108
d8df01109afee3fef2fee7feb3aebf03349bb6c49c8cafaf>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 5836 55 <00010030000004ba05ba0007004f400d05021e04030200080706050409b8
0273b320040104b80101b7062001022f030103b80101b5010120000100b8
0273b308b699182b10f65d3c10f45d3c10fde45de6103c103c003f3f3cfd
3c313021112135211521110213fe1d048afe1b050dadadfaf300>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 5952 68 <0002004affe8041c043e00280037011d408e090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
15a619aa28b619bb28c419cf28d215dd28084416011f171f182b2c2a3439
04392c4904482c5608592b6608692b760c870cc90cf90df92b1137340e01
04102f243417322114185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0e
af0eef0e030e0e1c0317b802aa40161895141c1c070045270a321c030b29
61106100252124b8025b401027400026102620263026af2605263139b8ff
c0401f1e23343039c03902a0390139172518222f24bf06cf06021f063f06
0206313810f65d71edf4ed105d712bf65dedf43cfde5e5003fed3fe43fed
fde41112392f5d71ed711112391112393901111217393130005d01715d00
712506062322263534363637363736373635342726232206072736363633
321616171615151416172326030607060606151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 8264 75 <00010087000003e805ba001400b1b90016ffc0400d151734250435034503
ba0d0403b8ffe040241719341708110c1114030501000f1c0507140b0a0c
250940333634ff0901c00901094e16b8ffc04017343634b016f016027016
a016b016ff1604160214250100b8ffc04015333634f0000100002000d000
e00004004e154750182b10f65d712b3cfd3c105d712bf45d712bed003f3c
3fed3f1139113901123931304379400e060e07250e060c1b010d080f1b01
002b012b2b81002b5d012b33113311363332161615112311342623220606
151187b47ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b53
8e7dfdbb>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 8508 76 <000200880000013c05ba00030007007d405d4f099009a009b009c009df09
f0090700091f09700980099f09b009c009df09e009ff090a1f0901000107
0402030906037e0100060506040a0607250500049f04a004b004c004e004
06c004f0040200042004d004e00404044e084750182b10f65d71723cfd3c
003f3f3c3fed0111123939111239393130015d7271133533150311331188
b4b4b404ebcfcffb150426fbda00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 8672 77 <0002ffa2fe51013a05ba000300120099404d040525053b04330586050517
0805050704040204051300010d0b0203140c0411050b07037e01000b0607
1c110f9014011417171a0c0c0d250a0a900b011f0b3f0b4f0b030b191314
ad214750182b2b4ef45d713c4d10fd3c4e10456544e671003f4ded3f3fed
11123912390111123939111239391133338710083c31304379400e08100f
2608100a1b01090e071b00002b012b2b81015d1335331501371633323635
113311140706232286b4fe6822361f3736b43341974904e9d1d1f97b990e
4992045cfba0c44d6400>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 8892 78 <00010088000003f805ba000b01cc401a070656065a09030f0df305f60603
5503770a0212062013213408b8fff0b312273409b8fff0b41227341205b8
fff0b312213409b8fff04084122734060404050406370947040525062d0a
580a7703750ada03e30607a60601230626072508390638093f0d4f0d5904
5906580759097d0479059909c606d204d606e406e907f706f90815120a0a
05030304020606070909080a0a050908082507061407070603040425050a
1405050a0a09060304080102000405060708080b0b000a04b8010fb20522
08b8010f402320073f0702071a900d010d0b2500022501019000013f004f
000200190c0de1214766182b2b4ef45d713c4d10ed10ed4e1071f65d4ded
f4ed003f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e
7d10c40710083c083c0310083c083c313001435c58400a092c1d3909081d
1d3c06b8ffdeb21d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d
00715d0171002b2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffde
b2103906b8ffdeb2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b
59012b2b2b435c584012dd040108141639090814143c090814143c06b8ff
f6b2183906b8ffecb11b392b2b2b2b2b015d59005d015d71331133110133
01012301071188b401aae9fe6a01bfdefea17f05bafcbc01b0fe76fd6402
1f7afe5b>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 9570 80 <0001008700000626043e002300c6b90009ffd840410b0d342504e404e409
e117e52005d505f620021708202309181b20090303231e1c06151c0b0b06
070106231a19100ad025019025a025022517171a0e2590110111b8015db5
1825901b011bb8015d4019000233232501d000019000a000021f003f004f
000300192425b80178b3214750182b2b4ef45d71723c4dfde410f45dedf4
5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed1117390111123912
3931304379400e0c141326140c111b01120d151b01002b012b2b81015d00
5d2b33113315363633321617363332161511231134262623220615112311
342623220606151187a132a66a76971f7eca9eaab3235c3e7094b458644c
813a0426954e5f6258baafb6fd27029d6c5f3a95a4fd9702b27878509a91
fdd9>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 10148 82 <00020044ffe80427043e000d001900c1405d12070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b142407b8ffc0401324253430
0701000710072007030731df1b011bb8ffc040191e2334301b011b0e2400
402425341f003f000200311a3437182b10f65d2bed10712b5df65d5d2bed
003fed3fed313001715d0071435c584009530553096205620904015d5913
1037363332001514060623220013141633323635342623220644a489c5db
01167beb8bdffeedb9b28786b2b38587b2021301278e76fee1fdcdeb8201
1e010dcccbccd1c5cbca>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 10428 83 <00020087fe690421043e0012001e00cf40a50c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a040a7401
1333023312250000c001019001a001b001f001041f013f014f010301191f
473718012b4e10f45d71723c4d10fdf4e410fd5d71ed003f3fed3f3fed11
3912393130005d015d717200711311331536363332161615140206232226
271103141633323635342623220687a43a926888d06a75df7b5a8f2e11a6
7678aba77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cb
d5cbcad7>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 11018 85 <00010085000002c6043e00110083403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04015333634f0000100002000
d000e00004004e1247c4182b10f65d712b3cfde4105df472e4003f3f3fed
11393911393901111239390010c9870e7dc43130005d72015d3311331536
3633321707262322060706151185a23e693f5b5e3e42423b5e141e0426a1
71483aa727473f6072fdd400>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 11210 86 <0001003fffe803b1043e003001d9407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c526161db8ffde40121e395a082725
0c0a041a202615040b2e1d1ab802aa401c1f193f194f195f19af19cf1906
0f191f196f19df19041f198f190219bb02550015000002aa401010014001
021001d00102000110010201b8ffc0b314163401b8ffc0401e0e11340101
2e5c1d6c1d021d1c1507041c2e0b1f1a011a24194013183419b8025bb207
242ab8ffc0b71c39d02a012a1a32b8ffc04026272a346032c032023f3280
32023210010101240020240f22df00013f004f00020019313437182b4e10
f45d714df4ed10ed724e105d712bf6712b4dedf42bed72003fed3fed7112
392f2b2b5d7172e410fd5d7172e411123911123901111217393130437940
40272d1e2305142c261110121013100306220d201b000928071b01052d07
1b011e14201b00210e231b0022230d0c08290a1b012827090a062b041b00
1f101d1b01002b2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b
5d71015d72715d1337161633323635342726272626263534363736363332
16161707262623220615141716171617161616151406062322263fb20f89
7b7c78352593c6994f41382a91537dbd5a11b00c73697c6a16162f1b84bf
975669c67dcfd9013d1c6b7265443d2318253249814e4779281f2b487b67
18525c5237231c1d130a2433417c5c5a9f57ac00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 11830 87 <00010024fff2022a059900170080b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607ba026a00180136b166182b10f65d71f4e410ed3cfd3c10e4f43c
003fed3f3cfd3c1139123911333310c93130015d2b2b2517062322262635
1123353311371133152311141616333202101a4c3c626c2c8484b3b5b513
2b281ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 12302 89 <0001001a000003e80426000a015eb7350501002211390ab8ffde400d1139
0916121c340816121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd8
40091e213400281e21340ab8ffe8400922253400162225340ab8ffda40b5
282e340020282e340f0c29002809260a3900350a4800470a560156025908
5809660166026908690978007701770279087809770a8701870286038907
88088a099d009809910aac00a20abd00b707b10ac900c50ada00d50aec00
e30afb00f40a2c0a00050a1800160a2800260a370a4f00400a0905401216
3405400b0d340a07080825090a1409090a0003020225010014010100050a
0a000a09080802020106070a09030001052f0c010c220840404009800902
09b8011bb5400580050205b8011b400920024001220bead2182b10f6ed1a
19fd5dfd5d1a18ede45d11123939123939003f3c103c103c3f3c11398705
2e2b877dc4872e182b877dc43130002b2b01715d2b2b2b2b2b2b2b2b2b2b
2b2b005d210133131617363713330101aefe6cbee4251f182becb9fe6e04
26fd84676f54760288fbda00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 12704 91 <0001000f000003f1042600100177b70f12010f22193906b8ffde40b61939
5a0f96049608990e9a0fc005c006c007cb0f090f4016391a031309150d1a
1035013a0b81018e0b082f1257045907590b580e9701980a980bb702b80c
c80bca0ecc10da03d509d10ddb10e50a1212060603070809090106060905
0403030b0f0f100e0d0d010f0f0d100b010009020d0b030c100a060f020f
0a10c600c60902102500091400000903020dc60d010d250c03140c0c030a
090903030206100d0d0c0c000a4f120112490d7e0c220a0f6106097e400a
b8011bb74006500680060306b80243400e20037e02224f00010049117cc4
182b10f65df4ed1a19fd5dfd1a18ed10e510f4ede65d003f3c103c103c3f
3c103c103c87052e2b5d877dc4872e182b5d7d10c400111239390f0f8708
c4870e10c408c4870e10c4c408c4070e103c3c083c313001435c58b40e18
1d390bb8ffde400b1d390c221739032217390bb8ffdeb2213910b8ffc040
0a15390122213909401c392b2b2b2b2b2b2b2b595d71002b5d2b2b015d33
010133171617363737330101230327010f0184fe99e1a32e1c2c25b3d7fe
91018bddda3afee9022801fef947304233fbfe0cfdce014a59fe5d00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 13152 92 <00010021fe5103ee0426001a0187b30f1c010fb8ffde40a41c392814560f
af0a03400d400f020f202830341020283034070c0912160d1812270b270c
270d360c360d350e99110b28122813481659125913591569126913691579
06760d79117a147a15850d8a118c128c138914980aa80bbc10bb11ba14ea
0ae714f50dfd10f914ff1c1e120f0f0c101112120a00031914131325120a
1412120a0f0c0f110c250b0a140b0b0a1312120c0c0b06031c190f001c10
1c022f1cbf1c021cb8023fb50f1340124014b80254400b3f124012025f12
bf120212b80142b60f012200451b0ab8025440120f200b4040200c300c4f
0c03500cff0c020cb80142b32f0f010fb8023fb41b207c66182b1a1910fd
71f45d711a18ed1a1910ed1810f4e41910e45d71ed1a1810ed1910e45d71
00183fed3f3c103c103c87052e2b087d10c487052e182b0e7d10c4001112
39870e103c3c08c44bb00e534bb018515a58bb000cffe8000bffe8013838
59313001435c58b90014ffdeb637390a2237390eb8ffe8b5153911221539
2b2b2b2b595d712b2b00715d2b015d132716333236373637363701331316
1736371333010607060623227f143b2c3c48171126050bfe6dc2dd2b221f
2be3b4fe6c4124307c5634fe67a91028241b6b0f1d0428fd9975817c7602
6bfbc8af42595300>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/hyphen 16 def
/zero 19 def
/one 20 def
/four 23 def
/six 25 def
/nine 28 def
/T 55 def
/a 68 def
/h 75 def
/i 76 def
/j 77 def
/k 78 def
/m 80 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/v 89 def
/x 91 def
/y 92 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 52 /four put
dup 54 /six put
dup 57 /nine put
dup 84 /T put
dup 97 /a put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 120 /x put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[45{/.notdef}rp /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 
/.notdef /six 2{/.notdef}rp /nine 26{/.notdef}rp /T 12{/.notdef}rp /a 
6{/.notdef}rp /h /i /j /k /.notdef /m /.notdef 
/o /p /.notdef /r /s /t /.notdef /v 
/.notdef /x /y 134{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
101.397 35.3262 mo
(T-jihomoravsky49640.txt-001-p1s4)
[7.1119 3.88231 2.58826 2.58826 6.48231 6.48232 9.71172 6.48232 3.88231 6.48232 5.82942 5.82942 
5.82942 5.82941 6.48232 6.48232 6.48232 6.48232 6.48232 3.2294 3.22942 5.82942 3.22942 3.88231 
6.48232 6.48232 6.48232 3.88229 6.4823 6.48233 5.82941 0 ]xsh
.14902 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
101.397 47.9566 mo
(root)
[3.88231 6.48232 6.48231 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 0 6 <00020015ffe7045905d3001b001f01314087281d381d020904091d02570f
b713b71cc713c71cf81d0601021500090403140009050611000908071000
090b07101b0a0c0710180d0f0710170e120611170e130314170e16021517
0e190215180d1a02151b0a1c03141b0a1d0314180d1e0611180d1f06111b
0a0a1b1b250009140000090d181825170e1417170e150225140303001007
251106b801b640380e0e0d0d0a0a09001b18181717000a15141411103e0e
07060603023e0018940d17940d250e4011394f0e9f0e020e75210a941b09
941b2500b8ffc0b5113920000100b802a1b320a968182b10f65d2bede410
e410f65d2bede410e410f43c3c103c10f43c3c103c003f3c103c103c3f3c
103c103c10fd3cfd3c11392f3cfd3c87052e2b7d10c4872e182b7d10c40f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f3130015d5d71171323353313213521
13330321133303331523032115210323132103132113216757a9c74afeef
012f579657013b579757adcb4b0116fecc579656fec65775013a4bfec519
01aa95016b9501adfe5301adfe5395fe9595fe5601aafe56023f016b>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 4816 51 <0002009e000004fd05ba000d00180057403565116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226081a201a01201a011a180d
2001200001005d193b5c182b10f65d3cfd3c4e10715df64ded003f3f3cfd
3c12392f3cfd3c3130015d005d3311213217161616151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 7316 72 <0002004bffe8041e043e0015001d00de40641f001c150255035d055d0955
0b65036b056f09650b081000100110022712d905fa14f61a0731123a1931
1c41124d1a411c51125c19521c61126d1a611c78067815f602f618100016
010f0d171750166016701603161c0f9010a010021010041b1c0a0700b802
aa40090195131c040b17400db8ffc04009272a34b00d010d1a1fb8ffc0b3
2526341fb8ffc0401d1e2334301f011f163310240740242a341f073f074f
070307191e3437182b4e10f45d2b4dfde44e10712b2bf6712b4ded003fed
fde43fed12392f5d3cfd713c011112393912393130015d005d0171720117
06062322001110003332001114072116163332360121262726232206035e
ba2ceeb9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897c
a9015617a3b4011f0103010c0128fedefef91020afba680195864368a600
>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 9872 81 <00010087000003e6043e001600cc40130503061302a810b810e303e713f0
03f6130604b8fff040310b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e240b40333634ff0b01ff0b010b4e18b8
ffc0401a343634b018f018027018a018b018c01804180302331516250100
b8ffc04012333634f0000100002000d000e00004004e1710f65d712b3cfd
3cf43c105d712bf65d712bed3c103c003f3c3f3fed113901123931304379
40160611090a080a070a0306102611060e1b010f0a121b01002b012b2b2a
81015d71002b5d7133113315363332161617161511231134262623220615
1187a275dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e
6d4192ccfdbc>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/numbersign 6 def
/P 51 def
/e 72 def
/n 81 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 35 /numbersign put
dup 80 /P put
dup 101 /e put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[35{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef /zero /one 
2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 22{/.notdef}rp /P 
3{/.notdef}rp /T 12{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h 
/i /j /k /.notdef /m /n /o /p 
/.notdef /r /s /t /.notdef /v /.notdef /x 
/y 134{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
111.113 171.346 mo
(#PersPron)
[6.48232 7.76479 6.48231 3.88231 5.82942 7.76479 3.88231 6.48232 0 ]xsh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 2632 36 <0002fffd0000055905ba0007000e011e40632f1030106708680960108803
9010c905c606c010f0100b0805590156025010680bb010f30cf30df30e09
040c040d040e030b0a090504040c0d0e080607070c09050408060c070100
0020070c1407070c02030320040c1404040c091e0505081e060306b80270
400900080ce94002010202ba010b0001010b40120c2000650703525004cf
04df040390040104b80101400b500cc007df0c03900c010cb8010140100f
07cf07027f0780070207930fd6d7182b10f45d7119f45d71f45d7118ed10
ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b7d10c4872e18
2b7d10c401111239391139398710c4c40ec4c4870510c4c40ec4c4313001
4bb00b534bb01e515a58b4040f030807bafff00000fff838383838590172
715d230133012303210313210326270607030233d10258ddabfd9ba1d901
f19946221c3305bafa4601bcfe44025a0196b9778d8b>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 2984 38 <00010066ffe7057605d3001d00b8406063026a1d022000320d6300700074
1d8000841d90009a05ab03a50db903b40dc70dd000e41df31d110e121d11
1d1d032a0628112a1c201f470d56145715561968056b1d7b128b129a0399
0e9a1ca801a402a811d50e130014001a1014101a0402b8ffdeb2283901b8
ffc040272839100f0001041b131e0c031b1e040910260f4a002620010101
1a1f172620080108191e635c182b4e10f45d4ded4e10f65d4dedf4ed003f
ed3fed1117393130012b2b5d5d71005d0172011706042322240235341224
33320417072626232206021514121633323604b4c23dfec3e5edfed79baf
0143c2dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e501
55b1e0cb2da092a2feef91bbfee98abc>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/A 36 def
/C 38 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 65 /A put
dup 67 /C put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[35{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef /zero /one 
2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 
/.notdef /C 12{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a 
3{/.notdef}rp /e 2{/.notdef}rp /h /i /j /k /.notdef 
/m /n /o /p /.notdef /r /s /t 
/.notdef /v /.notdef /x /y 134{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
111.113 183.976 mo
(ACT)
[7.76479 8.41769 0 ]xsh
.301961 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 7008 71 <00020046ffe803df05ba0011001d00d640ab0a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d0110110114011601180110411741224bf07cf07df07ff07041f073f07
4f070307191e3450182b4e10f45d714dedfd5d713c10ed10fd3ce4003fed
3f3c3fed3f3c11391112393130005d01715d007121350623222626353412
3633321617113311011416333236353426232206033865c47fd5756ad483
60962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a5141020efa4602
12cccac1c6daccc4>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 7646 73 <000100130000028005d3001700b3401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040281a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff134004172504000302920101
00b8ffc0b331383400b8ffc0400a1c1f3490000100a31819bc01ba002100
f6010a00182b2bf65d2b2b3c10f43c103ced10eded5d003f3f3c3c3cfd3c
3fed391139313043794014101106090706080602061009121b0011060f1b
012b012b2a8181012b715d00723311233533353437363633321707262322
06151533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b3446
57129d0a4660628cfc66>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/d 71 def
/f 73 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 100 /d put
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[35{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef /zero /one 
2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 7{/.notdef}rp /A 
/.notdef /C 12{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a 
2{/.notdef}rp /d /e /f /.notdef /h /i /j 
/k /.notdef /m /n /o /p /.notdef /r 
/s /t /.notdef /v /.notdef /x /y 134{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
111.113 196.607 mo
(n.pron.def.pers)
[6.48232 3.22942 6.48232 3.88229 6.48232 6.48232 3.22942 6.48232 6.48232 3.2294 3.22942 6.48232 
6.48232 3.88231 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14156 141 <000100de04aa024f05c200030065b90001ffc8b317193402b8ffc0b31719
3403b8ffc040261719347f018002df01036f037f007f03036f006f01024f
015002020000031003020387010401b80260b2028603b80253b5001904d9
a7182b4e10f44dfdf4fd003ffd5d3c3130015d5d5d5d2b2b2b13133303de
85ecdc04aa0118fee800>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14560 234 <ffff0021fe5103ee05c20226005c00000107008d00c60000001f40110100
1e01901ee01e021e0f22482b01011eb902220029002b012b5d713500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 9406 79 <000100830000013705ba0003008cb90005ffc0b337383405b8ffc0b33435
3405b8ffc0b330313405b8ffc0b322253405b8ffc040251517340f051f05
9f05df05044f05df05f005031f0570058005ff05040100000a0203250100
b8ffc0b337383400b8ffc0401a3335349f0001c000f0000200002000d000
e00004004e044750182b10f65d71722b2b3cfd3c003f3f3130015d71722b
2b2b2b2b3311331183b405bafa46>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 13640 93 <00010028000003d40426000e0188400d12b802c9080212013212173408b8
ffce4009121734013e1e213408b8ffc2404a1e2134290228092f10390139
0a49014602460849094f105c01540254085a0950106c01630263086a097b
0174087b098b0185088909f901f4021b1908260129082b093908a508d701
0710b8ffc0b7101534022c123909b8ffd44027123901023a090a02080a0a
25010214010102010d0e08060261052b0706060a610d000d2b0e0a02b801
0fb40808070506b8025b402c0007220da00e01000e400e600e800ef00e05
0e74000a7e0101af00014f006f00ff000300190f1074217cc4182b2b4ef4
5d713c4d10ed10fd5d713ce410f43c103c10fd003fed3c10e53f3cfde511
3911123987052e2b877dc4100ec42b3130012b2b2b715d002b2b2b2b435c
58b5290126080201b8ffce4009121734083212173401b8ffc2b71e213408
3e1e2134002b2b2b2b017159015d435c58b90008ffdeb20f3909b8ffdeb2
0f3909b8ffe8b71b390908161b3d09b8fff0b2173909b8fff8400a163902
141639021a16392b2b2b2b2b2b2b2b593335010623213521150107363321
152802a47358fe4f0364fdc16f796a01eb920308069277fd5e7b099b>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/yacute 234 def
/l 79 def
/z 93 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 32 /yacute put
dup 108 /l put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef 
/zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 
7{/.notdef}rp /A /.notdef /C 12{/.notdef}rp /P 3{/.notdef}rp /T 
12{/.notdef}rp /a 2{/.notdef}rp /d /e /f /.notdef /h 
/i /j /k /l /m /n /o /p 
/.notdef /r /s /t /.notdef /v /.notdef /x 
/y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
120.829 239.356 mo
(zdemolovan )
[5.82941 6.48232 6.48232 9.71172 6.48232 2.58827 6.4823 5.82942 6.48232 6.48232 0 ]xsh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 4988 53 <000200a1000005ad05ba00180022014c400f120b0e0112361c5a1f66086d
1f0412b8ffe2b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2
b31d27340fb8ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8
ffe2b3121a340fb8ffe24073121a34250e4a1c4a20530b5c1c6d1c720978
0e790f850a880f970da90fb80fe80ee70f100e0c0c20110f1411110f110f
0c09121b02211a160a061211100d0c0518090916171a191e17170021221e
0201020018180f0f0e081e260e9c065d2024702480240324221820012000
01005d233ba8182b4e10f45d3c4dfd3c105df619e418ed003f3c103c103c
3f3cfd3c12392ffd3c103c392f12173901111739870e2e2b057d10c43130
015d2b2b2b2b2b2b2b2b2b005d435c58400a08400f390f103a11123a2b2b
2b590171435c58b9000effde401a193911221939122219390e401c391022
143910221f39102215392b2b2b2b2b2b2b59331121321616151406071617
1617132303262626272623231111213236363534262321a1028ac4cc7aca
d34d28554cfff4c2556e572d214be101a185964e97a3fe3005ba4fc8799c
d61d25244e75fe710131848c380b07fd7503333779476886>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 5432 54 <0001005cffe704eb05d3003000fe409c6303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e280d26240224
032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b7a
0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f96151e
25240e0d0b05211c1d1e1b08070604030206012524220e0d0b06051e1b2d
8f1a011aed16002d1001200150016001700190010601b801b040252d1e1e
1603051e2d091b261a4a0926002901291a32212612012612542000010019
31635b182b4e10f45d4de4ed10ed4e10f65d4dedf4ed003fed3fed10fd5d
e410fd5df41112173911173911123939011217393130005d71015d711337
161616333236363534262726242726263534363633321616170726262322
06151417160417161615140606232224265cb70d5fc87d6faa53505c3bfe
6c5169677ef294a3f98605ba0fada9b0a1393801d958807a86fb9dc7fef3
9901d7106e8d5742734445672317612b37a3656fc16469cc810e8b8e815b
4f33336b283bb57675cf7374e900>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/R 53 def
/S 54 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 82 /R put
dup 83 /S put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef 
/zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 
7{/.notdef}rp /A /.notdef /C 12{/.notdef}rp /P /.notdef /R 
/S /T 12{/.notdef}rp /a 2{/.notdef}rp /d /e /f 
/.notdef /h /i /j /k /l /m /n 
/o /p /.notdef /r /s /t /.notdef /v 
/.notdef /x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
120.829 251.986 mo
(RSTR)
[8.41767 7.7648 7.11189 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
120.829 264.617 mo
(adj.denot)
[6.48231 6.48232 2.58826 3.22942 6.48232 6.48232 6.48232 6.4823 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 6404 69 <00020086ffe8041f05ba0010001d00d640ac01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b1824d00b01100b400b60
0b800b040b74011133003303250202c001019001a001b001f001041f013f
014f010301191e4737182b4e10f45d71723c4d10fdf4e410fd5d71ed003f
ed3f3fed3f11391112393130005d015d7172007121231133113633321616
1615100023222703141716333236353426232206012da7b472b162af7140
fef2bdbc6b0234559176aca57576ac05bafdf58f4f8fca73feeffed69d01
96bf558bcdcbd0c6cd00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/b 69 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef 
/zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 
7{/.notdef}rp /A /.notdef /C 12{/.notdef}rp /P /.notdef /R 
/S /T 12{/.notdef}rp /a /b /.notdef /d /e 
/f /.notdef /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /.notdef 
/v /.notdef /x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
199.195 171.346 mo
(Trabant)
[7.11191 3.88231 6.4823 6.48232 6.48232 6.48232 0 ]xsh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 3780 47 <000100960000042a05ba00050033400c010204031e05000820040104b802
a7400e0702032001200001005d063b5c182b10f65d3cfd3c10e65d003f3c
fd3c3f313033113311211596c202d205bafaf3ad>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 4582 50 <00020063ffe705dd05d4000e001b007f40601a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b091526200701071a801d011d0f2620000100191c635c182b4e10f45d4d
ed4e105df65d4ded003fed3fed3130015d71005d5d5d7113100021320412
1514020423222402371000333200113402262322006301880136cb0146ab
b4feb6bfcffebaa8c8011dd7db011b79e991cefed702ca016d019dc2fea5
dcdffea0b5c8015abefef7fecf0134011bb3010b93fee500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/L 47 def
/O 50 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 76 /L put
dup 79 /O put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef 
/zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 
7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 2{/.notdef}rp /O 
/P /.notdef /R /S /T 12{/.notdef}rp /a /b 
/.notdef /d /e /f /.notdef /h /i /j 
/k /l /m /n /o /p /.notdef /r 
/s /t /.notdef /v /.notdef /x /y /z 
133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
199.195 183.976 mo
(LOC)
[6.48232 9.05884 0 ]xsh
.341176 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 6714 70 <00010050ffe803ed043e001a00cd4047090c011f1c431343175313531760
1360179b029b039a0da410a41a0c080d190a6a0269036a05750c700d800d
a60cb509b60ab50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa
4049300040005000600070009000a000e000f00009000f0f0b000004121c
0b07181c040b1c0f010f240e221b000100240b2b1f010100010101491c15
24cf07011f073f070207311b34c4182b10f65d71ed10f65d724b53234b51
5a58b90001ffc03859ed72f4ed72003fed3fed12392f11392f105de4105d
e43130005d71015d71011706062322001134123633321617072626232206
151416333236033cb11defaedafef772e989addc1faf197f5a88aaa4846a
8e018517b7cf011d010aac010281afa11b6b6cc3d3d6c282>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/c 70 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 99 /c put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /period /.notdef 
/zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp /nine 
7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 2{/.notdef}rp /O 
/P /.notdef /R /S /T 12{/.notdef}rp /a /b 
/c /d /e /f /.notdef /h /i /j 
/k /l /m /n /o /p /.notdef /r 
/s /t /.notdef /v /.notdef /x /y /z 
133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
226.39 183.976 mo
(basic)
[6.48232 6.4823 5.82942 2.58827 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
199.195 196.607 mo
(n.denot)
[6.48232 3.22942 6.48232 6.48232 6.48232 6.4823 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14286 213 <000100c60000017a0426000300264016020106000a05a302032501000020
000200a304ead2182b10f65d3cfd3ce6003f3f3c313033113311c6b40426
fbda>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14156 141 <000100de04aa024f05c200030065b90001ffc8b317193402b8ffc0b31719
3403b8ffc040261719347f018002df01036f037f007f03036f006f01024f
015002020000031003020387010401b80260b2028603b80253b5001904d9
a7182b4e10f44dfdf4fd003ffd5d3c3130015d5d5d5d2b2b2b13133303de
85ecdc04aa0118fee800>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14088 116 <ffff00bd0000022e05c2022600d500000106008ddf00002bb10107b8ffc0
b317193407b8ffc0400e2225342f070107015a482b010107b90222002900
2b012b5d2b2b3500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/iacute 116 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 33 /iacute put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /.notdef /numbersign 9{/.notdef}rp /hyphen /period 
/.notdef /zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 2{/.notdef}rp 
/O /P /.notdef /R /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /.notdef /h /i 
/j /k /l /m /n /o /p /.notdef 
/r /s /t /.notdef /v /.notdef /x /y 
/z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
208.911 239.356 mo
(m!sto)
[9.71173 3.22942 5.82942 3.22942 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
208.911 251.986 mo
(LOC)
[6.48232 9.05884 0 ]xsh
.341176 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
236.105 251.986 mo
(basic)
[6.48232 6.48232 5.82941 2.58827 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
208.911 264.617 mo
(n.denot)
[6.48232 3.22942 6.48232 6.48232 6.48232 6.4823 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14348 223 <0001002804aa02a105c20006004840130506010f021f0202028700640403
023c013d03b8ffc04011090c3403640064047f063c0519079b7a182b194e
10f4184dfd19f618fdfd2b19f618ed002f3cedfd5d3c3c3c313001373303
23033301676ecce1c0d8ce0518aafee80118>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14618 284 <ffff003c000002c605c2022600550000010600df1400001db7013f124f12
021206b8ff96b4482b010115b902220029002b012b5d3500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/rcaron 284 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 34 /rcaron put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign 9{/.notdef}rp /hyphen /period 
/.notdef /zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C 8{/.notdef}rp /L 2{/.notdef}rp 
/O /P /.notdef /R /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /.notdef /h /i 
/j /k /l /m /n /o /p /.notdef 
/r /s /t /.notdef /v /.notdef /x /y 
/z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
218.627 103.336 mo
(zem"!t)
[5.82941 6.48232 9.71173 3.88231 3.22942 0 ]xsh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 3270 39 <0002009e0000055a05ba000f001d00844026201f0143081c1d1e02010211
101e0f00081726200901091a1f1d102001200001005d1e3b5c182b10f65d
3cfd3c10f65ded003f3cfd3c3f3cfd3c313043794036031b070806080508
0408040619181a1802060b0a0c0a0d0a030615161416131603061b031721
01120e17210118081c2101160a1121002b2b012b2b2a2a2a2a81015d3311
213217161716121514020606062325213236373636353426272623219e01
f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4eadfecc05ba15
1d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 3502 40 <000100a2000004e805ba000b005b401506051e080807070003041e020102
0a091e0b000807b8ffc0401c1012340754034a200a200d020a1a0d040920
01200001005d0c3b5b182b4e10f45d3c4dfd3c4e10f65d4df4e42b003f3c
fd3c3f3cfd3c12392f3c10fd3c3130331121152111211521112115a20424
fc9e032bfcd5038405baadfe3facfe0dad00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/D 39 def
/E 40 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 68 /D put
dup 69 /E put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign 9{/.notdef}rp /hyphen /period 
/.notdef /zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /D /E 6{/.notdef}rp 
/L 2{/.notdef}rp /O /P /.notdef /R /S /T 
12{/.notdef}rp /a /b /c /d /e /f /.notdef 
/h /i /j /k /l /m /n /o 
/p /.notdef /r /s /t /.notdef /v /.notdef 
/x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
218.627 115.967 mo
(PRED)
[7.76479 8.41768 7.7648 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
218.627 128.597 mo
(v)sh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
228.343 307.366 mo
(dva)
[6.48232 5.82941 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
228.343 319.996 mo
(RSTR)
[8.41768 7.76479 7.11191 0 ]xsh
.301961 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 10732 84 <00020048fe6903e0043e0010001c00be40980b022b022a183b024b02790c
063f153f194b19901ea01e053413341b3f1e4413441b5313531b6313631b
601e801ed406d512e606e90cea18102902220c2b153902350c4902460c5a
026902d90cdb18e316e919e61bfc020f01040d141a1c0b070e06141c040b
000e170e3300251010d00f01100f400f600f800f040f741124bf07cf07df
07ff07041f073f074f070307191d1e74213450182b2b4ef45d714dedfd5d
713c10fdf43c003f3fed3f3fed113912393130005d015d71007101110606
23220011343636333217353311011416333236353426232206032c2a9755
bdfeef6fd37ec571a2fd21ac7873a6af7675a3fe6902083b4e012e0107a0
fe83a68efa4303adcdcdc3c7d4d6c700>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 12034 88 <00010083ffe803e00426001800bdb9001affc0400915173402201316340f
b8fff040291214342b1301240813160c0113160b06000a111c030b003316
25181740333634ff1701c01701174e1ab8ffc04015343634b01af01a0270
1aa01ab01aff1a041a0c2509b8ffc04015333634f0090100092009d009e0
0904094e194750182b10f65d712bed105d712bf65d712b3cfde4003fed3f
3f3c39390111123931304379401a04100e0d0f0d02060708060805080306
10040c1b000d08111b00002b012b2a2a81005d012b2b2b21350623222626
272635113311141716163332363635113311033f7cd55ea34f100bb40b11
6e51518e3bb49cb4486d4f35730292fdb38d314751538f880239fbda>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/q 84 def
/u 88 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 113 /q put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign 9{/.notdef}rp /hyphen /period 
/.notdef /zero /one 2{/.notdef}rp /four /.notdef /six 2{/.notdef}rp 
/nine 7{/.notdef}rp /A /.notdef /C /D /E 6{/.notdef}rp 
/L 2{/.notdef}rp /O /P /.notdef /R /S /T 
12{/.notdef}rp /a /b /c /d /e /f /.notdef 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /.notdef 
/x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
228.343 332.627 mo
(adj.quant.def)
[6.48232 6.4823 2.58827 3.22942 6.48232 6.4823 6.4823 6.48233 3.2294 3.22943 6.4823 6.48233 
0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14348 223 <0001002804aa02a105c20006004840130506010f021f0202028700640403
023c013d03b8ffc04011090c3403640064047f063c0519079b7a182b194e
10f4184dfd19f618fdfd2b19f618ed002f3cedfd5d3c3c3c313001373303
23033301676ecce1c0d8ce0518aafee80118>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14508 229 <ffff0028000003d405c20226005d0000010700df00b800000019400a0100
1411060e41010113ba02220029016485002b012b3500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/zcaron 229 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 36 /zcaron put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron 8{/.notdef}rp /hyphen 
/period /.notdef /zero /one 2{/.notdef}rp /four /.notdef /six 
2{/.notdef}rp /nine 7{/.notdef}rp /A /.notdef /C /D /E 
6{/.notdef}rp /L 2{/.notdef}rp /O /P /.notdef /R /S 
/T 12{/.notdef}rp /a /b /c /d /e /f 
/.notdef /h /i /j /k /l /m /n 
/o /p /q /r /s /t /u /v 
/.notdef /x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
273.035 239.356 mo
(mu$)
[9.71173 6.48233 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
273.035 251.986 mo
(ACT)
[7.7648 8.41769 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
273.035 264.617 mo
(n.denot)
[6.48233 3.2294 6.48233 6.4823 6.4823 6.48233 0 ]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
282.75 171.346 mo
(#Dash)
[6.48233 8.41766 6.48233 5.82941 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
282.75 183.976 mo
(APPS)
[7.7648 7.7648 7.76477 0 ]xsh
.14902 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
282.75 196.607 mo
(coap)
[5.82944 6.4823 6.48233 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 992 21 <0001003c0000040705c0001e00e740363b053b06bb05bf06bb07c708c91c
07490c590c540e6b0c640e7a127a138912bc12e51ae51bf01a0cbf0bb713
021b101c101d101e1006befff00007ffe00008fff00009fff0401a1e0a10
080606ca1c1a141c1c1a081c1a030102081a1c030d1e10b802a4b34f1101
11b80118b50d1e1405001eb802bb400f01020c0a7317d300000140212334
01bb0281002000100138400c11b53f025f026f027f020402ba0224001f01
8fb18b182b10f65df4ed10f62b3c10f4ed003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c401111239313000383838380138383838
005d015d7225152126373636373636353426232206072736363332161514
0606070606070407fc37021725a39aefa8997b829c01b913f8d1d3f648a7
c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9eaad58aabca4886131
>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 1938 27 <00030053ffe7041905c000170023003000df4037351601291649164926e6
0ce930050930017d007d017c047408710b720c750d7a178b008a018c0486
08810b840c860d8d17cc11c6131222b8ffe0b21c201ab8ffe0b220202fb8
ffe0b22d2026b8ffe0401e29200c001e18000c1b1e2ea02e012e12211e06
05281e120d1e73bf090109b8026740102b730f40202334300f01000f100f
020fb80191b6321873b0030103b80267b2247315b8ffc0400e2123342015
401502159031c78b182b10f65d2bedf45ded10f45d712bedf45ded003fed
3fed12395d2fed393901111239393130013838383838383838015d727100
710126263534363332161514060716161514002322003534361314163332
3635342623220603141616333236353426232206016a706ce6bfc0ea6b6d
878dfef6d9d9fef69162866b6885896667883a49905381a8ad827fa7031b
29986aa0dadfa06697292cc488bcff000101c08fc101546884835f638784
fcff4d904fa68082aaa8>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/two 21 def
/eight 27 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 50 /two put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron 8{/.notdef}rp /hyphen 
/period /.notdef /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 6{/.notdef}rp /L 2{/.notdef}rp /O /P /.notdef 
/R /S /T 12{/.notdef}rp /a /b /c /d 
/e /f /.notdef /h /i /j /k /l 
/m /n /o /p /q /r /s /t 
/u /v /.notdef /x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
292.466 375.376 mo
(82let )
[6.48233 6.4823 2.58826 6.48233 3.2294 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
292.466 388.006 mo
(RSTR)
[8.41769 7.7648 7.11191 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
292.466 400.637 mo
(adj.denot)
[6.48233 6.4823 2.58826 3.22943 6.4823 6.48233 6.4823 6.48233 0 ]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
305.427 307.366 mo
(senior)
[5.82941 6.48233 6.4823 2.58826 6.48233 0 ]xsh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 3860 48 <000100980000060f05ba00100175407f00020f0814021b0804760c860cc8
0c03090c490c490f032904250d2c0e58035b04760d780e870d080b020508
390d360e4f024b03440740084d0d420e0a9802990396079608a803a70706
12020f0e0e30050214050502080c0d0d300508140505080c520f52014001
02020808090a0b0b0d0d0e0e1000080902601280120212ba02a8000d0131
b2052008b80131400a0c090a20400c7f0b010bba0256000e010bb2052002
b8010b40090f0100200f70100110b80256b72005600580050305b802a8b3
113b59182b1910f45df45d3c18fd3c10ed1a1910edf45d3c1a18fd3c10ed
1a1910ede45d00183f3f3c3c103c103c103c103c103c103c1a10eded8705
2e2b877dc4872e182b877dc43130004bb00b534bb01e515a58bd000cfffb
0008ffd60002ffd638383859014bb00c534bb028515a58b9000dfff8b10e
0a38385901435c58b9000dffd4b621390e2c21390db8ffd4b637390e3237
390db8ffd4b52d390e2c2d392b2b2b2b2b2b5972715d00715d015d331121
0116173637012111231101230111980124015b30161935015f0105bbfe56
affe5805bafbf29148509b03fcfa4604cbfb3504e0fb2000>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 4304 49 <0001009c0000051f05ba000900eab1120bb8ffc040351315340802030320
0708140707080207030308090402020907080403200606055d200b01200b
500b600b700b800b050b0809200100b8ffc0400c131534200001005d0a3b
59182b10f65d2b3cfd3c105d71f43c10fd3c003f3c3f3c12393901113939
87042e2b877dc43130012b435c58b40840463903b8ffc0b6463908403239
03b8ffc0b632390722193902b8ffdeb619390722323902b8ffdeb6323907
22233902b8ffde400b2339070e1439070e133902b8fff4b61339070e1d39
02b8fff4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b
2b2b002b2b2b2b59331133011133112301119cc70302bac7fcfe05bafb81
047ffa460480fb80>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/M 48 def
/N 49 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 77 /M put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron 8{/.notdef}rp /hyphen 
/period /.notdef /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 6{/.notdef}rp /L /M /N /O /P 
/.notdef /R /S /T 12{/.notdef}rp /a /b /c 
/d /e /f /.notdef /h /i /j /k 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
305.427 319.996 mo
(DENOM)
[8.41769 7.76477 8.41769 9.05884 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
305.427 332.627 mo
(n.denot)
[6.4823 3.22943 6.4823 6.48233 6.4823 6.4823 0 ]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
321.613 239.356 mo
(a)sh
.211765 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 3640 45 <00010037ffe7036105ba0011004d40106502670674027506880d88110609
0201b8011a4021041e0f0909260a0a08260b5d2013012013401350136013
04130126004b12b659182b10f6ed105d71f6ed3c10ed003feded3f313000
5d1337161633323636351133111406062322263baf077063496a28c259c1
82c1cd01a018a87c43737e03f2fc19b8ca6ade00>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/J 45 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 74 /J put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron 8{/.notdef}rp /hyphen 
/period /.notdef /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef /C 
/D /E 4{/.notdef}rp /J /.notdef /L /M /N 
/O /P /.notdef /R /S /T 12{/.notdef}rp /a 
/b /c /d /e /f /.notdef /h /i 
/j /k /l /m /n /o /p /q 
/r /s /t /u /v /.notdef /x /y 
/z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
321.613 251.986 mo
(CONJ)
[8.41766 9.05884 8.41769 0 ]xsh
.14902 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
321.613 264.617 mo
(coap)
[5.82941 6.4823 6.48233 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14348 223 <0001002804aa02a105c20006004840130506010f021f0202028700640403
023c013d03b8ffc04011090c3403640064047f063c0519079b7a182b194e
10f4184dfd19f618fdfd2b19f618ed002f3cedfd5d3c3c3c313001373303
23033301676ecce1c0d8ce0518aafee80118>TDJBAA+CBC+Arial~1203945399 AddT42Char 
1 14456 227 <ffff003fffe803b105c2022600560000010700df009400000019400c0170
3101311512482b010135b902220029002b012b713500>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/scaron 227 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 37 /scaron put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron /scaron 7{/.notdef}rp 
/hyphen /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef 
/C /D /E 4{/.notdef}rp /J /.notdef /L /M 
/N /O /P /.notdef /R /S /T 12{/.notdef}rp 
/a /b /c /d /e /f /.notdef /h 
/i /j /k /l /m /n /o /p 
/q /r /s /t /u /v /.notdef /x 
/y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
350.119 375.376 mo
(dal%!)
[6.4823 6.4823 2.58829 5.82941 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
350.119 388.006 mo
(RSTR)
[8.41766 7.7648 7.11191 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
350.119 400.637 mo
(adj.denot)
[6.4823 6.4823 2.58829 3.2294 6.48233 6.4823 6.4823 6.48233 0 ]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
359.835 307.366 mo
(mu$)
[9.71173 6.4823 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
359.835 319.996 mo
(DENOM)
[8.41766 7.7648 8.41769 9.05884 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
359.835 332.627 mo
(n.denot)
[6.4823 3.22943 6.4823 6.4823 6.48233 6.4823 0 ]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
369.551 511.396 mo
(kter )
[5.82941 3.22943 6.4823 3.88232 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
369.551 524.026 mo
(APP)
[7.76477 7.7648 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
369.551 536.656 mo
(n.pron.indef)
[6.4823 3.22943 6.4823 3.88229 6.48233 6.4823 3.22943 2.58826 6.4823 6.48233 6.4823 0 
]xsh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
379.266 443.386 mo
(toto$nost)
[3.2294 6.48233 3.2294 6.48233 5.82941 6.4823 6.48233 5.82941 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
379.266 456.016 mo
(ACT)
[7.7648 8.41766 0 ]xsh
.301961 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 7896 74 <00020042fe5103ea043e001e002a00f040600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d404105
1c1c0f0a45221c0c0a16153325330a251818d01701101740176017801704
17740f012500221f24bf0fcf0fdf0fff0f041f0f3f0f4f0f030f192b2c74
213450182b2b4ef45d714dedf4ed10fd5d713c10fde4f63c003fede43fed
fd5de43fede43f3c3130015d71005d711717161716333236373627062322
023534123633321735331114060623222613141633323635342623220666
af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0beea99a67d7ca8
ad7a78a8581a512532645a37b08b013cdd9801018c9880fc6af8cf78ab03
2ad1c0bfccc3c6c3>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/g 74 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 103 /g put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron /scaron 7{/.notdef}rp 
/hyphen /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight /nine 7{/.notdef}rp /A /.notdef 
/C /D /E 4{/.notdef}rp /J /.notdef /L /M 
/N /O /P /.notdef /R /S /T 12{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /o /p 
/q /r /s /t /u /v /.notdef /x 
/y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
379.266 468.646 mo
(n.denot.neg)
[6.4823 3.22943 6.4823 6.48233 6.4823 6.4823 3.22943 3.2294 6.48233 6.4823 0 ]xsh
0 gry
true set_gvm
%ADOBeginSubsetFont: TDJBAA+CBC+Arial~1203945399 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal TDJBAA+CBC+Arial~1203945399 gcheck setglobal} if
1 14672 290 <00020023fff202fd05ba000a002200aa402a6f056c077f078e0704600160
066007700170047207800180040800171815060a000b0d1b0c0e0b142107
b8022d40240107b7060040020201000733010a9100400140021a241b142b
1a1506211c0e0b1a0c221bb80230400c181d25171445001201121923b801
36b166182b4e10f45d4de43cfd3cf4e43c003fed3f3cfd3c014e10f64ded
fde410e4003f3c10ed10ed10e411123912390111123911123900113333c9
3130015d005d013533151406072736363703170623222626351123353311
37113315231114161633320245b8484e2d333102911a4c3c626c2c8484b3
b5b5132b281e0501b9b9657d2244175752fba09f103e65a202638c01076c
fe8d8cfd934d2c1a>TDJBAA+CBC+Arial~1203945399 AddT42Char 
TDJBAA+CBC+Arial~1203945399 /CharStrings get begin
/tcaron 290 def
end
TDJBAA+CBC+Arial~1203945399 /Encoding get
dup 38 /tcaron put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/JGHSNU+CBC+Arial~1203945399*1 
[32{/.notdef}rp /yacute /iacute /rcaron /numbersign /zcaron /scaron /tcaron 
6{/.notdef}rp /hyphen /period /.notdef /zero /one /two /.notdef 
/four /.notdef /six /.notdef /eight /nine 7{/.notdef}rp /A 
/.notdef /C /D /E 4{/.notdef}rp /J /.notdef /L 
/M /N /O /P /.notdef /R /S /T 
12{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /.notdef 
/x /y /z 133{/.notdef}rp]
JGHSNU+CBC+Arial~1203945399 nf
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
407.772 375.376 mo
(zji%&ovat)
[5.82941 2.58829 2.58826 5.82941 4.37207 6.4823 5.82944 6.4823 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
407.772 388.006 mo
(RSTR)
[8.41769 7.76477 7.11191 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
407.772 400.637 mo
(v)sh
0 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
450.531 443.386 mo
(policista)
[6.48233 6.4823 2.58826 2.58829 5.82941 2.58826 5.82944 3.2294 0 ]xsh
.211765 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
450.531 456.016 mo
(ACT)
[7.7648 8.41769 0 ]xsh
.301961 gry
JGHSNU+CBC+Arial~1203945399*1 [11.6588 0 0 -11.6588 0 0 ]msf
450.531 468.646 mo
(n.denot)
[6.48233 3.2294 6.48233 6.4823 6.48233 6.4823 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/JGHSNU+CBC+Arial~1203945399*1 uf
/JGHSNU+CBC+Arial~1203945399 uf
/TDJBAA+CBC+Arial~1203945399 uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
